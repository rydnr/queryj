//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: CustomBaseValueObject.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate custom value object
//              implementations.
//
group CustomBaseValueObject;

source() ::= <<
<!
  Generates a custom value object.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(result=result)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by QueryJ using org/acmsl/queryj/vo/CustomBaseValueObject.stg at <timestamp>
<endif>

<package_declaration(package=package)>

/*
 * Importing some JDK classes.
 */
import java.util.Date;
<if(column_type_imports)>
<column_type_imports:import(type=it)>
<endif>

<class(result=result)>
>>

first_line_description(result) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the custom result.
!>
Custom value object for \<i\><result_id>\</i\>.
>>

class(result) ::= <<
<!
 Generates the class body.
 @param result the custom result.
!>
/**
 * <[
      first_line_description(result=result)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/vo/CustomBaseValueObject.stg")>
 */
public abstract class Abstract<result.voName>ValueObject
    implements  <result.voName>
{
    <result.properties:property_declaration(attribute=it);
     separator="\n\n">

    /**
     * Creates an instance of {@link Abstract<result.voName>ValueObject}.
     <result.properties:property_javadoc(attribute=it); separator="\n">
     */
    public Abstract<result.voName>ValueObject(
        <result.properties:property_method_declaration(attribute=it);
          separator=",\n">)
    {
        <result.properties:immutable_setter_call(attribute=it);
          separator="\n">
    }

    <result.properties:property_accessors(attribute=it);
     separator="\n\n">
}
>>

property_declaration(attribute) ::= <<
<!
 Writes the declaration for given attribute.
 @param attribute the attribute.
!>
/**
 * The \<i\><attribute.columnName>\</i\> information.
 */
<type_checker(attribute=attribute)>
private <attribute.type> m__<attribute.columnNameCapitalized>;
>>

property_javadoc(attribute) ::= <<
<!
 Writes the Javadoc for given attribute.
 @param attribute the attribute.
!>
* @param <attribute.columnNameNormalizedUncapitalized> the \<i\><attribute.columnName>\</i> value.
>>

property_method_declaration(attribute) ::= <<
<!
 Writes the method declaration for given attribute.
 @param attribute the attribute.
!>
<type_checker(attribute=attribute)>final <attribute.type> <attribute.columnNameNormalizedUncapitalized>
>>

immutable_setter_call(attribute) ::= <<
<!
 Writes the method call for the immutable setter of given attribute.
 @param attribute the attribute.
!>
immutableSet<attribute.columnNameCapitalized>(<attribute.columnNameNormalizedUncapitalized>);
<endif>

>>

property_accessors(attribute) ::= <<
<!
 Writes the accessors for given attribute.
 @param attribute the attribute.
!>
<property_setter(attribute=attribute)>

<property_getter(attribute=attribute)>
>>

property_setter(attribute) ::= <<
<!
 Writes the setter for given attribute.
 @param attribute the attribute.
!>
/**
 * Specifies the \<i\><attribute.columnName>\</i\> value.
 * @param value such information.
 */
protected final void immutableSet<attribute.columnNameCapitalized>(<type_checker(attribute=attribute)>final <attribute.type> value)
{
    m__<attribute.columnNameCapitalized> = value;
}

/**
 * Specifies the \<i\><attribute.columnName>\</i\> value.
 * @param value such information.
 */
@SuppressWarnings("unused")
protected void set<attribute.columnNameCapitalized>(<type_checker(attribute=attribute)>final <attribute.type> value)
{
    immutableSet<attribute.columnNameCapitalized>(value);
}
>>

property_getter(attribute) ::= <<
<!
 Writes the getter for given attribute.
 @param attribute the attribute.
!>
/**
 * Retrieves the \<i\><attribute.columnName>\</i\> value.
 * @return such information.
 */
<type_checker(attribute=attribute)>
public <attribute.type> get<attribute.columnNameCapitalized>()
{
    return m__<attribute.columnNameCapitalized>;
}
>>
