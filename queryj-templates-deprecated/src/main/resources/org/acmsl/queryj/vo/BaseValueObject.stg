//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: BaseValueObject.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate value object
//              implementations.
//
group BaseValueObject;

source() ::= <<
<!
  Generates an abstract value object.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(tableName=table.name)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by QueryJ using org/acmsl/queryj/vo/BaseValueObject.stg at <timestamp>
<endif>

<package_declaration(package=package)>

/*
 * Importing Apache Commons Lang builder classes.
 */
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

<if(column_type_imports)>
/*
 * Importing some JDK classes.
 */
<column_type_imports:import(type=it)>

<endif>
<class(table=table)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the custom result.
!>
Abstract value-object implementation for \<i\><tableName>\</i\>.
>>

class(table) ::= <<
<!
 Generates the class body.
 @param table the table.
!>
<class_impl(table=table, parent=table.parentTable)>
>>

class_impl(table, parent) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param parent the parent table.
!>
/**
 * <[
      first_line_description(tableName=table.name)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc()>
 */
public abstract class Abstract<table.voName>ValueObject
<if(parent)>
    extends  Abstract<parent.voName>ValueObject
<endif>

    implements  <table.voName>
{
<if(parent)>
    <table.nonParentAttributes:attribute_declaration(attribute=it);
     separator="\n\n">
<else>
    <table.attributes:attribute_declaration(attribute=it);
     separator="\n\n">
<endif>


    /**
     * Creates a {@link Abstract<table.voName>ValueObject} instance.
<if(parent)>
     <table.allParentAndNonParentAttributes:attribute_javadoc(attribute=it); separator="\n">
<else>
     <table.attributes:attribute_javadoc(attribute=it); separator="\n">
<endif>

     */
    public Abstract<table.voName>ValueObject(
<if(parent)>
        <table.allParentAndNonParentAttributes:attribute_method_declaration(attribute=it);
          separator=",\n">)
<else>
        <table.attributes:attribute_method_declaration(attribute=it);
          separator=",\n">)
<endif>

    {
<if(parent)>
        super(
            <parent.allAttributes:{<it.nameUncapitalized>}; separator=",\n">);

        <table.nonParentAttributes:immutable_setter_call(attribute=it);
          separator="\n">
<else>
        <table.attributes:immutable_setter_call(attribute=it);
          separator="\n">
<endif>

    }

<if(parent)>
    <table.nonParentAttributes:attribute_accessors(attribute=it);
     separator="\n">
<else>
    <table.attributes:attribute_accessors(attribute=it);
     separator="\n">
<endif>

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode()
    {
        return
            new HashCodeBuilder()
                .appendSuper(super.hashCode())
                <table.primaryKey:{it|.append(this.m__<it.nameCapitalized>)}; separator="\n">
                .toHashCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(<nullable()>final Object obj)
    {
        boolean result = false;

        if (obj instanceof <table.voName>)
        {
            <notnull()>final <table.voName> other =
                (<table.voName>) obj;

            result =
                new EqualsBuilder()
                    .appendSuper(super.equals(obj))
                    <table.primaryKey:{it|.append(this.m__<it.nameCapitalized>, other.get<it.nameCapitalized>())}; separator="\n">
                    .isEquals();
        }

        return result;
    }

}
>>

attribute_declaration(attribute) ::= <<
<!
 Writes the declaration for given attribute.
 @param attribute the attribute.
!>
/**
<if(attribute.comment)>
 * <attribute.comment>
<else>
 * The <attribute.name>.
<endif>

 */
private <type_checker(attribute=attribute)><attribute.javaType> m__<attribute.nameCapitalized>;
>>

attribute_javadoc(attribute) ::= <<
<!
 Writes the Javadoc for given attribute.
 @param attribute the attribute.
!>
<if(attribute.comment)>
* @param <attribute.nameUncapitalized> <attribute.comment>
<else>
* @param <attribute.nameUncapitalized> the <attribute.name> information.
<endif>

>>

attribute_method_declaration(attribute) ::= <<
<!
 Writes the method declaration for given attribute.
 @param attribute the attribute.
!>
<type_checker(attribute=attribute)>final <attribute.javaType> <attribute.nameUncapitalized>
>>

attribute_accessors(attribute) ::= <<
<!
 Writes the accessors for given attribute.
 @param attribute the attribute.
!>
<attribute_setter(attribute=attribute)>

<attribute_getter(attribute=attribute)>
>>

attribute_setter(attribute) ::= <<
<!
 Writes the setter for given attribute.
 @param attribute the attribute.
!>
/**
 * Specifies the \<i\><attribute.name>\</i\> value.
<if(attribute.comment)>
 * @param value <attribute.comment>
<else>
 * @param value the <attribute.name> information.
<endif>

 */
protected final void immutableSet<attribute.nameCapitalized>(<type_checker(attribute=attribute)>final <attribute.javaType> value)
{
    m__<attribute.nameCapitalized> = value;
}

/**
 * Specifies the \<i\><attribute.name>\</i\> value.
 * @param value such information.
 */
@SuppressWarnings("unused")
protected void set<attribute.nameCapitalized>(<type_checker(attribute=attribute)>final <attribute.javaType> value)
{
    immutableSet<attribute.nameCapitalized>(value);
}
>>

immutable_setter_call(attribute) ::= <<
<!
 Writes the method call for the immutable setter of given attribute.
 @param attribute the attribute.
!>
immutableSet<attribute.nameCapitalized>(<attribute.nameUncapitalized>);
<endif>

>>

attribute_getter(attribute) ::= <<
<!
 Writes the getter for given attribute.
 @param attribute the attribute.
!>
/**
 * Retrieves the \<i\><attribute.name>\</i\> value.
<if(attribute.comment)>
 * @return <attribute.comment>
<else>
 * @return such information.
<endif>

 */
<type_checker(attribute=attribute)>
public <attribute.javaType> get<attribute.nameCapitalized>()
{
    return m__<attribute.nameCapitalized>;
}
>>
