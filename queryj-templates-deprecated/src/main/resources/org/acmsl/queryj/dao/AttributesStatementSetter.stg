//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: AttributesStatementSetter.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate AttributeStatementSetters.
//
group AttributesStatementSetter;

source() ::= <<
<!
  Generates an AttributeStatementSetter source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(tableName=table.name),
    second_line_description(tableName=table.name),
    third_line_description(tableName=table.name)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated using org/acmsl/queryj/dao/AttributesStatementSetter.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<checkers_import()>

/*
 * Importing Spring-JDBC classes.
 */
import org.springframework.jdbc.core.PreparedStatementSetter;

/*
 * Importing some JDK classes
 */
<if(column_type_imports)>
<column_type_imports:import(type=it)>
<endif>
import java.sql.PreparedStatement;
import java.sql.SQLException;

<class(table=table)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
Specifies the PreparedStatement values required
>>

second_line_description(tableName) ::= <<
<!
  Generates the second line of the generated file description.
  @param tableName the table name.
!>
to perform any <tableName> operation expecting the
>>

third_line_description(tableName) ::= <<
<!
  Generates the third line of the generated file description.
  @param tableName the table name.
!>
complete attribute set.
>>

class(table) ::= <<
<!
 Generates the class body.
 @param table the table.
!>
<classImpl(table=table, parent=table.parentTable)>
>>

classImpl(table, parent) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param parent the parent table.
!>
/**
 * <[
      first_line_description(tableName=table.name),
      second_line_description(tableName=table.name),
      third_line_description(tableName=table.name)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/AttributesStatementSetter.stg")>
*/
<class_annotations()>
public class <table.voName>AttributesStatementSetter
    implements  PreparedStatementSetter
{
<if(parent)>
    <table.allParentAndNonParentNonReadOnlyAttributes:attribute_member_declaration(attr=it); separator="\n\n">
<else>
    <table.attributes:attribute_member_declaration(attr=it); separator="\n\n">
<endif>

    /**
     * The \<i>update\</i> operation.
     */
    private boolean m__bUpdateOperation;

    /**
     * The \<i>insert\</i> operation.
     */
    private boolean m__bInsertOperation;

<if(lob_handling_required)>
    /**
     * The \<i>select for update\</i> operation.
     */
    private boolean m__bSelectForUpdateOperation;

    /**
     * Creates a {@link <table.voName>AttributesStatementSetter}
     * instance.
<if(parent)>
    <table.allParentAndNonParentNonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
<else>
    <table.attributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
<endif>

     * @param updateOperation whether the operation is an update.
     * @param selectForUpdateOperation whether the operation is a select-for-update.
     */
    public <table.voName>AttributesStatementSetter(
<if(parent)>
        <table.allParentAndNonParentNonReadOnlyAttributes:attribute_isolated_declaration_impl(attr=it);
          separator="\n">
<else>
    <table.attributes:attribute_isolated_declaration_impl(attr=it);
          separator="\n">
<endif>

        final boolean updateOperation,
        final boolean insertOperation,
        final boolean selectForUpdateOperation)
    {
<if(parent)>
        <table.allParentAndNonParentNonReadOnlyAttributes:
          { attr | immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);};
          separator="\n\n">
<else>
        <table.attributes:
          { attr | immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);};
          separator="\n\n">
<endif>         immutableSetUpdateOperation(updateOperation);
        immutableSetInsertOperation(insertOperation);
        immutableSetSelectForUpdateOperation(selectForUpdateOperation);
    }
<else>
    /**
     * Creates a {@link <table.voName>AttributesStatementSetter}
     * instance.
<if(parent)>
     <table.allParentAndNonParentNonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased);
        separator="\n">
<else>
     <table.nonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased);
        separator="\n">
<endif>

     * @param updateOperation whether the operation is an update.
     */
    public <table.voName>AttributesStatementSetter(
<if(parent)>
        <table.allParentAndNonParentNonReadOnlyAttributes:attribute_isolated_declaration_impl(attr=it);
          separator="\n">
<else>
        <table.nonReadOnlyAttributes:attribute_isolated_declaration_impl(attr=it);
          separator="\n">
<endif>

        final boolean updateOperation,
        final boolean insertOperation)
    {
<if(parent)>
        <table.allParentAndNonParentNonReadOnlyAttributes:
          { attr | immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);};
          separator="\n">
<else>
        <table.primaryKey:
          { attr | immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);};
          separator="\n\n">

        <table.nonPrimaryKeyNonReadOnlyAttributes:
          { attr | immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);};
          separator="\n\n">
<endif>        immutableSetUpdateOperation(updateOperation);
        immutableSetInsertOperation(insertOperation);
    }
<endif>


    /**
     * Specifies whether the operation is an update or not.
     * @param updateOperation such information.
     */
    protected final void immutableSetUpdateOperation(
        final boolean updateOperation)
    {
        m__bUpdateOperation = updateOperation;
    }

    /**
     * Specifies whether the operation is an update or not.
     * @param updateOperation such information.
     */
    @SuppressWarnings("unused")
    protected void setUpdateOperation(final boolean updateOperation)
    {
        immutableSetUpdateOperation(updateOperation);
    }

    /**
     * Retrieves whether the operation is an update or not.
     * @return such information.
     */
    public boolean isUpdateOperation()
    {
        return m__bUpdateOperation;
    }

    /**
     * Specifies whether the operation is an insert or not.
     * @param insertOperation such information.
     */
    protected final void immutableSetInsertOperation(
        final boolean insertOperation)
    {
        m__bInsertOperation = insertOperation;
    }

    /**
     * Specifies whether the operation is an insert or not.
     * @param insertOperation such information.
     */
    @SuppressWarnings("unused")
    protected void setInsertOperation(final boolean insertOperation)
    {
        immutableSetInsertOperation(insertOperation);
    }

    /**
     * Retrieves whether the operation is an insert or not.
     * @return such information.
     */
    public boolean isInsertOperation()
    {
        return m__bInsertOperation;
    }

<if(lob_handling_required)>
    /**
     * Specifies whether the operation is a select-for-update or not.
     * @param selectForUpdateOperation such information.
     */
    protected final void immutableSetSelectForUpdateOperation(
        final boolean selectForUpdateOperation)
    {
        m__bSelectForUpdateOperation = selectForUpdateOperation;
    }

    /**
     * Specifies whether the operation is a select-for-update or not.
     * @param selectForUpdateOperation such information.
     */
    protected void setSelectForUpdateOperation(
        final boolean selectForUpdateOperation)
    {
        immutableSetSelectForUpdateOperation(selectForUpdateOperation);
    }

    /**
     * Retrieves whether the operation is a select-for-update or not.
     * @return such information.
     */
    public boolean isSelectForUpdateOperation()
    {
        return m__bSelectForUpdateOperation;
    }


<endif>
<if(parent)>
    <table.allParentAndNonParentNonReadOnlyAttributes:attribute_accessor(attr=it); separator="\n\n">
<else>
    <table.nonReadOnlyAttributes:attribute_accessor(attr=it); separator="\n\n">
<endif>


    /**
     * Specifies the values on given {@link PreparedStatement}.
     * @param preparedStatement the prepared statement.
     * @throws SQLException intercepted by \<i>Spring\</i>.
     */
    public void setValues(<notnull()> final PreparedStatement preparedStatement)
        throws  SQLException
    {
        setValues(
            preparedStatement,
<if(parent)>
            <table.allParentAndNonParentNonReadOnlyAttributes:{attr | get<attr.nameCapitalized>()}; separator=",\n">,
<else>
            <table.nonReadOnlyAttributes:{attr | get<attr.nameCapitalized>()}; separator=",\n">,
<endif>

<if(lob_handling_required)>
            isUpdateOperation(),
            isInsertOperation(),
            isSelectForUpdateOperation());

<else>
            isUpdateOperation(),
            isInsertOperation());

<endif>
    }

    /**
     * Specifies the values on given {@link PreparedStatement}.
     * @param preparedStatement the prepared statement.
<if(parent)>
     <table.allParentAndNonParentNonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased);
        separator="\n">
<else>
     <table.nonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased);
        separator="\n">
<endif>

     * @param updateOperation whether the operation is an update.
     * @param insertOperation whether the operation is an insert.
<if(lob_handling_required)>
     * @param selectForUpdateOperation whether the operation is a
     * select-for-update.

<endif>
     * @throws SQLException intercepted by \<i>Spring\</i>.
     */
    protected void setValues(
        <notnull()>final PreparedStatement preparedStatement,
<if(parent)>
        <table.allParentAndNonParentNonReadOnlyAttributes:attribute_isolated_declaration_impl(attr=it);
          separator="\n">
<else>
        <table.nonReadOnlyAttributes:attribute_isolated_declaration_impl(attr=it);
          separator="\n">
<endif>

<if(lob_handling_required)>
        final boolean updateOperation,
        final boolean insertOperation,
        final boolean selectForUpdateOperation)

<else>
        final boolean updateOperation,
        final boolean insertOperation)

<endif>

      throws  SQLException
    {
        int index = 0;

<if(lob_handling_required)>
        if  (insertOperation)
        {
            <table.primaryKey:
              attribute_preparedstatement_specification(attr=it);
              separator="\n\n">

        }
<else>
<if(table.primaryKey)>
        if  (insertOperation)
        {
            <table.primaryKey:
              attribute_preparedstatement_specification(attr=it);
              separator="\n\n">
        }
<endif>
<endif>

<if(lob_handling_required)>
        if  (selectForUpdateOperation)
        {
           <table.allNonReadOnlyNonPrimaryKeyButLobAttributes:
             attribute_preparedstatement_specification(attr=it);
             separator="\n\n">
        }
        else
        {
           <table.nonPrimaryKeyNonReadOnlyAttributes:
             attribute_preparedstatement_specification(attr=it);
             separator="\n\n">
        }
<else>
        <table.nonPrimaryKeyNonReadOnlyAttributes:
          attribute_preparedstatement_specification(attr=it);
          separator="\n">

<endif>

<if(lob_handling_required)>
        if  (updateOperation)
        {
            <table.primaryKey:
              attribute_preparedstatement_specification(attr=it);
              separator="\n">

        }
<else>
<if(table.primaryKey)>
        if  (updateOperation)
        {
            <table.primaryKey:
              attribute_preparedstatement_specification(attr=it);
              separator="\n">
        }
<endif>
<endif>

    }
}
>>

attribute_member_declaration(attr) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param attr the attribute.
!>
/**
 * The \<i><attr.name>\</i> information.
 */
private <if(attr.clob)>String<else><attr.javaType><endif> <attr.nameLowercased>;
>>

attribute_accessor(attr) ::= <<
<!
 Generates the accessor for a concrete attribute.
 @param attr the attribute.
!>
/**
 * Specifies the \<i><attr.name>\</i> value.
 <attribute_javadoc(name=attr.nameLowercased)>
 */
protected final void immutableSet<attr.nameCapitalized>(<attribute_declaration_impl(attr=attr)>)
{
    this.<attr.nameLowercased> = <attr.nameLowercased>;
}

/**
 * Specifies the \<i><attr.name>\</i> value.
 <attribute_javadoc(name=attr.nameLowercased)>
 */
@SuppressWarnings("unused")
protected void set<attr.nameCapitalized>(<attribute_declaration_impl(attr=attr)>)
{
    immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);
}

/**
 * Retrieves the \<i><attr.name>\</i> value.
 * @return such value.
 */
<type_checker(attribute=attr)>
protected <if(attr.clob)>String<else><attr.javaType><endif> get<attr.nameCapitalized>()
{
    return <attr.nameLowercased>;
}
>>

attribute_preparedstatement_specification(attr) ::= <<
<!
 Generates the code to specify the attribute into the PreparedStatement.
 @param attr the attribute.
!>
index = index + 1;
<if(!attr.clob)>
<if(attr.nullable)>
if  (<attr.nameLowercased> == null)
{
<if(attr.booleanNull)>
<if(attr.string)>
    preparedStatement.set<attr.objectType>(index, "<attr.booleanNull>");
<else>
    preparedStatement.set<attr.objectType>(index, <attr.booleanNull>);
<endif>
<else>
    preparedStatement.setNull(index, <attr.javaSqlType>);
<endif>

}
else
{
    <preparedstatement_set(attr)>
}
<else>
<preparedstatement_set(attr)>
<endif>
<endif>
>>

preparedstatement_set(attr) ::= <<
<!
 Generates just the call to preparedstatement.setXXX()
 @param attr the attribute.
!>
preparedStatement.set<if(attr.date)>Timestamp<else><attr.objectType><endif>(<if(attr.nullable)>
<if(attr.boolean)>
<if(attr.string)>index, <attr.nameLowercased>.booleanValue() ? "<attr.booleanTrue>" : "<attr.booleanFalse>");
<else>index, <attr.nameLowercased>.booleanValue() ? <attr.booleanTrue> : <attr.booleanFalse>);
<endif>   
<else>index, <indirect_template(name=attr.objectType + "_to_primitive", extra1=attr)>);
<endif>
<else>
<if(attr.timestamp)>index, new Timestamp(<attr.nameLowercased>.getTime()));
<else>
<if(attr.date)>index, new Timestamp(<attr.nameLowercased>.getTime()));
<else>
<if(attr.boolean)>
<if(attr.string)>index, (<attr.nameLowercased>) ? "<attr.booleanTrue>" : "<attr.booleanFalse>");
<else>index, (<attr.nameLowercased>) ? <attr.booleanTrue> : <attr.booleanFalse>);
<endif>
<else>index, <attr.nameLowercased>);
<endif>
<endif>
<endif>
<endif>
>>
