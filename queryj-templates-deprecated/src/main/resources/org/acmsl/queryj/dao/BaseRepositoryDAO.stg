//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: BaseRepositoryDAO.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate base Repository DAO
//              implementations.
//
group BaseRepositoryDAO;

source() ::= <<
<!
  Generates a base repository DAO implementation source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(repository=repository)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by org/acmsl/queryj/dao/BaseRepositoryDAO.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<project_imports(
  basePackageName=project_package,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=table.voName)>

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

<class()>
>>

first_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository.
!>
Defines the global queries defined for <repository>.
>>


project_imports(basePackageName, voSubpackageName, voName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param voSubpackageName the value-object subpackage name.
 @param voName the value-object name.
!>
>>

class() ::= <<
<!
 Generates the class body.
!>
/**
 * <[
      first_line_description(repository=repository)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/BaseRepositoryDAO.stg")>
 */
public interface <repository.capitalized>DAO
{
    <custom_selects:custom_select(
      cs=it, table=table); separator="\n">

    <custom_updates_or_inserts:custom_update_or_insert(
      cs=it); separator="\n">

    <custom_selects_for_update:custom_select_for_update(
      cs=it, table=table); separator="\n">
}
>>

custom_select(cs, table) ::= <<
<!
 Writes the code for a custom select query.
 @param cs the custom select.
 @param table the table.
!>
/**
 * Custom select \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\</b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the \<i><cs.resultClass>\</i> information retrieved.
 * @throws DataAccessException if the operation fails.
 */
<if(table.voDecorated)>
public <cs.resultClass>Decorator <cs.nameUncapitalized>(
<else>
public <cs.resultClass> <cs.nameUncapitalized>(
<endif>

    <cs.parameters:attribute_declaration(attr=it); separator=",\n">);
>>

custom_update_or_insert(cs) ::= <<
<!
 Writes the subtemplate for custom updates or inserts.
  @param cs the custom sql.
!>
/**
 * Custom sql \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\</b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @throws DataAccessException if the operation fails.
 */
public int <cs.nameUncapitalized>(
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">);
>>

custom_select_for_update(cs, table) ::= <<
<!
 Writes the code for a custom select for update.
 @param cs the custom sql.
 @param table the table.
!>
/**
 * Custom select for update \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\</b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the \<i><cs.resultClass>\</i> information retrieved.
 * @throws DataAccessException if the operation fails.
 */
<if(cs.resultClass)>
<cs.result:{rs|<if(rs.implicitProperties)><if(table.voDecorated)>
public <cs.resultClass>Decorator <cs.nameUncapitalized>(
<else>
public <cs.resultClass> <cs.nameUncapitalized>(
<endif>
<else>
public <cs.resultClass> <cs.nameUncapitalized>(
<endif>}>
<else>
public void <cs.nameUncapitalized>(
<endif>

    <cs.parameters:attribute_declaration(attr=it); separator=",\n">);
>>
