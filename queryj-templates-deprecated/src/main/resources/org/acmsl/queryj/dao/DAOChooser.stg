//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DAOChooser.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAOChooser classes.
//
// DAOChooser.stg
//
group DAOChooser;

source() ::= <<
<!
  Generates a DAOChooser source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
    [
      first_line_description(repository=repository.capitalized),
      second_line_description(repository=repository.capitalized),
      third_line_description(repository=repository.capitalized),
      fourth_line_description(repository=repository.capitalized)
    ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by QueryJ using org/acmsl/queryj/dao/DAOChooser.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<checkers_import()>

/*
 * Importing some JDK classes.
 */
import java.io.InputStream;
import java.util.Properties;

/*
 * Importing some Commons-Logging classes.
 */
import org.apache.commons.logging.LogFactory;

<class()>
>>

first_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository name.
!>
Manages the configuration of which concrete DAO
>>

second_line_description(repository) ::= <<
<!
  Generates the second line of the generated file description.
  @param repository the repository name.
!>
implementations are actually used when
>>

third_line_description(repository) ::= <<
<!
  Generates the third line of the generated file description.
  @param repository the repository name.
!>
retrieving DAO instances via <repository>DataAccessManager
>>

fourth_line_description(repository) ::= <<
<!
  Generates the fourth line of the generated file description.
  @param repository the repository name.
!>
or DAO factory interfaces.
>>

class() ::= <<
<!
 Generates the class body.
!>
/**
 * <[
      first_line_description(repository=repository.capitalized),
      second_line_description(repository=repository.capitalized),
      third_line_description(repository=repository.capitalized),
      fourth_line_description(repository=repository.capitalized)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc()>
 */
<class_annotations()>
public class <repository.capitalized>DAOChooser
{
    /**
     * Singleton implementation to avoid double-checked locking.
     */
    private static final class <repository.capitalized>DAOChooserSingletonContainer
    {
        private static final <repository.capitalized>DAOChooser SINGLETON =
            new <repository.capitalized>DAOChooser();
    }
 
    <tables:dao_constant(
      table=it,
      repositoryLowercased=repository.lowercased,
      repositoryUppercased=repository.normalizedUppercased);
      separator="\n\n">

<if(is_repository_dao)>
    <repository_dao_constant(
      repositoryLowercased=repository.lowercased,
      repositoryUppercased=repository.normalizedUppercased);
      separator="\n\n">
<endif>

    /**
     * The configuration settings.
     */
    private static final String PROPERTIES_FILE = "queryj-<repository>.properties";

    /**
     * The configuration settings.
     */
    private Properties properties;

    /**
     * Public constructor to allow reflective access.
     */
    public <repository.capitalized>DAOChooser() {}

    /**
     * Retrieves a {@link <repository.capitalized>DAOChooser} instance.
     * @return such instance.
     */
    <notnull()>
    public static <repository.capitalized>DAOChooser getInstance()
    {
        return <repository.capitalized>DAOChooserSingletonContainer.SINGLETON;
    }

    /**
     * Specifies the properties.
     * @param properties the new properties.
     */
    private void immutableSetProperties(<notnull()>final Properties properties)
    {
        this.properties = properties;
    }

    /**
     * Specifies the properties.
     * @param properties the new properties.
     */
    @SuppressWarnings("unused")
    protected void setProperties(<notnull()>final Properties properties)
    {
        immutableSetProperties(properties);
    }

    /**
     * Retrieves the configuration settings.
     * @return the properties.
     */
    <notnull()>
    private Properties immutableGetProperties()
    {
        Properties result = getProperties();

        if  (result == null)
        {
            result = new Properties();
            loadProperties(result);
            immutableSetProperties(result);
        }

        return result;
    }

    /**
     * Retrieves the properties.
     * @return such information.
     */
     <nullable()>
     protected Properties getProperties()
     {
         return this.properties;
     }

    /**
     * Retrieves a concrete property.
     * @param key the property key.
     * @return the configuration value associated to such setting.
     */
    private String getProperty(<notnull()>final String key)
    {
        // This is safe since immutableGetProperties() is private and ensures
        // a new object if the instance's is null.
        return immutableGetProperties().getProperty(key);
    }

    /**
     * Loads the configuration from a property file.
     * @param properties where to store the settings.
     */
    private synchronized void loadProperties(<notnull()>final Properties properties)
    {
        InputStream inputStream;

        // Loading properties
        try
        {
            // try classpath
            inputStream =
                <repository.capitalized>DAOChooser.class.getClassLoader()
                    .getResourceAsStream(
                        "/" + PROPERTIES_FILE);

            if  (inputStream == null)
            {
                // try local
                inputStream =
                    <repository.capitalized>DAOChooser.class.getClassLoader()
                        .getResourceAsStream(
                            PROPERTIES_FILE);
            }

            if  (inputStream != null)
            {
                properties.load(inputStream);
            }
            else
            {
                 try
                 {
                     LogFactory.getLog(<repository.capitalized>DAOChooser.class).warn(
                           "Couldn't find the properties file: "
                         + PROPERTIES_FILE);
                 }
                 catch  (<notnull()>final Throwable throwable)
                 {
                     // class-loading problem.
                 }
            }
        }
        catch  (<notnull()>final Throwable exception)
        {
            try
            {
                 LogFactory.getLog(<repository.capitalized>DAOChooser.class).warn(
                      "Couldn't find the properties file: "
                    + PROPERTIES_FILE,
                    exception);
            }
            catch  (<notnull()>final Throwable throwable)
            {
                // class-loading problem.
            }
        }
    }

    <tables:dao_factory_getters(
      table=it, repository=repository.normalizedUppercased); separator="\n\n">

<if(is_repository_dao)>
    <repository_dao_factory_getters(
      repositoryCapitalized=repository.capitalized,
      repositoryUppercased=repository.normalizedUppercased);
     separator="\n\n">
<endif>

}
>>

dao_constant(table, repositoryLowercased, repositoryUppercased) ::= <<
<!
 Writes the constant declaration for each table.
 @param table the table.
 @param repositoryUppercased the repository, in upper-case.
 @param repositoryLowercased the repository, in lower-case.
!>
/**
 * Used to retrieve the value of \<i\><repositoryLowercased>.<table.singularNameNormalizedLowercased>.dao\</i\>
 * from the configuration layer.
 */
public static final String <repositoryUppercased>_<table.singularNameUppercased>_DAO =
    "<repositoryLowercased>.<table.singularNameNormalizedLowercased>.dao";
>>

repository_dao_constant(repositoryLowercased, repositoryUppercased) ::= <<
<!
 Writes the constant declaration for the repository DAO.
 @param repositoryLowercased the repository, in lower-case.
 @param repositoryUppercased the repository, in upper-case.
!>
/**
 * Used to retrieve the value of \<i\><repositoryLowercased>.dao\</i\>
 * from the configuration layer.
 */
public static final String <repositoryUppercased>_DAO =
    "<repositoryLowercased>.dao";
>>

dao_factory_getters(table, repository) ::= <<
<!
 Generates the getter methods to retrieve the class names of the
 concrete DAOFactory implementations.
 @param table the table.
 @param repository the repository in upper-case.
!>
/**
 * Retrieves the \<code\><table.singularNameCapitalized>DAOFactory\</code\> class name.
 * @return such class name.
 */
@SuppressWarnings("unused")
<notnull()>
public String get<table.singularNameCapitalized>DAOFactoryClassName()
{
    return getProperty(<repository>_<table.singularNameUppercased>_DAO);
}
>>

repository_dao_factory_getters(
  repositoryCapitalized, repositoryUppercased) ::= <<
<!
 Generates the getter methods to retrieve the class names of the
 repository DAOFactory implementation.
 @param repositoryCapitalized the repository, capitalized.
 @param repositoryUppercased the repository in upper-case.
!>
/**
 * Retrieves the {@link <repositoryCapitalized>DAOFactory} class name.
 * @return such class name.
 */
<notnull()>
@SuppressWarnings("unused")
public String get<repositoryCapitalized>DAOFactoryClassName()
{
    return getProperty(<repositoryUppercased>_DAO);
}
>>
