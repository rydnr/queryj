//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: BaseResultSetExtractor.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Base class of all ResultSetExtractors.
//
group BaseResultSetExtractor;

source() ::= <<
<!
  Generates a BaseResultSetExtractor source.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(),
    second_line_description()
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by org/acmsl/queryj/dao/BaseResultSetExtractor.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<checkers_import()>
/*
 * Importing some JDK classes.
 */
import java.sql.ResultSet;
import java.sql.SQLException;

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;

<class()>
>>

first_line_description() ::= <<
<!
  Generates a description for the generated file.
!>
Common resultset extractor to notify DAOListeners
>>

second_line_description() ::= <<
<!
  Generates a description for the generated file.
!>
of the ResultSet life-cycle events.
>>

class() ::= <<
<!
 Generates the class body.
 @param timestamp the timestamp.
 @param repository the table repository name.
!>
/**
 * <[
      first_line_description(),
      second_line_description()
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/BaseResultSetExtractor.stg")>
 */
public abstract class <repository.capitalized>ResultSetExtractor
    implements  ResultSetExtractor
{
    /**
     * The SQL used.
     */
    private String sql;

    /**
     * The DAOListener instance.
     */
    private <repository.capitalized>DAOListener daoListener;

    /**
     * Constructs a new {@link <repository.capitalized>ResultSetExtractor}.
     * @param daoListener the dao listener.
     */
    public <repository.capitalized>ResultSetExtractor(
        <notnull()>final String sql,
        <notnull()>final <repository.capitalized>DAOListener daoListener)
    {
        immutableSetSql(sql);
        immutableSetDAOListener(daoListener);
    }

    /**
     * Specifies the SQL used in the query.
     * @param query the query.
     */
    protected final void immutableSetSql(<notnull()>final String query)
    {
        this.sql = query;
    }

    /**
     * Specifies the SQL used in the query.
     * @param query the query.
     */
    @SuppressWarnings("unused")
    protected void setSql(<notnull()>final String query)
    {
        immutableSetSql(query);
    }

    /**
     * Retrieves the SQL used in the query.
     * @return such information.
     */
    <notnull()>
    public String getSql()
    {
        return this.sql;
    }

    /**
     * Specifies the DAO listener.
     * @param daoListener such listener.
     */
    protected final void immutableSetDAOListener(
        <notnull()>final <repository.capitalized>DAOListener daoListener)
    {
        this.daoListener = daoListener;
    }

    /**
     * Specifies the DAO listener.
     * @param daoListener such listener.
     */
    @SuppressWarnings("unused")
    protected void setDAOListener(
        <notnull()>final <repository.capitalized>DAOListener daoListener)
    {
        immutableSetDAOListener(daoListener);
    }

    /**
     * Retrieves the DAO listener.
     * @return such instance.
     */
    <notnull()>
    protected <repository.capitalized>DAOListener getDAOListener()
    {
        return this.daoListener;
    }

    /**
     * Extracts information from given result set.
     * @param resultSet the result set.
     * @return the associated value-object, or
     * \{@link null} if the operation returned no data.
     * @throws SQLException intercepted by \<i>Spring\</i\>.
     * @throws DataAccessException with information about any
     * custom exception.
     */
    <notnull()>
    public final Object extractData(<notnull()>final ResultSet resultSet)
        throws  SQLException,
                DataAccessException
    {
        return extractData(resultSet, getSql(), getDAOListener());
    }


    /**
     * Extracts information from given result set.
     * @param resultSet the result set.
     * @param sql the original SQL.
     * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
     * @return the associated value-object, or
     * \<code>null\</code> if the operation returned no data.
     * @throws SQLException intercepted by \<i>Spring\</i\>.
     * @throws DataAccessException with information about any
     * custom exception.
     */
    <notnull()>
    protected abstract Object extractData(
        <notnull()>final ResultSet resultSet,
        <notnull()>final String sql,
        <notnull()>final <repository.capitalized>DAOListener daoListener)
      throws  SQLException,
              DataAccessException;
}
>>
