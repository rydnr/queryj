//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: JndiUtils.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Generates JndiUtils sources.
//
group JndiUtils;

source() ::= <<
<!
  Generates a JndiUtils source.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description()
  ],
  timestamp=input.timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by org/acmsl/queryj/dao/JndiUtils.stg at <timestamp>
<endif>

<package_declaration(package=package)>

/*
 * Importing some Spring classes.
 */
import org.springframework.jdbc.CannotGetJdbcConnectionException;

/*
 * Importing some Apache Commons-Logging classes.
 */
import org.apache.commons.logging.LogFactory;

/*
 * Importing some JDK classes.
 */
import java.sql.SQLException;

/*
 * Importing Java extension classes.
 */
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

<class()>
>>

first_line_description() ::= <<
<!
  Generates a description for the generated file.
!>
Accesses JNDI-published {@link DataSource} instances.
>>

class() ::= <<
<!
 Generates the class body.
 @param timestamp the timestamp.
 @param repository the table repository name.
!>
/**
 * <[
      first_line_description()
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/JndiUtils.stg")>
 */
<class_annotations()>
public class <repository.capitalized>JndiUtils
{
    /**
     * Singleton implemented to avoid the double-checked locking.
     */
    private static class <repository.capitalized>JndiUtilsSingletonContainer
    {
        /**
         * The actual singleton.
         */
        public static final <repository.capitalized>JndiUtils SINGLETON =
            new <repository.capitalized>JndiUtils();
    }

    /**
     * Protected constructor to avoid accidental instantiation.
     */
    protected <repository.capitalized>JndiUtils() {}

    /**
     * Retrieves a {@link <repository.capitalized>JndiUtils} instance.
     * @return such instance.
     */
    <notnull()>
    public static <repository.capitalized>JndiUtils getInstance()
    {
        return <repository.capitalized>JndiUtilsSingletonContainer.SINGLETON;
    }

    /**
     * Retrieves the {@link DataSource} from given
     * JNDI location.
     * @param location the location.
     * @return such datasource, or \<code>null\</code> if it's
     * not found.
     * @throws CannotGetJdbcConnectionException if the data source cannot
     * be retrieved from JNDI.
     */
    <notnull()>
    public DataSource getDataSourceFromJndi(<notnull()>final String location)
    {
        <nullable()>DataSource result = null;

        <nullable()>CannotGetJdbcConnectionException exceptionToThrow = null;

        <nullable()>final Context jndiContext;
        <nullable()>Object dataSource = null;

        try
        {
            jndiContext = new InitialContext();

            dataSource = jndiContext.lookup(location);
        }
        catch (<notnull()>final NamingException noDataSourceFound) 
        {
            LogFactory.getLog(<repository.capitalized>JndiUtils.class).error(
                "No DataSource found at JNDI location: " + location,
                noDataSourceFound);

            exceptionToThrow =
                new CannotGetJdbcConnectionException(
                    "No DataSource found at " + location,
                    new SQLException(
                        "No DataSource found at " + location,
                        noDataSourceFound));
        }

        if (dataSource instanceof DataSource)
        {
            result = (DataSource) dataSource;
        }
        else
        {
            LogFactory.getLog(<repository.capitalized>JndiUtils.class).error(
                  "Expecting a DataSource at JNDI location: " + location
                + " but " + dataSource + " was found instead");

            exceptionToThrow =
                new CannotGetJdbcConnectionException(
                    "Invalid DataSource found at " + location,
                    new SQLException(
                        "Invalid DataSource found at " + location));
        }

        if (exceptionToThrow != null)
        {
            throw exceptionToThrow;
        }

        return result;
    }
}
>>
