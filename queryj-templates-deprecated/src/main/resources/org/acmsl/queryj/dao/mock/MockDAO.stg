//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: MockDAO.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate Mock DAO
//              implementations.
//
group MockDAO;

source(input) ::= <<
<!
  Generates a Mock DAO implementation source file.
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(tableName=input.table_name),
    second_line_description(tableName=input.table_name)
  ],
  timestamp=input.timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated using org/acmsl/queryj/dao/mock/MockDAO.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<project_imports(
  basePackageName=input.base_package_name,
  daoSubpackageName=typeInitMap.baseDAOSubpackageName,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=input.vo_name)>

<checkers_import()>
/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;

/*
 * Importing some QueryJ classes.
 */
import org.acmsl.queryj.dao.TransactionToken;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class(input=input, table=input.table)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
Mock DAO implementation responsible of retrieving
>>

second_line_description(tableName) ::= <<
<!
  Generates the second line of the generated file description.
  @param tableName the table name.
!>
<tableName> structures from memory.
>>

project_imports(basePackageName, daoSubpackageName, voSubpackageName, voName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param daoSubpackageName the DAO subpackage name.
 @param voSubpackageName the value-object subpackage name.
 @param voName the value-object name.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<daoSubpackageName>.<voName>DAO;
import <basePackageName>.<voSubpackageName>.<voName>;
import <basePackageName>.<voSubpackageName>.<voName>ValueObjectFactory;
>>

class(input, table) ::= <<
<!
 Generates the class body.
 @param input the input.
 @param table the table.
!>
/**
 * <[
      first_line_description(tableName=table.name),
      second_line_description(tableName=table.name)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/mock/MockDAO")>
 */
public abstract class Mock<table.voName>DAO
    implements  <table.voName>DAO
{
    /**
     * A lock to synchronize writes and reads.
     */
    protected static final Object LOCK = new Object();

<if(input.static_table)>
    <input.static_attribute:static_table(
      attribute=it,
      primaryKeyAttributes=input.pk_attributes,
      voName=input.vo_name)>
<endif>

    /**
     * The storage of <table.name> information.
     */
    private static Map m__m<table.voName>Map;

    /**
     * Builds a Mock<table.voName>DAO.
     */
    public Mock<table.voName>DAO() {}

    /**
     * Specifies the map used to simulate the persistence
     * layer.
     * @param map the new map.
     */
    protected static final void immutableSet<table.voName>Map(<notnull()>final Map map)
    {
        m__m<table.voName>Map = map;
    }

    /**
     * Specifies the map used to simulate the persistence
     * layer.
     * @param map the new map.
     */
    protected static void set<table.voName>Map(<notnull()>final Map map)
    {
        immutableSet<table.voName>Map(map);
    }

    /**
     * Retrieves the map used to simulate the persistence
     * layer.
     * return such map.
     */
    <nullable()>
    protected static Map get<table.voName>Map()
    {
        return m__m<table.voName>Map;
    }

    /**
     * Builds a key using given information.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @return such key.
     */
    <notnull()>
    protected Object buildKey(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">)
    {
        return ".:" + <input.pk_attributes:{<it.nameLowercased>}; separator="+"> + ":.";
    }

    /**
     * Retrieves {@link <input.vo_name>} information
     * filtering by its primary key.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @return the {@link <input.vo_name>} matching given
     * primary key.
     * @throws DataAccessException if the operation fails.
     */
    <nullable()>
    public <input.vo_name> findByPrimaryKey(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">)
      throws DataAccessException
    {
        <table.voName> result = null;

        Map t_m<table.voName>Map = null;

        synchronized (LOCK)
        {
            t_m<table.voName>Map = get<table.voName>Map();

            if  (t_m<table.voName>Map == null)
            {
                t_m<table.voName>Map = new Hashtable();
                set<table.voName>Map(t_m<table.voName>Map);
            }
        }

        result =
            (<table.voName>)
                t_m<table.voName>Map.get(
                    buildKey(
                        <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">));

        return result;
    }

    /**
     * Fills up a {@link <table.voName>} with the information provided.
     <input.all_but_externally_managed_attributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @return a {@link <table.voName> filled up with the
     * simulated persisted contents.
     */
    <notnull()>
    protected <table.voName> build<table.voName>(
        <input.all_but_externally_managed_attributes:attribute_declaration(attr=it); separator=",\n">)
    {
        <table.voName> result = null;

        <table.voName>ValueObjectFactory t_<table.voName>Factory =
            <table.voName>ValueObjectFactory.getInstance();

        if  (t_<table.voName>Factory != null)
        {
            /*
            result =
                t_<table.voName>Factory.create<table.voName>(
                    <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">);
            */
        }

        return result;
    }

    /**
     * Persists \{@link <input.vo_name>} information.
     <input.all_but_externally_managed_attributes:attribute_javadoc(
       name=it.nameLowercased); separator="\n">
     * @throws DataAccessException if the operation fails.
     */
    public void insert(
        <input.all_but_externally_managed_attributes:attribute_declaration(
          attr=it); separator=",\n">)
      throws DataAccessException
    {
        create(
            <input.all_but_externally_managed_attributes:{<it.nameLowercased>}; separator=",\n">);
    }

    /**
     * Inserts and retrieves the newly-inserted
     * {@link <table.voName>} instance.
     <input.all_but_externally_managed_attributes:attribute_javadoc(
       name=it.nameLowercased); separator="\n">
     * @throws DataAccessException if the operation fails.
     */
    <nullable()>
    public <input.vo_name> create(
        <input.all_but_externally_managed_attributes:attribute_declaration(
          attr=it); separator=",\n">)
      throws DataAccessException
    {
        <table.voName> result = null;

        Map t_m<table.voName>Map = null;

        synchronized (LOCK)
        {
            t_m<table.voName>Map = get<table.voName>Map();

            if  (t_m<table.voName>Map == null)
            {
                t_m<table.voName>Map = new Hashtable();
                set<table.voName>Map(t_m<table.voName>Map);
            }
        }

        /*
        result =
            build<table.voName>(
                <input.all_but_externally_managed_attributes:{<it.nameLowercased>}; separator=",\n">);

        t_m<table.voName>Map.put(
            buildKey(
                <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">),
            result);
        */

        return result;
    }

    /**
     * Updates {@link <table.voName>} information.
     <input.attributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @throws DataAccessException if the operation fails.
     */
    public void update(
        <input.attributes:attribute_declaration(attr=it); separator=",\n">)
      throws DataAccessException
    {
        <table.voName> t_<table.voName> =
            findByPrimaryKey(
                <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">);

        if  (t_<table.voName> != null)
        {
            t_<table.voName> =
                build<table.voName>(
                    <input.all_but_externally_managed_attributes:{<it.nameLowercased>}; separator=",\n">);
        }

        synchronized (LOCK)
        {
            Map t_m<table.voName>Map = get<table.voName>Map();

            if  (t_m<table.voName>Map != null)
            {
                t_m<table.voName>Map.put(
                    buildKey(
                        <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">),
                    t_<table.voName>);
            }
        }
    }

    /**
     * Deletes {@link <input.vo_name>} information.
     <input.pk_attributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
     */
    public void delete(
        <input.pk_attributes:attribute_declaration(attr=it); separator=",\n">)
      throws DataAccessException
    {
        synchronized (LOCK)
        {
            Map t_m<table.voName>Map = get<table.voName>Map();

            if  (t_m<table.voName>Map != null)
            {
                t_m<table.voName>Map.remove(
                    buildKey(
                        <input.pk_attributes:{<it.nameLowercased>}; separator=",\n">));
            }
        }
    }

    <input.foreign_keys:fk_delete_method(
      foreignKey=it, input=input); separator="\n">

    <input.custom_selects:custom_select(
      cs=it, table=input.table, input=input); separator="\n">

    <input.custom_updates_or_inserts:custom_update_or_insert(
      cs=it, input=input); separator="\n">

    <input.custom_selects_for_update:custom_select_for_update(
      cs=it, table=input.table, input=input); separator="\n">
}
>>

attribute_specification(attr) ::= <<
<!
 Prints the value of the attribute, optionally escaping it.
 @param attr the attribute.
!>
<if(attr.string)>"<attr.value>"<else><attr.value><endif>
>>

fk_delete_method(foreignKey,input) ::= <<
<!
  Writes the deleteByXX method for a concrete foreign key.
  @param input.table_name the table name.
  @param foreignKey the foreign key.
!>
/**
 * Deletes <input.table_name> information from the persistence layer filtering
 * by given foreign keys.
 <input.foreignKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
 */
public void deleteBy<foreignKey:{attr |<attr.nameCapitalized>}>(
    <foreignKey:attribute_declaration(attr=it); separator=",\n">)
{
    // not implemented
}
>>

custom_select(cs, table, input) ::= <<
<!
 Writes the code for a custom select query.
 @param cs the custom select.
 @param table the table.
 @param input the input.
!>
/**
 * Custom select \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\<b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the \<i><cs.resultClass>\</i> information retrieved.
 * @throws DataAccessException if the operation fails.
 */
<cs.result:{rs|<if(table.voDecorated)><if(rs.implicitProperties)>
public <cs.resultClass> <cs.nameUncapitalized>(
<else>
<if(rs.multiple)>
public <cs.resultClass> <cs.nameUncapitalized>(
<else>
public <cs.resultClass>Decorator <cs.nameUncapitalized>(
<endif>
<endif>
<else>
public <cs.resultClass> <cs.nameUncapitalized>(
<endif>}>
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">)
  throws DataAccessException
{
    // not implemented.
    return null;
}
>>

custom_update_or_insert(cs, input) ::= <<
<!
 Writes the subtemplate for custom updates or inserts.
  @param cs the custom sql.
  @param input the input.
!>
/**
 * Custom sql \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\<b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @throws DataAccessException if the operation fails.
 */
public void <cs.nameUncapitalized>(
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">)
  throws DataAccessException
{
    // not implemented.
}
>>

custom_select_for_update(cs, table, input) ::= <<
<!
 Writes the code for a custom select for update.
 @param cs the custom sql.
 @param table the table.
 @param input the input.
!>
/**
 * Custom select for update \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\<b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the \<i><cs.resultClass>\</i> information retrieved.
 * @throws DataAccessException if the operation fails.
 */
<if(cs.resultClass)>
<cs.result:{rs|<if(table.voDecorated)><if(rs.implicitProperties)>
public <cs.resultClass> <cs.nameUncapitalized>(
<else>
<if(rs.multiple)>
public <cs.resultClass> <cs.nameUncapitalized>(
<else>
public <cs.resultClass>Decorator <cs.nameUncapitalized>(
<endif>
<endif>
<else>
public <cs.resultClass> <cs.nameUncapitalized>(
<endif>}>
<else>
public void <cs.nameUncapitalized>(
<endif>

    <cs.parameters:attribute_declaration(attr=it); separator=",\n">)
  throws DataAccessException
{
    // not implemented.
    return null;
}
>>

static_table(
  attribute, primaryKeyAttributes, voName) ::= <<
<!
  Generates the method to operate directly on defined constants.
  @param attribute the static attribute.
  @param primaryKeyAttributes the primary key.
  @param voName the value object name.
!>
/**
 * Loads {@link <voName>} information from the constant pool,
 * filtering by <attribute.name>.
 * @param <attribute.nameLowercased> the <attribute.name>
 * to filter.
 * @return the {@link <voName>} instance.
 */
public <voName> findConstantBy<attribute.nameCapitalized>(
    final <attribute.javaType> <attribute.name>)
{
    <voName> result = null;

    int t_iLength =
        (FIXED_CONSTANTS != null) ? FIXED_CONSTANTS.length : 0;

    for  (int t_iIndex = 0; t_iIndex \< t_iLength; t_iIndex++)
    {
        <voName> t_CurrentItem = FIXED_CONSTANTS[t_iIndex];

        if  (   (t_CurrentItem != null)
             && (<attribute.nameLowercased>.equals(
                    t_CurrentItem.get<attribute.nameCapitalized>())))
        {
            result = t_CurrentItem;
            break;
        }
    }

    return result;
}

/**
 * Loads {@link <voName>} information from the constant pool,
 * filtering by the primary key.
 <primaryKeyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the {@link <voName>} instance.
 */
public <voName> findConstantByPk(
  <primaryKeyAttributes:attribute_declaration(attr=it); separator=",\n">)
{
    <voName> result = null;

    int t_iLength =
        (FIXED_CONSTANTS != null) ? FIXED_CONSTANTS.length : 0;

    boolean t_bFound = false;

    for  (int t_iIndex = 0; t_iIndex \< t_iLength; t_iIndex++)
    {
        <voName> t_CurrentItem = FIXED_CONSTANTS[t_iIndex];

        if  (t_CurrentItem != null)
        {
            t_bFound = true;

            <primaryKeyAttributes:static_attribute_check(attr=it);
              separator="\n">

            if  (t_bFound)
            {
                result = t_CurrentItem;
                break;
            }
        }
    }

    return result;
}

>>

static_attribute_check(attr) ::= <<
<!
 Generates the code to perform the static check on given attribute.
 @param attr the attribute
!>
<if(attr.primitive)>
<static_primitive_attribute_check(attr=attr)>
<else>
<static_object_attribute_check(attr=attr)>
<endif>

>>

static_primitive_attribute_check(attr) ::= <<
<!
 Generates the code to perform the static check on given primitive attribute.
 @param attr the attribute
!>
t_bFound =
    (   (t_bFound)
     && (t_CurrentItem.get<attr.nameCapitalized>() == <attr.nameLowercased>));
>>

static_object_attribute_check(attr) ::= <<
<!
 Generates the code to perform the static check on given primitive attribute.
 @param attr the attribute
!>
if  (t_bFound)
{
    Object t_<attr.nameCapitalized> =
        (t_CurrentItem.get<attr.nameCapitalized>();

    if  (t_<attr.nameCapitalized> == null)
    {
        t_bFound = (<attr.name> == null);
    }
    else
    {
        t_bFound = t_<attr.nameCapitalized>.equals(<attr.name>);
    }
}
>>

