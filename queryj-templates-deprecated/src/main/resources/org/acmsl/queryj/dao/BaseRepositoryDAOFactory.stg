//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: BaseRepositoryDAOFactory.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate base DAO factories.
//
group BaseRepositoryDAOFactory;

source() ::= <<
<!
  Generates a BaseDAOFactory source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(voName=repository.capitalized),
    second_line_description(voName=repository.capitalized)
  ],
  timestamp=input.timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by org/acmsl/queryj/dao/BaseRepositoryDAOFactory.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<project_imports(
  daoPackage=
  [
    project_package,
    typeInitMap.baseDAOSubpackageName
  ],
  voName=repository.capitalized,
  daoChooserPackage=
  [
    project_package,
    typeInitMap.baseDAOSubpackageName
  ],
  repository=repository.capitalized)>

<class()>
>>

first_line_description(voName) ::= <<
<!
  Generates a description for the file.
  @param voName the value-object name.
!>
Is able to create <voName>DAO instances,
>>

second_line_description(voName) ::= <<
<!
  Generates a description for the file.
  @param voName the value-object name.
!>
following the Abstract Factory pattern.
>>

project_imports(daoPackage, voName, daoChooserPackage, repository) ::= <<
<!
  Generates the import statements for the project classes.
  @param daoPackage the package parts of the DAO class.
  @param voName the value-object name.
  @param daoChooserPackage the DAOChooser package.
  @param repository the repository, capitalized.
!>
/*
 * Importing some project classes.
 */
import <daoPackage:{<it>}; separator=".">.<voName>DAO;
import <daoChooserPackage:{<it>}; separator=".">.<repository>DAOChooser;

<checkers_import()>
/*
 * Importing some JDK classes.
 */
import java.lang.IllegalAccessException;
import java.lang.InstantiationException;

/*
 * Importing some commons-logging classes.
 */
import org.apache.commons.logging.LogFactory;
>>

class() ::= <<
<!
  Generates the class body.
  @param engine_name the engine name.
  @param timestamp the timestamp.
  @param jndi_location the JNDI location.
  @param table_name the table name.
!>
/**
 * <[
      first_line_description(voName=repository.capitalized),
      second_line_description(voName=repository.capitalized)
    ]:{ line |<line>}; separator="\n * ">
<class_common_javadoc()>
 */
public abstract class <repository.capitalized>DAOFactory
{
    /**
     * Retrieves a <repository.capitalized>DAOFactory instance.
     * @return such instance.
     */
    <nullable()>
    public static <repository.capitalized>DAOFactory getInstance()
    {
        return getInstance(<repository.capitalized>DAOChooser.getInstance());
    }

    /**
     * Retrieves a <repository.capitalized>DAOFactory instance.
     * @param daoChooser the DAOChooser instance.
     * @return such instance.
     */
    <nullable()>
    protected static <repository.capitalized>DAOFactory getInstance(
        <notnull()>final <repository.capitalized>DAOChooser daoChooser)
    {
        <repository.capitalized>DAOFactory result = null;

        String t_str<repository.capitalized>DAOFactoryClassName =
            daoChooser.get<repository.capitalized>DAOFactoryClassName();

        if  (t_str<repository.capitalized>DAOFactoryClassName != null)
        {
            try
            {
                Class t_FactoryClass =
                    Class.forName(
                        t_str<repository.capitalized>DAOFactoryClassName);

                result =
                    (<repository.capitalized>DAOFactory) t_FactoryClass.newInstance();
            }
            catch  (final ClassNotFoundException classNotFoundException)
            {
                try
                {
                    LogFactory.getLog(<repository.capitalized>DAOFactory.class).error(
                        "Cannot find <repository.capitalized>DAOFactory implementation class",
                        classNotFoundException);
                }
                catch  (final Throwable throwable)
                {
                    // class-loading problem.
                }
            }
            catch  (final InstantiationException instantiationException)
            {
                try
                {
                    LogFactory.getLog(<repository.capitalized>DAOFactory.class).error(
                        "Cannot instantiate <repository.capitalized>DAOFactory implementation",
                        instantiationException);
                }
                catch  (final Throwable throwable)
                {
                    // class-loading problem.
                }
            }
            catch  (final IllegalAccessException illegalAccessException)
            {
                try
                {
                    LogFactory.getLog(<repository.capitalized>DAOFactory.class).error(
                        "Cannot access <repository.capitalized>DAOFactory implementation",
                        illegalAccessException);
                }
                catch  (final Throwable throwable)
                {
                    // class-loading problem.
                }
            }
        }
        else
        {
            try
            {
                LogFactory.getLog(<repository.capitalized>DAOFactory.class).error(
                    "<repository.capitalized>DAOFactory implementation not specified");
            }
            catch  (final Throwable throwable)
            {
                // class-loading problem.
            }
        }

        return result;
    }

    /**
     * Creates the \{@link <repository.capitalized>DAO} instance.
     * @return such DAO.
     */
    public abstract <repository.capitalized>DAO create<repository.capitalized>DAO();
}
>>
