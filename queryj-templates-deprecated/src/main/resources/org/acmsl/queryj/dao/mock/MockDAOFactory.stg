//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: MockDAOFactory.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate Mock DAO factories.
//
group MockDAOFactory;

source() ::= <<
<!
  Generates a MockDAOFactory source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(
      className=dao_implementation_class_name,
      engineName=engine_name),
    second_line_description(
      className=dao_implementation_class_name,
      engineName=engine_name)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated using org/acmsl/queryj/dao/mock/MockDAOFactory.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<project_imports(
  basePackageName=project_package,
  daoSubpackageName=typeInitMap.baseDAOSubpackageName,
  voName=table.voName)>

/*
 * Importing some Spring classes.
 */
import org.springframework.jdbc.CannotGetJdbcConnectionException;
//import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;

/*
 * Importing some extension classes.
 */
import javax.sql.DataSource;

/*
 * Importing some commons-logging classes.
 */
import org.apache.commons.logging.LogFactory;

<class(table=table)>
>>

first_line_description(className, engineName) ::= <<
<!
  Generates a description for the file.
  @param className the class name.
  @param engineName the engine name.
!>
Is able to create <className> instances according to
>>

second_line_description(className, engineName) ::= <<
<!
  Generates a description for the file.
  @param className the class name.
  @param engineName the engine name.
!>
information in the <engineName>-based persistence domain.
>>

project_imports(basePackageName, daoSubpackageName, voName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param daoSubpackageName the DAO subpackage name.
 @param voName the value-object name.
!>
<!
 Generates the import statements for the project classes.
 @param basePackageName the base package name.
 @param daoSubpackageName the DAO subpackage name.
 @param voName the value-object name.
!>
/*
 * Importing some project classes.
 */
import <basePackageName>.<daoSubpackageName>.<voName>DAO;
import <basePackageName>.<daoSubpackageName>.<voName>DAOFactory;

>>

class(table) ::= <<
<!
  Generates the class body.
  @param dao_factory_implementation_class_name the class name.
  @param engine_name the engine name.
  @param timestamp the timestamp.
  @param dao_factory_implementation_class_name the DAO factory
  implementation class name.
  @param dao_factory_class_name the DAO factory class name.
  @param jndi_location the JNDI location.
  @param table_name the table name.
  @param table the table.
!>
/**
 * <[
      first_line_description(
        className=dao_implementation_class_name,
        engineName=engine_name),
      second_line_description(
        className=dao_implementation_class_name,
        engineName=engine_name)
    ]:{ line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/mock/MockDAOFactory")>
 */
<class_annotations()>
public class Mock<table.voName>DAOFactory
    extends  <table.voName>DAOFactory
{
    /**
     * Singleton implemented to avoid the
     * \<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#dcl"
     * >double-checked locking\</a>.
     */
    private static class Mock<table.voName>DAOFactorySingletonContainer
    {
        /**
         * The concrete singleton instance.
         */
        public static final Mock<table.voName>DAOFactory SINGLETON =
            new Mock<table.voName>DAOFactory();
    }

    /**
     * Retrieves a \<code\>Mock<table.voName>DAOFactory\</code\>
     * instance.
     * @return such instance.
     */
    public static Mock<table.voName>DAOFactory getMockInstance()
    {
        return Mock<table.voName>DAOFactorySingletonContainer.SINGLETON;
    }

    /**
     * Creates a Mock <table.voName> DAO.
     * @return such DAO.
     */
    public <table.voName>DAO create<table.voName>DAO()
    {
        return null; // new Mock<table.voName>DAO();
    }
}
>>
