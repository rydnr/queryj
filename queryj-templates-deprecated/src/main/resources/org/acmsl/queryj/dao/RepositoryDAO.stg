//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: RepositoryDAO.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate Repository DAO
//              implementations.
//
group RepositoryDAO;

source() ::= <<
<!
  Generates a repository DAO implementation source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(repository=repository)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by QueryJ using org/acmsl/queryj/dao/RepositoryDAO.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<project_imports(
  basePackageName=project_package,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  repository=repository.capitalized,
  rdbSubpackageName=typeInitMap.rdbSubpackageName)>

<customResults:resultset_extractor_import(
  basePackageName=basePackageName,
  baseDAOSubpackageName=baseDAOSubpackageName,
  rdbSubpackageName=rdbSubpackageName,
  subpackageName=subpackageName,
  crseIdCapitalized=it.idCapitalized); separator="\n">

<checkers_import()>
/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ParameterDisposer;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.object.SqlQuery;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.transaction.TransactionException;
import org.springframework.transaction.TransactionStatus;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Types;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * Importing some JDK extension classes
 */
import javax.sql.DataSource;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class()>
>>

first_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository.
!>
Defines the global queries defined for <repository>.
>>

project_imports(
  basePackageName,
  baseDAOSubpackageName,
  repository,
  rdbSubpackageName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param baseDAOSubpackageName the BaseDAO subpackage name.
 @param repository the repository.
 @param rdbSubpackageName the subpackage name.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<baseDAOSubpackageName>.<repository>DAO;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<repository>DAOListener;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<repository>JdbcTemplate;

>>

class() ::= <<
<!
 Generates the class body.
!>
/**
 * <[
      first_line_description(repository=repository)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/RepositoryDAO.stg")>
 */
<class_annotations()>
public class <engine_name><repository.capitalized>DAO
    extends     <repository.capitalized>JdbcTemplate
    implements  <repository.capitalized>DAO
{
<if (custom_selects)>
      // custom selects
<custom_selects:{sql|
<if(!sql.dynamic)>
<if(sql.splittedQuotedValue)>
      /**
       * The <sql.id> SQL.
       */
     public static final String <sql.idAsConstant>_SQL =
         <sql.splittedQuotedValue; separator=" +\n">;
<endif>
<endif>
}; separator="\n\n">
<endif>

<if (custom_updates_or_inserts)>
      // custom updates or inserts
<custom_updates_or_inserts:{sql|
<if(!sql.dynamic)>
<if(sql.splittedQuotedValue)>
      /**
       * The <sql.id> SQL.
       */
     public static final String <sql.idAsConstant>_SQL =
         <sql.splittedQuotedValue; separator=" +\n">;
<endif>
<endif>
}; separator="\n\n">
<endif>

    /**
     * Builds a {@link <engine_name><repository.capitalized>DAO} instance
     * with given data source.
     * @param dataSource the required data source.
     * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
     */
    public <engine_name><repository.capitalized>DAO(
        <notnull()>final DataSource dataSource,
        <nullable()>final <repository.capitalized>DAOListener daoListener)
    {
        super(dataSource, daoListener);
    }

    <custom_selects:custom_select(
      cs=it, table=table); separator="\n">

    <custom_updates_or_inserts:custom_update_or_insert(cs=it); separator="\n">

    <custom_selects_for_update:custom_select_for_update(cs=it, table=table); separator="\n">

    <inner_transaction_callbacks(
      daoName=engine_name+repository.capitalized,
      clobHandling=lob_handling_flavor)>
}
>>
