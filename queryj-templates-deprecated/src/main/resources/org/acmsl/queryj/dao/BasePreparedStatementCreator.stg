//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: BasePreparedStatementCreator.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate BasePreparedStatementCreator
//              implementations.
//
//
group BasePreparedStatementCreator;

source() ::= <<
<!
  Generates a DAO database implementation source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(
      engineName=engine_name,
      engineVersion=engine_version),
    second_line_description(
      engineName=engine_name,
      engineVersion=engine_version)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by org/acmsl/queryj/dao/BasePreparedStatementCreator.stg at <timestamp>
<endif>

<package_declaration(package=package)>

/*
 * Importing Spring classes.
 */
import org.springframework.jdbc.core.PreparedStatementCreator;
    
/*
 * Importing some JDK classes.
 */
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

<class()>
>>

first_line_description(tableName, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
Creates the {@link PreparedStatement}
>>

second_line_description(tableName, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
required to perform any \<i>JDBC\</i> operation.
>>

class() ::= <<
<!
 Generates the class body.
 @param engine_name the engine name.
 @param engine_version the engine version.
 @param timestamp the timestamp.
 @param custom_results the results for the custom queries.
 @param tr_name the table repository name.
!>
/**
 * <[
      first_line_description(
        engineName=engine_name,
        engineVersion=engine_version),
      second_line_description(
        engineName=engine_name,
        engineVersion=engine_version)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/BasePreparedStatement.stg")>
 */
<class_annotations()>
public class <repository.capitalized>PreparedStatementCreator
    implements  PreparedStatementCreator
{
    /**
     * The SQL query.
     */
    private String sql;

    /**
     * The DAO listener.
     */
    private <repository.capitalized>DAOListener daoListener;

    /**
     * Builds a {@link <repository.capitalized>PreparedStatementCreator}
     * for given query.
     * @param query the query.
     */
    public <repository.capitalized>PreparedStatementCreator(
        <notnull()>final String query,
        <notnull()>final <repository.capitalized>DAOListener daoListener)
    {
        immutableSetSql(query);
        immutableSetDAOListener(daoListener);
    }

    /**
     * Specifies the SQL query.
     * @param query such query.
     */
    protected final void immutableSetSql(<notnull()>final String query)
    {
        this.sql = query;
    }

    /**
     * Specifies the query.
     * @param query such query.
     */
    @SuppressWarnings("unused")
    protected void setSql(<notnull()>final String query)
    {
        immutableSetSql(query);
    }

    /**
     * Retrieves the query.
     * @return such information.
     */
    <notnull()>
    public String getSql()
    {
        return this.sql;
    }

    /**
     * Specifies the DAO listener.
     * @param daoListener such listener.
     */
    protected final void immutableSetDAOListener(
        <notnull()>final <repository.capitalized>DAOListener daoListener)
    {
        this.daoListener = daoListener;
    }

    /**
     * Specifies the DAO listener.
     * @param daoListener such listener.
     */
    @SuppressWarnings("unused")
    protected void setDAOListener(
        <notnull()>final <repository.capitalized>DAOListener daoListener)
    {
        immutableSetDAOListener(daoListener);
    }

    /**
     * Retrieves the DAO listener.
     * @return such instance.
     */
    <notnull()>
    protected <repository.capitalized>DAOListener getDAOListener()
    {
        return daoListener;
    }

    // \<create prepared statement\>

    /**
     * Creates the prepared statement required to accomplish the
     * \<i>SQL\</i> operation.
     * @param connection the connection.
     * @return the {@link PreparedStatement} instance.
     * @throws SQLException if something wrong occurs. \<b>Spring\</b> takes
     * care of this.
     */
    <notnull()>
    public PreparedStatement createPreparedStatement(
        <notnull()>final Connection connection)
      throws SQLException
    {
        return
            createPreparedStatement(
                connection, getSql(), getDAOListener());
    }

    /**
     * Creates the prepared statement required to accomplish the
     * \<i>SQL\</i> operation.
     * @param connection the connection.
     * @param sql the SQL query.
     * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
     * @return the {@link PreparedStatement} instance.
     * @throws SQLException if something wrong occurs. \<b>Spring\</b> takes
     * care of this.
     */
    <notnull()>
    protected PreparedStatement createPreparedStatement(
        <notnull()>final Connection connection,
        <notnull()>final String sql,
        <notnull()>final <repository.capitalized>DAOListener daoListener)
      throws SQLException
    {
        <notnull()>final PreparedStatement result =
            connection.prepareStatement(sql);

        daoListener.statementPrepared(sql);

        return result;
    }
}
>>
