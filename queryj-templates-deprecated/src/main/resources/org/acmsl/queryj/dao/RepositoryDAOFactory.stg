//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: RepositoryDAOFactory.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate repository DAO factories.
//
group RepositoryDAOFactory;

source() ::= <<
<!
  Generates a RepositoryDAOFactory source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(engineName=engine_name)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated using org/acmsl/queryj/dao/RepositoryDAOFactory.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<project_imports(
  basePackageName=base_package_name,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  rdbSubpackageName=typeInitMap.rdbSubpackageName,
  repository=repository.capitalized)>

<checkers_import()>
/*
 * Importing some Spring classes.
 */
import org.springframework.jdbc.CannotGetJdbcConnectionException;

/*
 * Importing some extension classes.
 */
import javax.sql.DataSource;

/*
 * Importing some commons-logging classes.
 */
import org.apache.commons.logging.LogFactory;

<class()>
>>

first_line_description(engineName) ::= <<
<!
  Generates a description for the file.
  @param engineName the engine name.
!>
Is able to create the repository DAO.
>>

project_imports(
  basePackageName,
  baseDAOSubpackageName,
  rdbSubpackageName,
  repository) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param baseDAOSubpackageName the BaseDAO subpackage name.
 @param voSubpackageName the value-object subpackage name.
 @param repository the repository.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<repository>DAOListener;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<repository>DAOListenerImpl;
import <basePackageName>.<baseDAOSubpackageName>.<repository>DAO;
import <basePackageName>.<baseDAOSubpackageName>.<repository>DAOFactory;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<repository>JndiUtils;
//import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<repository>ThreadAwareDataSourceWrapper;
>>

class() ::= <<
<!
  Generates the class body.
  @param dao_factory_implementation_class_name the class name.
  @param engine_name the engine name.
  @param timestamp the timestamp.
  @param dao_factory_implementation_class_name the DAO factory
  implementation class name.
  @param dao_factory_class_name the DAO factory class name.
  @param jndi_location the JNDI location.
  @param table_name the table name.
!>
/**
 * <[
      first_line_description(engineName=engine_name)
    ]:{ line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/RepositoryDAOFactory.stg")>
 */
<class_annotations()>
public class <engine_name><repository.capitalized>DAOFactory
    extends  <repository.capitalized>DAOFactory
{
    /**
     * The data source JNDI location.
     */
    public static final String JNDI_LOCATION = "<jndi_location>";

    /**
     * Public constructor to allow reflective instantiation.
     */
    public <engine_name><repository.capitalized>DAOFactory() {}

    /**
     * Singleton implemented to avoid the double-check locking.
     */
    private static final class <engine_name><repository.capitalized>DAOFactoryContainer
    {
        /**
         * The singleton instance, lazily loaded.
         */
        private static final <engine_name><repository.capitalized>DAOFactory SINGLETON =
            new <engine_name><repository.capitalized>DAOFactory();
    }

    /**
     * Retrieves a {@link <dao_factory_implementation_class_name>}
     * instance.
     * @return such instance.
     */
    public static <repository.capitalized>DAOFactory get<engine_name>Instance()
    {
        return <engine_name><repository.capitalized>DAOFactoryContainer.SINGLETON;
    }

    /**
     * Creates <engine_name>-specific <table_name> DAO.
     * @return such DAO.
     */
    public <repository.capitalized>DAO create<repository.capitalized>DAO()
    {
        return create<repository.capitalized>DAO(getDataSource());
    }

    /**
     * Creates <engine_name>-specific <table_name> DAO
     * using given data source.
     * @param dataSource the data source.
     * @return such DAO.
     */
    protected <repository.capitalized>DAO create<repository.capitalized>DAO(
        <notnull()>final DataSource dataSource)
    {
        <repository.capitalized>DAO result = null;

        if  (dataSource != null)
        {
            result =
<if(table.dynamicQueries)>
                new <engine_name><repository.capitalized>DAOImpl(
<else>
                new <engine_name><repository.capitalized>DAO(
<endif>

                    dataSource,
                    new <repository.capitalized>DAOListenerImpl());
        }

        return result;
    }

    /**
     * Retrieves the data source.
     * @return such data source.
     */
    <nullable()>
    protected DataSource getDataSource()
    {
        return getDataSource(<repository.capitalized>JndiUtils.getInstance());
    }

    /**
     * Retrieves the data source.
     * @param jndiUtils the {@link <repository.capitalized>JndiUtils} instance.
     * @return such data source.
     */
    <nullable()>
    protected DataSource getDataSource(<notnull()>final <repository.capitalized>JndiUtils jndiUtils)
    {
        DataSource result = null;

        try
        {
            result = jndiUtils.getDataSourceFromJndi(JNDI_LOCATION);
        }
        catch  (final CannotGetJdbcConnectionException cannotGetJdbcConnection)
        {
            // Assuming JNDI not available. The only way to retrieve
            // the DataSource is reduced to transactional (thread-based)
            // operations.
            try
            {
                LogFactory.getLog(<engine_name><repository.capitalized>DAOFactory.class).info(
                      "DataSource not present in JNDI context. "
                    + "Assuming JNDI is not enabled.");
            }
            catch  (final Throwable throwable)
            {
                // Class loading problem.
            }
        }

<!
//        if  (result == null)
//        {
//            result = new <repository.capitalized>ThreadAwareDataSourceWrapper();
//        }
//        else
//        {
//            try
//            {
//                result = new <repository.capitalized>ThreadAwareDataSourceWrapper(result);
//            }
//           catch  (final CannotGetJdbcConnectionException exception)
//            {
//                try
//                {
//                    LogFactory.getLog(<engine_name><repository.capitalized>DAOFactory.class).error(
//                        "Cannot retrieve connection", exception);
//                }
//                catch  (final Throwable throwable)
//                {
//                    // class-loading problem.
//                }
//            }
//           catch  (final Throwable throwable)
//            {
//                try
//                {
//                    LogFactory.getLog(<engine_name><repository.capitalized>DAOFactory.class).error(
//                        "Cannot retrieve data source", throwable);
//                }
//                catch  (final Throwable anotherThrowable)
//                {
//                    // class-loading problem.
//                }
//            }
//        }
!>
        return result;
    }
}
>>
