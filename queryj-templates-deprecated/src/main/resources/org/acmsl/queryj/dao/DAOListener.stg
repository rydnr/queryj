//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DAOListener.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAO listener interfaces.
//
group DAOListener;

source(input) ::= <<
<!
  Generates a DAO Listener interface source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(repository=tr_name)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by org/acmsl/queryj/dao/DAOListener.stg at <timestamp>
<endif>

<package_declaration(package=package)>

/*
 * Importing some Spring classes.
 */
import org.springframework.jdbc.core.ConnectionCallback;
import org.springframework.jdbc.core.StatementCallback;
import org.springframework.jdbc.core.PreparedStatementCreator;

<class()>
>>

first_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository.
!>
Defines the API to monitor SQL operations for <repository>.
>>

class() ::= <<
<!
 Generates the class body.
 @param input the 
!>
/**
 * <[
      first_line_description(repository=repository)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/DAOListener.stg")>
 */
public interface <repository.capitalized>DAOListener
{
    /**
     * Receives notifications whenever a connection is requested.
     * @param sql the SQL query the connection is needed for.
     */
    void connectionRetrieved(<notnull()>final String sql);

    /**
     * Receives notifications whenever a connection is released.
     * @param sql the SQL query the connection was needed for.
     */
    void connectionReleased(<notnull()>final String sql);

    /**
     * Receives notifications whenerver a statement has been prepared.
     * @param sql the SQL query.
     */
    void statementPrepared(<notnull()>final String sql);

    /**
     * Receives notifications whenerver a statement has been released.
     * @param sql the SQL query.
     */
    void statementReleased(<notnull()>final String sql);

    /**
     * Receives notifications whenever a result-set moves forward one row.
     * @param sql the sql used.
     * @param the number of rows retrieved so far.
     */
    void resultSetMovedForward(<notnull()>final String sql, final int rowCount);

    /**
     * Receives notifications whenever a result-set is closed.
     * @param resultSetExtractor the {@link <repository.capitalized>ResultSetExtractor ResultSet extractor}.
     * @param rowCount the total number of rows retrieved.
     */
    void resultSetClosed(<notnull()>final String sql, final int rowCount);
}
>>
