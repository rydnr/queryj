//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DAOListenerImpl.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAO listener implementations.
//
group DAOListenerImpl;

source() ::= <<
<!
  Generates a DAO Listener implementation source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(repository=tr_name)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by org/acmsl/queryj/dao/DAOListenerImpl.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<checkers_import()>
/*
 * Importing Spring classes.
 */
import org.springframework.jdbc.core.ConnectionCallback;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.StatementCallback;

<class()>
>>

first_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository.
!>
Default implementation to monitor SQL operations.
>>

class() ::= <<
<!
 Generates the class body.
 @param input the 
!>
/**
 * <[
      first_line_description(repository=repository)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/DAOListenerImpl.stg")>
 */
<class_annotations()>
public class <repository.capitalized>DAOListenerImpl
    implements  <repository.capitalized>DAOListener
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void connectionRetrieved(<notnull()>final String sql)
    {
        annotateConnectionRetrieved(
            sql, 
            <repository.capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates whenever a {@link java.sql.Connection} is retrieved.
     * @param sql the sql sentence.
     * @param statisticsProvider the {@link <repository.capitalized>StatisticsProvider}
     * instance.
     */
    protected void annotateConnectionRetrieved(
        <notnull()>final String sql,
        <notnull()>final <repository.capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateConnectionRetrieved(sql);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void connectionReleased(<notnull()>final String sql)
    {
        annotateConnectionReleased(
            sql, 
            <repository.capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates whenever a {@link java.sql.Connection} is released.
     * @param sql the sql sentence.
     * @param statisticsProvider the {@link <repository.capitalized>StatisticsProvider}
     * instance.
     */
    protected void annotateConnectionReleased(
        <notnull()>final String sql,
        <notnull()>final <repository.capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateConnectionReleased(sql);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void statementPrepared(<notnull()>final String sql)
    {
        annotateStatementPrepared(
            sql, 
            <repository.capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates whenever a {@link java.sql.PreparedStatement statement}
     * is prepared.
     * @param sql the sql sentence.
     * @param statisticsProvider the {@link <repository.capitalized>StatisticsProvider}
     * instance.
     */
    protected void annotateStatementPrepared(
        <notnull()>final String sql,
        <notnull()>final <repository.capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateStatementPrepared(sql);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void statementReleased(<notnull()>final String sql)
    {
        annotateStatementReleased(
            sql, 
            <repository.capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates whenever a {@link PreparedStatement statement} is released.
     * @param sql the sql sentence.
     * @param statisticsProvider the {@link <repository.capitalized>StatisticsProvider}
     * instance.
     */
    protected void annotateStatementReleased(
        <notnull()>final String sql,
        <notnull()>final <repository.capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateStatementReleased(sql);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void resultSetMovedForward(
        <notnull()>final String sql, final int rowCount)
    {
        annotateResultSetMovedForward(
            sql, 
            rowCount,
            <repository.capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates whenever a {@link ResultSet} has moved forward.
     * @param sql the sql sentence.
     * @param rowCount the number of rows retrieved so far.
     * @param statisticsProvider the {@link <repository.capitalized>StatisticsProvider}
     * instance.
     */
    protected void annotateResultSetMovedForward(
        <notnull()>final String sql,
        final int rowCount,
        <notnull()>final <repository.capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateResultSetMovedForward(sql, rowCount);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void resultSetClosed(<notnull()>final String sql, final int rowCount)
    {
        annotateResultSetClosed(
            sql, 
            rowCount,
            <repository.capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates whenever a {@link ResultSet} has been closed.
     * @param sql the sql sentence.
     * @param rowCount the number of rows retrieved.
     * @param statisticsProvider the {@link <repository.capitalized>StatisticsProvider}
     * instance.
     */
    protected void annotateResultSetClosed(
        <notnull()>final String sql,
        final int rowCount,
        <notnull()>final <repository.capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateResultSetClosed(sql, rowCount);
    }
}
>>
