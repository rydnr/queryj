//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: KeywordRepository.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate keyword repositories.
//
group KeywordRepository;

source() ::= <<
<!
  Generates a KeywordRepository source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
    [
      first_line_description(repository=repository),
      second_line_description(repository=repository)
    ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by QueryJ using org/acmsl/queryj/sql/KeywordRepository.stg at <timestamp>
<endif>

<package_declaration(package=package)>

/*
 * Importing some QueryJ classes.
 */
import org.acmsl.queryj.BigDecimalField;
import org.acmsl.queryj.CalendarField;
import org.acmsl.queryj.ClobField;
import org.acmsl.queryj.DateField;
import org.acmsl.queryj.DoubleField;
import org.acmsl.queryj.Field;
import org.acmsl.queryj.IntField;
import org.acmsl.queryj.QueryJException;
import org.acmsl.queryj.LongField;
import org.acmsl.queryj.StringField;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;

<class()>
>>

first_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository name.
!>
Contains all defined field creation keywords for
>>

second_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository name.
!>
<repository> repository.
>>

class() ::= <<
<!
 Generates the class body.
!>
/**
 * <[
      first_line_description(repository=repository),
      second_line_description(repository=repository)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/KeywordRepository.stg")>
 */
<class_annotations()>
public class <repository.capitalized>KeywordRepository
{
    /**
     * Singleton implemented to avoid double-checked locking.
     */
    private static final class <repository.capitalized>KeywordRepositorySingletonContainer
    {
        /**
         * The actual singleton.
         */
        public static final <repository.capitalized>KeywordRepository SINGLETON =
            new <repository.capitalized>KeywordRepository();
    }

    /**
     * Public constructor to allow reflective access.
     */
    public <repository.capitalized>KeywordRepository() {};

    /**
     * Retrieves a \<code\><repository.capitalized>KeywordRepository\</code\> instance.
     * @return such instance.
     */
    public static <repository.capitalized>KeywordRepository getInstance()
    {
        return <repository.capitalized>KeywordRepositorySingletonContainer.SINGLETON;
    }

    <keywords,keyword_types,keywords_uncapitalized:
      {keyword, type, keywordUncapitalized | <keyword(keyword=keyword, type=type, keywordUncapitalized=keywordUncapitalized)>};
      separator="\n\n">
}
>>

keyword(keyword, type, keywordUncapitalized) ::= <<
<!
 Writes the keyword retrieval method.
 @param keyword the keyword.
 @param type the keyword type.
 @param keywordUncapitalized the uncapitalized keyword.
!>
/**
 * Represents database-interpreted <keyword> keyword
 * @return the associated keyword field.
 */
public <type>Field <keywordUncapitalized>()
{
    return new <type>Field("<keyword>", null) {};
}
>>
