//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: Table.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate Table classes.
//
group Table;

source() ::= <<
<!
  Generates a Table source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
    [
      first_line_description(tableName=table_name),
      second_line_description(tableName=table_name)
    ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated by QueryJ using org/acmsl/queryj/sql/Table.stg at <timestamp>
<endif>

<package_declaration(package=package)>

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.queryj.BigDecimalField;
import org.acmsl.queryj.BooleanField;
import org.acmsl.queryj.CalendarField;
import org.acmsl.queryj.ClobField;
import org.acmsl.queryj.DateField;
import org.acmsl.queryj.DoubleField;
import org.acmsl.queryj.Field;
import org.acmsl.queryj.IntField;
import org.acmsl.queryj.LongField;
import org.acmsl.queryj.StringField;
import org.acmsl.queryj.Table;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;

<class(table=table)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
Represents the "<tableName>" table
>>

second_line_description(tableName) ::= <<
<!
  Generates the second line of the generated file description.
  @param tableName the table name.
!>
in the persistence domain.
>>

class(table) ::= <<
<!
 Generates the class body.
 @param table the table.
!>
<class_impl(table=table, parent=table.parentTable)>
>>

class_impl(table, parent) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param parent the parent table.
!>
/**
 * <[
      first_line_description(tableName=table_name),
      second_line_description(tableName=table_name)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/sql/Table.stg")>
 */
<class_annotations()>
public class <table.nameCapitalized>Table
<if(parent)>
    extends  <parent.nameCapitalized>Table
<else>
    extends  Table
<endif>

{
    <table.attributes:constants(attr=it); separator="\n\n">

    /**
     * Singleton implemented to avoid double-checked locking.
     */
    private static final class <table.nameCapitalized>TableSingletonContainer
    {
        /**
         * The actual singleton.
         */
        public static final <table.nameCapitalized>Table SINGLETON =
            new <table.nameCapitalized>Table();
    }

    /**
     * Protected constructor to avoid accidental instantiation.
     * @param alias the table alias.
     */
    protected <table.nameCapitalized>Table(final String alias)
    {
        super("<table.name>", alias);
    }

    /**
     * Protected constructor to avoid accidental instantiation.
     @ param name the name of the child table.
     * @param alias the table alias.
     */
    protected <table.nameCapitalized>Table(final String name, final String alias)
    {
        super(name, alias);
    }

    /**
     * Protected constructor to avoid accidental instantiation.
     */
    protected <table.nameCapitalized>Table()
    {
        this(null);
    }

    /**
     * Retrieves a \{@link <input.table_name_capitalized>Table} instance.
     * @param alias the desired table alias.
     * @return such instance.
     */
<if(parent)>
    public static <table.nameCapitalized>Table get<table.nameCapitalized>Instance(
<else>
    public static <table.nameCapitalized>Table getInstance(
<endif>

        final String alias)
    {
        <table.nameCapitalized>Table result = null;

        if  (alias != null)
        {
            result = new <table.nameCapitalized>Table(alias);
        }
        else
        {
<if(parent)>
            result = get<table.nameCapitalized>Instance();
<else>
            result = getInstance();
<endif>

        }

        return result;
    }

    /**
     * Retrieves a \{@link <table.nameCapitalized>Table} instance.
     * @return such instance.
     */
<if(parent)>
    public static <table.nameCapitalized>Table get<table.nameCapitalized>Instance()
<else>
    public static <table.nameCapitalized>Table getInstance()
<endif>

    {
        return <table.nameCapitalized>TableSingletonContainer.SINGLETON;
    }

    /**
     * Retrieves the table name.
     * @return such name.
     */
    public String getTableName()
    {
        return "<table.name>";
    }

<if(table.attributes)>
    /**
     * Retrieves \{@link all} fields
     * It's equivalent to a star in a query.
     * @return such fields.
     */
    public Field[] getAll()
    {
        return
            new Field[]
            {
                <table.attributes:{ attr | <attr.nameUppercased> }; separator=",\n">
            };
    }
<else>
    /**
     * Retrieves all fields, which in this case is an empty set.
     * @return such fields.
     */
    public Field[] getAll()
    {
        return new Field[0];
    }
<endif>
}
>>

constants(attr) ::= <<
<!
 Writes the constant declaration for each attribute.
 @param attr the attribute.
!>
/**
 * The <attr.tableName>'s table <attr.name> field.
 */
public final <attr.queryJFieldType>Field <attr.nameUppercased> =
    new <attr.queryJFieldType>Field("<attr.name>", this) {};
>>
