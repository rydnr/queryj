//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: CustomValueObjectFactory.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate CustomValueObjectFactory
//              implementations.
//
//
group CustomValueObjectFactory;

import "queryj.stg"

source(C) ::= <<
<!
  Defines the rules to generate CustomValueObjectFactory implementations.
  @param C the context.
!>
<sourceFactory(result=C.result, C=C)>
>>

sourceFactory(result, C) ::= <<
<!
  Defines the rules to generate CustomValueObjectFactory implementations.
  @param result the result.
  @param C the context.
!>
/*
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(result=result)
  ],
  template="org/acmsl/queryj/templates/CustomValueObjectFactory.stg",
  C=C)><endif>
 */
<package_declaration(p=C.package)>

/*
 * Importing <C.repository.capitalized> classes.
 */
import <result.classValue>;
import <C.project_package>.<typeInitMap.voSubpackageName>.impl.<result.simpleClassValue>Impl;
<notnull_import_maybe_nullable(container=result, C=C)>

<if(result.propertyTypes)>
/*
 * Importing JDK classes.
 */
<result.propertyTypes:{ t | import <t>;}; separator="\n">
<endif>

<class(result=result, repository=C.repository, C=C)>
>>

description(result) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the custom result.
!>
Are responsible of creating {@link <result.simpleClassValue> <result.id>} value objects.
>>

class(result, repository, C) ::= <<
<!
 Generates the class body.
 @param result the result.
 @param repository the repository.
 @param C the context.
!>
/**
 * <[
      description(result=result)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/templates/CustomValueObjectFactory.stg", C=C)>
 */
<class_annotations(C=C)>
public class <result.simpleClassValue>Factory
{
    /**
     * Public constructor ease reflection-based instantiation.
     */
    public <result.simpleClassValue>Factory() {}

    /**
     * Singleton implemented to avoid the
     * \<a href="https://en.wikipedia.org/wiki/Double-checked_locking">double-checked locking\</a>.
     * This relies on the fact that inner classes are not loaded until they are referenced.
     */
    private static final class <result.simpleClassValue>FactorySingletonContainer
    {
        private static final <result.simpleClassValue>Factory SINGLETON =
            new <result.simpleClassValue>Factory();
    }

    /**
     * Retrieves a {@code <result.simpleClassValue>Factory} instance.
     * @return such instance.
     */
    <notnull(C=C)>
    public static <result.simpleClassValue>Factory getInstance()
    {
        return <result.simpleClassValue>FactorySingletonContainer.SINGLETON;
    }

    /**
     * Creates a new {@code <result.simpleClassValue>}.
     <result.properties:{ p | <property_javadoc(property=p)>}; separator="\n">
     * @return the new {@link <result.simpleClassValue>} instance.
     */
    <notnull(C=C)>
    public <result.simpleClassValue> create(
        <result.properties:{ p | <property_method_parameter_declaration(property=p, usePrefix=false, prefix="", C=C)>}; separator=",\n">)
    {
        return
            new <result.simpleClassValue>Impl(
                <result.properties:{ p | <p.columnName.uncapitalized>}; separator=",\n">);
    }

    <toString_method(result=result, C=C)>
}
>>

toString_method(result, C) ::= <<
<!
 Generates the toString() method.
 @param result the result.
 @param C the context.
 !>
/**
 * {@inheritDoc}
 */
<notnull(C=C)>
@Override
public String toString()
{
    return "{ \"class\": \"<result.simpleClassValue>Factory\", \"package\": \"<C.package>\" }";
}
>>