//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: CustomResultSetExtractor.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate CustomResultSetExtractor
//              implementations.
//
//
group CustomResultSetExtractor;

import "queryj.stg"

source(C) ::= <<
<!
  Defines the rules to generate CustomResultSetExtractor implementations.
  @param C the context.
!>
<sourceImpl(result=C.result, def=C.templateDef, C=C)>
>>

sourceImpl(result, def, C) ::= <<
<!
  Defines the rules to generate CustomResultSetExtractor implementations.
  @param result the result.
  @param def the template def.
  @param C the context.
!>
/*
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(result=result, def=def)
  ],
  template="org/acmsl/queryj/templates/CustomResultSetExtractor.stg",
  C=C)><endif>
 */
<package_declaration(p=C.package)>

/*
 * Importing <C.repository.capitalized> classes.
 */
import <result.classValue>;
import <C.project_package>.<typeInitMap.voSubpackageName>.core.<result.simpleClassValue>Factory;

/*
 * Importing V24-Commons classes.
 */
import com.ventura24.commons.dao.DAOListener;
import com.ventura24.commons.dao.V24ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor;

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
<checkers_import(C=C)>
/*
 * Importing JDK classes.
 */
import java.sql.ResultSet;
import java.sql.SQLException;
<if(result.propertyTypes)>
<result.propertyTypes:{ t | import <t>;}; separator="\n">
<else>
<endif>

<class(result=result, repository=C.repository, def=def, C=C)>
>>

description(result, def) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the custom result.
  @param def the template def.
!>
{@link V24ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor} implementation for extracting <if(def.metadata.multiple.meansTrue)>multiple<endif> {@link <result.simpleClassValue> <result.id>} results.
>>

class(result, repository, def, C) ::= <<
<!
 Generates the class body.
 @param result the result.
 @param repository the repository.
 @param def the template def.
 @param C the context.
!>
/**
 * <[
      description(result=result, def=def)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/templates/CustomResultSetExtractor.stg", C=C)>
 */
public class <result.simpleClassValue>ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor
    extends V24ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor\<<result.simpleClassValue>\>
{
    /**
     * Creates a new {@code <result.simpleClassValue>ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor} instance.
     * @param sql the SQL query.
     * @param listener the {@link DAOListener} instance.
     */
    public <result.simpleClassValue>ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor(
        <notnull(C=C)>final String sql, <nullable(C=C)>final DAOListener listener)
    {
        super(sql, listener);
    }

    <defaultExtractor(result=result, repository=repository, C=C)>
}
>>

defaultExtractor(result, repository, C) ::= <<
<!
 Generates the default logic for the extractor.
 @param result the result.
 @param repository the repository.
 @param C the context.
!>
/**
 * Extracts {@link <result.simpleClassValue>} information from given result set.
 * @param resultSet the result set.
 * @return the {@code <result.simpleClassValue>} or
 * {@code null} if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i>.
 * @throws DataAccessException with information about any
 * custom exception.
 */
<notnull(C=C)>
@Override
protected <result.simpleClassValue> extractValue(<notnull(C=C)>final ResultSet resultSet)
    throws  SQLException,
            DataAccessException
{
    return extractValue(resultSet, <result.simpleClassValue>Factory.getInstance());
}

/**
 * Extracts {@link <result.simpleClassValue>} information from given result set.
 * @param resultSet the result set.
 * @param factory the {@link <result.simpleClassValue>Factory} instance.
 * @return the {@code <result.simpleClassValue>} or
 * {@code null} if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i>.
 * @throws DataAccessException with information about any
 * custom exception.
 */
<notnull(C=C)>
protected <result.simpleClassValue> extractValue(
    <notnull(C=C)>final ResultSet resultSet,
    <notnull(C=C)>final <result.simpleClassValue>Factory factory)
  throws  SQLException,
          DataAccessException
{
    <nullable(C=C)>final <result.simpleClassValue> result;

<if(result.nullableProperties)>
    <result.nullableProperties:{p | <nullable_property_resultset_retrieval_declaration(property=p, C=C)>}; separator="\n">

<endif>
    result =
        factory.create(
            <result.properties:{p | <nullable_property_resultset_retrieval(property=p, C=C)>}; separator=",\n">);

    return result;
}
>>

nullable_property_resultset_retrieval_declaration(property, C) ::= <<
<!
 Writes the piece of code to retrieve the value of a nullable property from a ResultSet.
 @param property the property.
 @param C the context.
!>
<
if(property.nullable)>
<nullable(C=C)>final <p.objectType> <p.id.uncapitalized>Aux = <property_resultset_retrieval(property=p, C=C)>;
<nullable(C=C)>final <p.objectType> <p.id.uncapitalized>;
if (resultSet.wasNull())
{
    <p.id.uncapitalized> = null;
}
else
{
    <p.id.uncapitalized> = <p.id.uncapitalized>Aux;
}<
else>
<notnull(C=C)>final <p.objectType> <p.id.uncapitalized> = <property_resultset_retrieval(property=p, C=C)>;
<endif>
>>

nullable_property_resultset_retrieval(property, C) ::= <<
<!
 Writes the piece of code to retrieve the value of a nullable property from a ResultSet.
 @param property the property.
 @param C the context.
!>
<
if(property.nullable)
  >(<property.id.uncapitalized> == null) ? null : <generic_nullable_property_resultset_retrieval(property=property, C=C)><
else
  ><property_resultset_retrieval(property=property, C=C)><
endif>
>>

generic_nullable_property_resultset_retrieval(property, C) ::= <<
<!
 Writes the piece of code to retrieve the value of a nullable property from a ResultSet.
 @param property the property.
 @param C the context.
!>
<
if(property.date)
  ><nullable_date_property_resultset_retrieval(property=property, C=C)><
else><
  if(property.primitive)
   ><property.objectType>.valueOf(<property.id.uncapitalized>)<
  else
   ><property.id.uncapitalized><
  endif><
endif>
>>

nullable_date_property_resultset_retrieval(property, C) ::= <<
<!
 Writes the piece of code to retrieve the value of a nullable Date property from a ResultSet.
 @param property the property.
 @param C the context.
!>
<if(property.nullable)>new Date(<property.id.uncapitalized>.getTime())<endif>
>>

