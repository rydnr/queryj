//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: ConfigurationProperties.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate ConfigurationProperties files.
//
//
group ConfigurationProperties;

import "queryj.stg"

source(C) ::= <<
<!
  Defines the rules to generate ConfigurationProperties files.
  @param C the context.
!>
<sourceImpl(repository=C.repository, tables=C.tables, C=C)>
>>

sourceImpl(repository, tables, C) ::= <<
<!
  Defines the rules to generate ConfigurationProperties files.
  @param repository the repository name.
  @param tables the tables.
  @param C the context.
!>
<if(C.header)>
<C.header.split:{ l | #<l>}; separator="\n">
<else>
<java_header(
  description=
  [
    description(repository=repository)
  ],
  template="org/acmsl/queryj/templates/ConfigurationProperties.stg",
  C=C,
  prefix="#")>
<endif>

<if(C.repository_dao)>
<  repository_dao_factory_property(
                  repository=repository,
                  engine=C.engine,
                  package=C.project_package,
                  daoSubpackage=typeInitMap.baseDAOSubpackageName,
                  C=C)>
<else>
<  tables:{t | <table_dao_factory_property(
                  table=t,
                  repository=repository,
                  engine=C.engine,
                  package=C.project_package,
                  daoSubpackage=typeInitMap.baseDAOSubpackageName,
                  C=C)>}; separator="\n\n">
<endif>
>>

repository_dao_factory_property(repository, engine, package, daoSubpackage, C) ::= <<
<!
 Generates the property for creating repository DAO factories.
 @param repository the repository.
 @param engine the engine.
 @param package the package.
 @param daoSubpackage the DAO subpackage.
 @param C the context.
!>
<repository.lowercased>.dao=<package>.<daoSubpackage>.<repository.normalized.lowercased>.<engine.name.capitalized><repository.capitalized>DAOFactory
>>

table_dao_factory_property(table, repository, engine, package, daoSubpackage, C) ::= <<
<!
 Generates the property for creating repository DAO factories.
 @param table the table.
 @param repository the repository.
 @param engine the engine.
 @param package the package.
 @param daoSubpackage the DAO subpackage.
 @param C the context.
!>
# <table.name> DAO implementation.
<repository.lowercased>.<table.name.voName.lowercased>.dao=<package>.<daoSubpackage>.<table.name.voName.lowercased>.<engine.name.capitalized><table.name.voName>DAOFactory
>>