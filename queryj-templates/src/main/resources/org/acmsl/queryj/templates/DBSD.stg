//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DBSD.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DBSD files.
//
//
group DBSD;

import "queryj.stg"

source(C) ::= <<
<!
 Defines the rules to generate DBSD files for a given schema.
 @param C the context.
!>
<dbsd(tables=C.tables, repository=C.repository, C=C)>
>>

dbsd(tables, repository, C) ::= <<
<!
 Defines the rules to generate DBSD files for a given schema.
 @param tables the tables.
 @param repository the repository.
 @param C the context.
!>
OWNER(<C.jdbc_user>)
USER(<C.jdbc_user>)
USER_ROLE(ROLE_APP_REF)

DEFAULT_TABLE_TABLESPACE(DATA)
DEFAULT_INDEX_TABLESPACE(INDX)
TARGET_DBMS(ORACLE)

<tables:{ t | <table_def(table=t, repository=repository, C=C)>}; separator="\n\n">
>>

table_def(table, repository, C) ::= <<
<!
 Writes the DDL for a table, in DBSD format.
 @param table the table.
 @param repository the repository.
 @param C the context.
!>
//\<\<------ <table.name.uppercased>(DESCRIPTION) '<table.comment>' ------\>>
  <table.attributes:{a | <dbsd_column(column=a)>}; separator="\n">
##                                     ##
  <dbsd_pk(table=table)>
  <table.foreignKeys:{ fk | <dbsd_fk(fk=fk)>}; separator="\n">
<if(table.static)>
<if(table.staticContent)>
++                                     ++
<table.staticContent:{ r | <dbsd_row(row=r, table=table)>}; separator="\n">
<endif>
<endif>
//\<\<--------------------------------------------------------------------\>>

>>

dbsd_column(column) ::= <<
<!
 Writes the column information in DBSD format.
 @param column the column.
!>
<column.name> | <dbsd_column_type(column=column)> | <if(column.nullable)>NULL<else>NOT_NULL<endif> | '<column.comment>' ;
>>

dbsd_column_type(column) ::= <<
<!
 Writes the column type, in DBSD format.
 @param column the column.
!>
<
if(column.string)
  >TXT<
else><
  if(column.numeric)
    >NUM<
  else
    ><column.type><
  endif><
endif
><
if(column.length)
  >(<column.length><
  if(column.precision)
    >,<column.precision><
  endif
  >)<
endif>
>>

dbsd_pk(table) ::= <<
<!
 Writes the primary key information, in DBSD format.
 @param table the table.
!>
PK_<table.name.uppercased> | PK(<table.primaryKey:{ c | <c.name.uppercased>}; separator=",">) |;
>>

dbsd_fk(fk) ::= <<
<!
 Writes the foreign key information, in DBSD format.
 @param fk the foreign key.
!>
FK_<fk.sourceTableName> | FK(<fk.attributes:{a | <a.name.uppercased>}; separator=", ">) -> <fk.targetTableName>(<fk.target.primaryKey:{ a | <a.name.uppercased>}; separator=", ">) |;
>>

dbsd_row(row, table) ::= <<
<!
 Writes the row declaring static data, in DBSD format.
 @param row the row.
 @param table the table.
 !>
( <row.attributes:{ a | <if(a.primitive)><a.value><else>'<a.value>'<endif>}; separator=", "> );
>>