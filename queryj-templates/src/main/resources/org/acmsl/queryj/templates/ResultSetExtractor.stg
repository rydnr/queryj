//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: ResultSetExtractor.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate ResultSetExtractor
//              implementations.
//
//
group ResultSetExtractor;

import "queryj.stg"

source(C) ::= <<
<!
  Defines the rules to generate ResultSetExtractor implementations.
  @param C the context.
!>
<sourceImpl(table=C.table, def=C.templateDef, C=C)>
>>

sourceImpl(table, def, C) ::= <<
<!
  Defines the rules to generate ResultSetExtractor implementations.
  @param table the table.
  @param def the template def.
  @param C the context.
!>
/*
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(table=table, def=def)
  ],
  template="org/acmsl/queryj/templates/ResultSetExtractor.stg",
  C=C)><endif>
 */
<package_declaration(p=C.package)>

<project_imports(
  basePackageName=C.project_package,
  voSubpackageName=typeInitMap.voSubpackageName,
  table=table,
  repository=C.repository)>

/*
 * Importing V24-Commons classes.
 */
import com.ventura24.commons.dao.DAOListener;
import com.ventura24.commons.dao.V24ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor;

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
<checkers_import(C=C)>
/*
 * Importing JDK classes.
 */
import java.sql.ResultSet;
import java.sql.SQLException;
<import_attribute_types(table=table, useHeader=false, nullableOnly=true)>

<class(table=table, repository=C.repository, def=def, C=C)>
>>

project_imports(basePackageName, voSubpackageName, table, repository) ::= <<
<!
  Generates the project imports.
  @param basePackageName the base package name.
  @param voSubpackageName the subpackage for the value object.
  @param table the table.
  @param repository the repository name.
!>
/*
 * Importing <repository.capitalized> classes.
 */
import <basePackageName>.<voSubpackageName>.<table.name.voName>;
import <basePackageName>.<voSubpackageName>.core.<table.name.voName>Factory;
>>

description(table, def) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the custom result.
  @param def the template def.
!>
{@link V24ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor} implementation for extracting <if(def.metadata.multiple.meansTrue)>multiple<endif> {@link <table.name.voName>} entries from the database.
>>

class(table, repository, def, C) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param repository the repository.
 @param def the template def.
 @param C the context.
!>
/**
 * <[
      description(table=table, def=def)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/templates/ResultSetExtractor.stg", C=C)>
 */
<class_annotations(C=C)>
public class <table.name.voName>ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor
    extends V24ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor\<<table.name.voName>\>
{
    /**
     * Creates a new instance.
     * @param sql the SQL query.
     * @param listener the {@link DAOListener} instance.
     */
    public <table.name.voName>ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor(
        <notnull(C=C)>final String sql, <nullable(C=C)>final DAOListener listener)
    {
        super(sql, listener);
    }

    <defaultExtractor(table=table, repository=repository, def=def, C=C)>

    <equals_method(table=table, C=C)>

    <hashCode_method(table=table, C=C)>

    <toString_method(table=table, C=C)>
}
>>

defaultExtractor(table, repository, def, C) ::= <<
<!
 Generates the default logic for the extractor.
 @param table the table.
 @param repository the repository.
 @param def the template def.
 @param C the context.
!>
/**
 * Extracts {@link <table.name.voName>} information from given result set.
 * @param resultSet the result set.
 * @return the {@link <table.name.voName>}.
 * @throws SQLException intercepted by \<i>Spring\</i>.
 * @throws DataAccessException with information about any
 * custom exception.
 */
@Override
<notnull(C=C)>
protected <table.name.voName> extractValue(<notnull(C=C)>final ResultSet resultSet)
    throws  SQLException,
            DataAccessException
{
    return extractValue(resultSet, <table.name.voName>Factory.getInstance());
}

/**
 * Extracts {@link <table.name.voName>} information from given result set.
 * @param resultSet the result set.
 * @param factory the {@link <table.name.voName>Factory}
 * instance.
 * @return the {@code <table.name.voName>}.
 * @throws SQLException intercepted by \<i>Spring\</i>.
 * @throws DataAccessException with information about any
 * custom exception.
 */
<notnull(C=C)>
protected <table.name.voName> extractValue(
    <notnull(C=C)>final ResultSet resultSet,
    <notnull(C=C)>final <table.name.voName>Factory factory)
  throws  SQLException,
          DataAccessException
{
    <notnull(C=C)>final <table.name.voName> result;

<if(table.containsNullableAttributes)>
    <table.nullableAttributes:{a | <nullable_attribute_resultset_retrieval_declaration(attr=a, C=C)>}; separator="\n">

<endif>

    result =
        factory.create<table.name.voName>(
            <table.attributes:{a | <nullable_attribute_resultset_retrieval(attr=a, C=C)>}; separator=",\n">);

    return result;
}
>>

nullable_attribute_extraction(attr, table, repository, C) ::= <<
<attr.name>
>>

attribute_extraction(attr, table, repository, C) ::= <<
<attr.name>
>>

nullable_attribute_resultset_retrieval_declaration(attr, C) ::= <<
<!
 Writes the piece of code to retrieve the value of a nullable attribute from a ResultSet.
 @param attr the attribute.
 @param C the context.
!>
<
if(attr.nullable)>
<if(attr.primitiveWrapper)>final <attr.primitiveType><else><nullable(C=C)>final <attr.objectType><endif> <attr.name.uncapitalized>Aux = <attribute_resultset_retrieval(attr=attr, C=C)>;
<nullable(C=C)>final <attr.objectType> <attr.name.uncapitalized>;
if (resultSet.wasNull())
{
    <attr.name.uncapitalized> = null;
}
else
{
    <attr.name.uncapitalized> = <attr.name.uncapitalized>Aux;
}<
else>
<notnull(C=C)>final <attr.objectType> <attr.name.uncapitalized> = <attribute_resultset_retrieval(attr=attr, C=C)>;
<endif>
>>

nullable_attribute_resultset_retrieval(attr, C) ::= <<
<!
 Writes the piece of code to retrieve the value of a nullable attribute from a ResultSet.
 @param attr the attribute.
 @param C the context.
!>
<
if(attr.nullable)
  ><generic_nullable_attribute_resultset_retrieval(attr=attr, C=C)><
else
  ><attribute_resultset_retrieval(attr=attr, C=C)><
endif>
>>

generic_nullable_attribute_resultset_retrieval(attr, C) ::= <<
<!
 Writes the piece of code to retrieve the value of a nullable attribute from a ResultSet.
 @param attr the attribute.
 @param C the context.
!>
<
if(attr.date)
  ><nullable_date_attribute_resultset_retrieval(attr=attr, C=C)><
else><
  if(attr.primitive)><
    if(attr.nullable)
     >(<attr.name.uncapitalized> == null) ? null : <attr.name.uncapitalized><
    else
     ><attr.objectType>.valueOf(<attr.name.uncapitalized>)<
    endif><
  else
   ><attr.name.uncapitalized><
  endif><
endif>
>>

nullable_date_attribute_resultset_retrieval(attr, C) ::= <<
<!
 Writes the piece of code to retrieve the value of a nullable Date attribute from a ResultSet.
 @param attr the attribute.
 @param C the context.
!>
<if(attr.nullable)>(<attr.name.uncapitalized> == null) ? null : <endif>new Date(<attr.name.uncapitalized>.getTime())
>>

equals_method(table, C) ::= <<
<!
 Generates the equals(Object) method.
 @param table the table.
 @param C the context.
!>
/**
 * Checks whether given object is semantically equivalent to this one.
 * @param other the other object to compare to.
 * @return {@code true} if and only if they're equivalent.
 */
@Override
public boolean equals(<nullable(C=C)>final Object other)
{
    final boolean result;

    if (other instanceof <table.name.voName>ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor)
    {
        result = super.equals(other);
    }
    else
    {
        result = false;
    }

    return result;
}
>>

hashCode_method(table, C) ::= <<
<!
 Generates the hashCode() method.
 @param table the table.
 @param C the context.
!>
/**
 * Retrieves the hashCode which identifies this instance
 * from any other one.
 * @return the unique (among instances of this class) value.
 */
@Override
public int hashCode()
{
    final int result;

    final int classHashCode = <table.name.voName>ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor.class.hashCode();

    final int superHashCode = super.hashCode();

    result = classHashCode + superHashCode;

    return result;
}
>>

toString_method(table, C) ::= <<
<!
 Generates the toString() method.
 @param table the table.
 @param C the context.
!>
/**
 * Generates a JSON-compatible representation of this instance.
 * @return such text.
 */
<notnull(C=C)>
@Override
public String toString()
{
    <notnull(C=C)>final StringBuilder result = new StringBuilder("{ \"super\": ");

    result.append(super.toString());
    result.append(", \"class\": \"<table.name.voName>ResultSet<if(def.metadata.multiple.meansTrue)>Multiple<else>Single<endif>Extractor\"");
    result.append(", \"package\": \"<C.package>\" }");

    return result.toString();
}
>>
