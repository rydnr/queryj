//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: queryj.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the common template rules in QueryJ theme.
//
group queryj;

import "types.stg"
import "type_checkers.stg"
import "javadoc.stg"
import "custom_selects.stg"
import "attributes.stg"
import "properties.stg"

typeInitMap ::= [
  "empty":"",
  "jdbcOperationsSubpackageName":"jdbc",
  "baseDAOSubpackageName":"dao",
  "voSubpackageName":"vo",
  "voFactorySubpackageName":"vo",
  "rdbSubpackageName":"rdb",
  "tableRepositorySubpackageName":"tables",
  "functionsRepositorySubpackageName":"functions",
  "dataAccessManagerSubpackageName":"dao",
  "foreignKeyStatementSetterSubpackageName":"dao.rdb",
  "xmlSubpackageName":"xml",
  "mockSubpackageName":"mock"
]

package_declaration(p) ::= <<
<!
  Generates the package declaration
  @param package the package name
!>
package <p>;
>>

indirect_template(name, extra1, extra2) ::= <<
<!
  Calls the template matching given name, passing the value as argument.
  @param name the template name.
!>
<!(name)(value=extra1, extra2=extra2)!>
>>

resultset_extractor_import(
  packageName,
  crseIdCapitalized) ::= <<
<!
  Generates the import statement of a custom resultset extractor.
  @param packageName the package.
  @param crseIdCapitalized the custom resultset extractor identifier, capitalized.
!>
import <packageName>.<crseIdCapitalized>Extractor;
>>

resultset_extractor_constants(
  crseid,
  crseidCapitalized,
  crseidNormalizedUppercased) ::= <<
<!
  Generates the class constants for a custom resultset extractor.
  @param crseId the custom resultset extractor identifier.
  @param crseIdCapitalized the capitalized identifier of the custom resultset
  extractor.
  @param crseIdNormalizedUppercased the normalized, upper-cased identifier
  of the custom resultset extractor.
!>
/**
 * The result set extractor for \<i><crseid>\</i> custom query.
 */
public static final ResultSetExtractor
    <crseidNormalizedUppercased>_CUSTOM_EXTRACTOR =
        new <crseidCapitalized>Extractor();
>>

implicit_attribute_declaration(attr, result) ::= <<
<!
 Generates the declaration of the property.
 @param result the custom result.
 @param attr the implicit property.
!>
<if(attr.nullable)>
<if(result.multiple)>
List\<<result.classValue>\> result = null;
<else>
<result.classValue> result = null;
<endif>
<else>
<if(attr.numeric)>
<attr.javaType> result = 0;
<else>
<if(attr.boolean)>
<attr.javaType> result = false;
<else>
<attr.javaType> result = null;
<endif>
<endif>
<endif>

>>

class_annotations(C) ::= <<
<if(C.checkthread_annotations_enabled)>@org.checkthread.annotations.ThreadSafe<endif>
>>

find_constant_check_attribute(attribute, C) ::= <<
<!
 Generates a check for given attribute.
 @param attribute the attribute.
 @param C the context.
!>
<
if(attribute.primitive)>
if (item.get<attribute.name.capitalized>() == <attribute.name.uncapitalized>)<
else><
  if(attribute.nullable)
   ><nullable(C=C)>final <attribute.objectType> <attribute.name.uncapitalized>Aux = item.get<attribute.name.capitalized>();

if (   (<attribute.name.uncapitalized>Aux != null)
    && (<attribute.name.uncapitalized>Aux.equals(<attribute.name.uncapitalized>)))<
  else
   >if (item.get<attribute.name.capitalized>().equals(<attribute.name.uncapitalized>))<
  endif><
endif>
>>

import_template(type) ::= <<
<!
  Imports given type.
!>
import <type>;
>>

attribute_method_declaration(attribute) ::= <<
<!
 Writes the method declaration for given attribute.
 @param attribute the attribute.
!><if(!attribute.strictlyPrimitive)><if(attribute.nullable)><nullable(C=C)><else><notnull(C=C)><endif><endif>final <attribute.javaType> <attribute.name.uncapitalized>
>>