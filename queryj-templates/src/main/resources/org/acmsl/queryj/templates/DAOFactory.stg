//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DAOFactory.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAOFactory implementations.
//
group DAOFactory;

import "queryj.stg"

source(C) ::= <<
<!
  Generates a DAOFactory database implementation source file.
!>
<sourceImpl(table=C.table, C=C)>
>>

sourceImpl(table, C) ::= <<
<!
  Generates a DAOFactory database implementation source file.
  @param table the table.
  @param C the context.
!>
/*
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(tableName=table.name)
  ],
  template="org/acmsl/queryj/dao/DAOFactory.stg",
  C=C)><endif>
 */
<package_declaration(p=C.package)>

<project_imports(
  basePackageName=C.project_package,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  table=table,
  repository=C.repository)>

/*
 * Importing V24-Commons classes.
 */
import com.ventura24.commons.dao.DAOFactory;
import com.ventura24.commons.dao.DAOListener;

/*
 * Importing Java extension classes.
 */
import javax.sql.DataSource;
<nullable_import(C=C)>
<class(table=table, C=C)>
>>

project_imports(basePackageName, baseDAOSubpackageName, table, repository) ::= <<
<!
  Generates the project imports
  @param basePackageName the base package name.
  @param baseDAOSubpackageName the subpackage of the base DAO interface.
  @param table the table.
!>
/*
 * Importing <repository.capitalized> classes.
 */
import <basePackageName>.<baseDAOSubpackageName>.<table.name.voName>DAO;
import <basePackageName>.<baseDAOSubpackageName>.core.<table.name.voName>DAOFactory;
>>

description(tableName) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
!>
<tableName>-specific {@link DAOFactory} implementation.
>>

class(table, C) ::= <<
<!
 Generates the interface body.
 @param table the table.
 @param C the context.
!>
<classImpl(table=table, repository=C.repository, engine=C.engine, C=C)>
>>

classImpl(table, repository, engine, C) ::= <<
<!
 Generates the interface body.
 @param table the table.
 @param repository the table repository name.
 @param engine the database engine.
 @param C the context.
!>
/**
 * <description(tableName=table.name)>
<class_common_javadoc(template="org/acmsl/queryj/dao/DAOFactory.stg", C=C)>
 */
<class_annotations(C=C)>
public class <engine.name.voName><table.name.voName>DAOFactory
    extends DAOFactory\<<table.name.voName>DAO>
    implements <table.name.voName>DAOFactory
{
    /**
     * Creates a {@link <engine.name.voName><table.name.voName>DAO}.
     * @param dataSource the required {@link DataSource}.
     * @param daoListener the {@link DAOListener} (optional).
     * @return such {@link <table.name.voName>DAO} implementation.
     */
    <nullable(C=C)>
    @Override
    protected <table.name.voName>DAO createDAO(
        <nullable(C=C)>final DataSource dataSource,
        <nullable(C=C)>final DAOListener daoListener)
    {
        <nullable(C=C)>final <table.name.voName>DAO result;

        if (dataSource != null)
        {
<if(table.dynamicQueries)>
            result = new <engine.name.voName><table.name.voName>DAOImpl(dataSource, daoListener);
<else>
            result = new <engine.name.voName><table.name.voName>DAO(dataSource, daoListener);
<endif>
        }
        else
        {
            result = null;
        }

        return result;
    }
}
>>