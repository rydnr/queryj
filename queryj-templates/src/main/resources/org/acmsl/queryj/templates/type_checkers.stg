//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: type_checkers.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the common templates dealing with type checkers.
//
group type_checkers;

notnull(C) ::= <<
<!
 Conditionally adds @NotNull annotations.
 !><if(C.notnull_annotations_enabled)>@NotNull <endif>
>>

notnull_arg_single_line(C) ::= <<
<!
 Conditionally adds @NotNull annotations.
 !><if(C.notnull_annotations_enabled)>@NotNull <endif>
>>

notnull_method(C) ::= <<
<!
 Conditionally adds @NotNull annotations.
 !><if(C.notnull_annotations_enabled)> @NotNull <else>
<endif>
>>

nullable(C) ::= <<
<!
 Conditionally adds @Nullable annotations.
 @param C the context.
 !><if(C.notnull_annotations_enabled)>@Nullable <endif>
>>

type_checker(attribute, C) ::= <<
<!
 Type checker for given attribute
 @param attribute the attribute.
!><if(attribute.nullable)><nullable(C=C)><else><if(!attribute.primitive)><notnull(C=C)><endif><endif>
>>

checkers_import(C) ::= <<
<!
 Generates the import group for NotNull/Nullable annotations.
 @param C the context.
 !>
<if(C.notnull_annotations_enabled)>

/*
 * Importing JetBrains annotations.
 */
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
<endif>
>>

nullable_import(C, useHeader=true, blankLineAfter=true) ::= <<
<!
 Generates the import group for NotNull/Nullable annotations.
 @param C the context.
 @param useHeader whether to include the import header.
 @param blankLineAfter whether to add a blank line afterwards.
!>
<if(C.notnull_annotations_enabled)>
<if(useHeader)>
/*
 * Importing JetBrains annotations.
 */
<endif
>import org.jetbrains.annotations.Nullable;<if(blankLineAfter)>
<endif><else><endif>
>>

notnull_import(C, useHeader=true, blankLineAfter=true) ::= <<
<!
 Generates the import group for NotNull/Nullable annotations.
 @param C the context.
 @param useHeader whether to use a header.
 @param blankLineAfter whether to add a blank line afterwards.
 !!>
<if(C.notnull_annotations_enabled)>

<if(useHeader)>/*
 * Importing JetBrains annotations.
 */
<endif>import org.jetbrains.annotations.NotNull;<if(blankLineAfter)>
<endif><else><endif>
>>

checkers_import_jsr() ::= <<
<!
 Generates the JSR-based checkers import group.
 @param C the context.
 !>
/*
 * Importing JSR-308 (http://types.cs.washington.edu/checker-framework/) annotations.
 */
import checkers.nullness.quals.NonNull;
import checkers.nullness.quals.Nullable;
>>

checkthread_import(C) ::= <<
<!
 Generates the checkthread.org import group.
 @param C the context.
 !>
/*
 * Importing checkthread.org annotations.
 */
import org.checkthread.annotations.ThreadSafe;
>>

checkers_import_maybe(container, C, useHeader=true) ::= <<
<!
 Imports the checkers depending on the container.
 @param container the container (table or result).
 @param context the context.
!>
<
if(container.containsNotNullItems)><
  if(container.containsNullableItems)><
    checkers_import(C=C)><
  else><
    notnull_import(C=C, useHeader=useHeader)>
< endif><
else><
  if(container.containsNullableItems)><
    nullable_import(C=C, useHeader=useHeader)>
< endif><
endif>
>>

notnull_import_maybe_nullable(container, C) ::= <<
<!
 Imports the checkers depending on the container items.
 @param container the container.
 @param context the context.
!>
<notnull_import(C=C, blankLineAfter=false)><
if(container.containsNullableItems)><
 nullable_import(useHeader=false, C=C, blankLineAfter=true)><
endif>
>>

nullable_import_maybe_notnull(table, C) ::= <<
<!
 Imports the checkers depending on the table attributes.
 @param table the table.
 @param context the context.
!>
/*
 * Importing JetBrains annotations.
 */
<
if(table.containsNotNullAttributes)><
 notnull_import(useHeader=false, C=C)>
<
endif>
<nullable_import(C=C, useHeader=false)>
>>