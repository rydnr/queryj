//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: BaseValueObject.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate value object interfaces.
//
//
group BaseValueObject;

import "queryj.stg"

source(C) ::= <<
<!
  Defines the rules to generate abstract value object implementations.
  @param C the context.
!>
<sourceImpl(table=C.table, C=C)>
>>

sourceImpl(table, C) ::= <<
<!
  Defines the rules to generate abstract value object implementations.
  @param table the table.
  @param C the context.
!>
/*
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(table=table)
  ],
  template="org/acmsl/queryj/templates/BaseValueObject.stg",
  C=C)><endif>
 */
<package_declaration(p=C.package)>

/*
 * Importing <C.repository.capitalized> classes.
 */
import <C.project_package>.<typeInitMap.voSubpackageName>.<table.name.voName>;
<checkers_import(C=C)>
/*
 * Importing JDK classes.
 */
import java.io.Serializable;
<import_attribute_types(table=table, useHeader=false)>

<class(table=table, C=C)>
>>

description(table) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the custom result.
!>
<if(table.comment.empty)>Base class for {@link <table.name.voName>} value objects.<else><table.comment><endif>
>>

imports(table) ::= <<
<!
  Generates the imports for the attributes' types.
  @param table the table.
!>
<table.attributeTypes:{ t | import <t>;} ; separator="\n">
>>

class(table, C) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param C the context.
!>
/**
 * <[
      description(table=table)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/templates/BaseValueObject.stg", C=C)>
 */
<class_annotations(C=C)>
public abstract class Abstract<table.name.voName>
    implements <table.name.voName>,
               Serializable
{
    /**
     * The serial version id.
     */
    private static final long serialVersionUID = <C.serialVersionUID>L;

    <table.attributes:{ a | <attribute_declaration(attribute=a, C=C)>}; separator="\n\n">

    /**
     * Creates an {@code Abstract<table.name.voName>} instance.
     <table.attributes:{ a | <attribute_javadoc(attr=a)>}; separator="\n">
     */
    public Abstract<table.name.voName>(
        <table.attributes:{ a | <attribute_method_parameter_declaration(attribute=a, usePrefix=false, prefix="", C=C)>};
          separator=",\n">)
    {
        <table.attributes:{ a | <attribute_immutable_setter_call(attribute=a)>};
          separator="\n">
    }

    <table.attributes:{ a | <attribute_accessors(attribute=a, C=C)>};
     separator="\n\n">

<if(table.primaryKey)>
    <compareTo_method(table=table, C=C)>
<endif>
    <equals_method(table=table, C=C)>

    <hashCode_method(table=table, C=C)>

    <toString_method(table=table, C=C)>
}
>>

compareTo_method(table, C) ::= <<
<! Generates the compareTo(T) method !>
/**
 * Compares given object to this instance.
 * @param other the other object to compare to.
 * @return {@code -1}, {@code 0}, or {@code 1} if this instance
 * is lower, equal or greater than given object.
 */
@Override
public int compareTo(<nullable(C=C)>final <table.name.voName> other)
{
    final int result;

    if (other == null)
    {
        result = 1;
    }
    else
    {
        <table.primaryKey:{ a | <attribute_compareTo(attr=a, table=table, C=C)>}; separator="">

        final boolean greater =
            <table.primaryKey:{ a |<a.name.uncapitalized>Greater}; separator="\n&& ">;

        final boolean lower =
            <table.primaryKey:{ a |<a.name.uncapitalized>Lower}; separator="\n&& ">;

        final boolean equal =
            <table.primaryKey:{ a |<a.name.uncapitalized>Equal}; separator="\n&& ">;

        if (greater)
        {
            result = 1;
        }
        else if (lower)
        {
            result = -1;
        }
        else if (equal)
        {
            result = 0;
        }
        else
        {
            result = -1;
        }
    }

    return result;
}
>>

equals_method(table, C) ::= <<
<! Generates the equals(Object) method !>
/**
 * Checks whether given object is semantically equivalent to this one.
 * @param other the other object to compare to.
 * @return {@code true} if and only if they're equivalent.
 */
@Override
public boolean equals(<nullable(C=C)>final Object other)
{
    final boolean result;

    if (other instanceof <table.name.voName>)
    {
        <notnull(C=C)>final <table.name.voName> candidate = (<table.name.voName>) other;

        <table.attributes:{ a | <attribute_equals(attribute=a)>}; separator="">
        result =
            <table.attributes:{ a |<a.name.uncapitalized>Match}; separator="\n&& ">;
    }
    else
    {
        result = false;
    }

    return result;
}
>>

hashCode_method(table, C) ::= <<
<! Generates the hashCode() method !>
/**
 * Retrieves the hashCode which identifies this instance
 * from any other one.
 * @return the unique (among instances of this class) value.
 */
@Override
public int hashCode()
{
    final int result;

    final int classHashCode = <table.name.voName>.class.hashCode();

    <table.attributes:{ a | <attribute_hashCode(attribute=a)>}; separator="\n">

    result =
          classHashCode
        <table.attributes:{ a |+ <a.name.uncapitalized>HashCode}; separator="\n">;

    return result;
}
>>

toString_method(table, C) ::= <<
<! Generates the toString() method !>
/**
 * {@inheritDoc}
 */
<notnull(C=C)>
@Override
public String toString()
{
    <notnull(C=C)>final StringBuilder result = new StringBuilder("{ \"class\": \"Abstract<table.name.voName>");

    <table.attributes:{ a | <attribute_toString(attribute=a)>}; separator="\n">

    result.append(", \"package\": \"<C.package>\" }");

    return result.toString();
}
>>
