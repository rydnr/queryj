//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: PkStatementSetter.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate PkStatementSetter
//              implementations.
//
//
group PkStatementSetter;

import "queryj.stg"

source(C) ::= <<
<!
  Defines the rules to generate PkStatementSetter implementations.
  @param C the context.
!>
<sourceImpl(table=C.table, C=C)>
>>

sourceImpl(table, C) ::= <<
<!
  Defines the rules to generate PkStatementSetter implementations.
  @param table the table.
  @param C the context.
!>
/*
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(table=table)
  ],
  template="org/acmsl/queryj/templates/PkStatementSetter.stg",
  C=C)><endif>
 */
<package_declaration(p=C.package)>

/*
 * Importing Spring classes.
 */
import org.springframework.jdbc.core.PreparedStatementSetter;
<checkers_import(C=C)>

/*
 * Importing JDK classes.
 */
<if(table.primaryKey.attributeTypes)>
<table.primaryKey.attributeTypes:{ t | import <t>;}; separator="\n">
<endif>
<if(table.primaryKey.containsClobs)>
import java.io.Writer;
import java.sql.Clob;
<endif>
import java.sql.PreparedStatement;
import java.sql.SQLException;

<class(table=table, C=C)>
>>

first_line_description(table) ::= <<
<!
  Generates the first line of the generated file description.
  @param table the table.
!>
Specifies the PreparedStatement values required
>>

second_line_description(table) ::= <<
<!
  Generates the second line of the generated file description.
  @param table the table.
!>
to perform any <table.name> operation expecting the
>>

third_line_description(table) ::= <<
<!
  Generates the third line of the generated file description.
  @param table the table.
!>
primary key.
>>

class(table, C) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param C the context.
!>
/**
 * <[
      first_line_description(table=table),
      second_line_description(table=table),
      third_line_description(table=table)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/templates/PkStatementSetter.stg", C=C)>
 */
<class_annotations(C=C)>
public class <table.name.voName>PkStatementSetter
    implements  PreparedStatementSetter
{
    <table.primaryKey:{ a | <attribute_declaration(attribute=a, C=C)>}; separator="\n">

    /**
     * Creates a {@code <table.name.voName>PkStatementSetter}
     * instance.
     <table.primaryKey:{ a |<attribute_javadoc(attr=a)>}; separator="\n">
     */
    public <table.name.voName>PkStatementSetter(
        <table.primaryKey:{ a | <attribute_method_parameter_declaration(attribute=a, usePrefix=false, prefix="", C=C)>}; separator=",\n">)
    {
        <table.primaryKey:{ a | immutableSet<a.name.capitalized>(<a.name.uncapitalized>);}; separator="\n">
    }

    <table.primaryKey:{ a | <attribute_accessors(attribute=a, C=C, override=false)>}; separator="\n">

    /**
     * Specifies the values on given {@link PreparedStatement}.
     * @param preparedStatement the prepared statement.
     * @throws SQLException intercepted by \<i>Spring\</i>.
     */
    @Override
    public void setValues(<notnull(C=C)>final PreparedStatement preparedStatement)
        throws  SQLException
    {
        setValues(
            preparedStatement,
            <table.primaryKey:{ a | get<a.name.capitalized>()}; separator=",\n">);
    }

    /**
     * Specifies the values on given {@link PreparedStatement}
     * @param preparedStatement the prepared statement.
     <table.primaryKey:{ a |<attribute_javadoc(attr=a)>}; separator="\n">
     * @throws SQLException intercepted by \<i>Spring\</i>.
     */
    protected void setValues(
        <notnull(C=C)>final PreparedStatement preparedStatement,
        <table.primaryKey:{ a | <attribute_method_parameter_declaration(attribute=a, usePrefix=false, prefix="", C=C)>}; separator=",\n">)
        throws  SQLException
    {
        int index = 1;

        <table.primaryKey.minus.externallyManaged:{ a | <attribute_preparedstatement_specification(attr=a, C=C)>}; separator="\n">
    }

    <equals_method(table=table, C=C)>

    <hashCode_method(table=table, C=C)>

    <toString_method(table=table, C=C)>
}
>>

equals_method(table, C) ::= <<
<! Generates the equals(Object) method !>
/**
 * Checks whether given object is semantically equivalent to this one.
 * @param other the other object to compare to.
 * @return {@code true} if and only if they're equivalent.
 */
@Override
public boolean equals(<nullable(C=C)>final Object other)
{
    final boolean result;

    if (other instanceof <table.name.voName>PkStatementSetter)
    {
        <notnull(C=C)>final <table.name.voName>PkStatementSetter candidate =
            (<table.name.voName>PkStatementSetter) other;

        <table.primaryKey:{ a | <attribute_equals(attribute=a)>}; separator="">
        result =
            <table.primaryKey:{ a |<a.name.uncapitalized>Match}; separator="&& \n">;
    }
    else
    {
        result = false;
    }

    return result;
}
>>

hashCode_method(table, C) ::= <<
<!
 Generates the hashCode() method.
 @param table the table.
 @param C the context.
!>
/**
 * Retrieves the hashCode which identifies this instance
 * from any other one.
 * @return the unique (among instances of this class) value.
 */
@Override
public int hashCode()
{
    final int result;

    final int classHashCode = <table.name.voName>PkStatementSetter.class.hashCode();

    <table.primaryKey:{ a | <attribute_hashCode(attribute=a)>}; separator="\n">

    result =
          classHashCode
        <table.primaryKey:{ a |+ <a.name.uncapitalized>HashCode}; separator="\n">;

    return result;
}
>>

toString_method(table, C) ::= <<
<!
 Generates the toString() method.
 @param table the table.
 @param C the context.
!>
/**
 * Generates a JSON-compatible representation of this instance.
 * @return such text.
 */
<notnull(C=C)>
@Override
public String toString()
{
    <notnull(C=C)>final StringBuilder result =
        new StringBuilder("{ \"class\": \"<table.name.voName>PkStatementSetter");

    <table.primaryKey:{ a | <attribute_toString(attribute=a)>}; separator="\n">

    result.append(", \"package\": \"<C.package>\" }");

    return result.toString();
}
>>
