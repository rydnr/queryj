//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: ValueObjectImpl.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate value object implementations.
//
//
group ValueObjectImpl;

import "queryj.stg"

source(C) ::= <<
<!
  Defines the rules to generate value object implementations.
  @param C the context.
!>
<sourceImpl(table=C.table, C=C)>
>>

sourceImpl(table, C) ::= <<
<!
  Defines the rules to generate value object implementations.
  @param table the table.
  @param C the context.
!>
/*
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description(table=table)
  ],
  template="org/acmsl/queryj/templates/ValueObjectImpl.stg",
  C=C)><endif>
 */
<package_declaration(p=C.package)>
<checkers_import_maybe(container=table, C=C)>
<import_attribute_types(table=table, useHeader=true)>

<class(table=table, C=C)>
>>

description(table) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the custom result.
!>
<if(table.comment.empty)>ValueObject implementation for <table.name>.<else><table.comment><endif>
>>

class(table, C) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param C the context.
!>
/**
 * <[
      description(table=table)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/templates/ValueObjectImpl.stg", C=C)>
 */
<class_annotations(C=C)>
public class <table.name.voName>Impl
    extends Abstract<table.name.voName>
{
    /**
     * The serial version id.
     */
    private static final long serialVersionUID = <C.serialVersionUID>L;

    /**
     * Creates an {@code <table.name.voName>Impl} instance.
     <table.attributes:{ a | <attribute_javadoc(attr=a)>}; separator="\n">
     */
    public <table.name.voName>Impl(
        <table.attributes:{ a | <attribute_method_parameter_declaration(attribute=a, usePrefix=false, prefix="", C=C)>};
          separator=",\n">)
    {
        super(<table.attributes:{ a | <a.name.uncapitalized>}; separator=", ">);
    }
}
>>

getter(attribute) ::= <<
<!
 Writes the getter for given attribute.
 @param attribute the attribute.
!>
/**
 * <if(attribute.comment)><attribute.comment><else>Retrieves the \<i\><attribute.name>\</i\> value<endif>.
 * @return such information.
 */
<if(!attribute.strictlyPrimitive)><if(attribute.nullable)><nullable(C=C)><else><notnull(C=C)><endif><endif>
<attribute.javaType> get<attribute.name.capitalized>();
>>
