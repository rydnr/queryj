- Create a new ST template BaseDAOFactory.stg, in folder src/main/resources/org/acmsl/queryj/templates/dao;
- Import "queryj.stg";
- Define template source(C):
  - Add comment: Generates a BaseDAOFactory database implementation source file.;
  - Call template sourceImpl:
    - Pass table: C.table;
    - Pass C: C;
- Define template sourceImpl(table; C):
  - Add comment: Generates a DAOFactory database implementation source file.;
  - Add comment: @param table the table.;
  - Add comment: @param C the context.;
  - If C.header, Then Print:
    - C.header;
    - Else:
      - Call java_header:
        - Pass year: C.currentYear;
        - Pass description: an array of:
          - Call description:
            - Pass tableName: table.Name;
        - Pass timestamp: C.timestamp;
  - If C.generation_timestamps_enabled, Then Print:
     - // Generated by QueryJ using org/acmsl/queryj/dao/BaseDAOFactory.stg at <C.timestamp>
    Else:
     - // Generated by QueryJ using org/acmsl/queryj/dao/BaseDAOFactory.stg
  - Call package_declaration:
    - Pass p: C.package;
  - Call checkers_import;
  - Import JDK classes;
  - Import javax classes;
  - Import Apache Commons Logging classes;
  - Call class:
    - Pass table: table;
    - Pass C: C;
- Define template description(tableName):
  - Add comment: Generates a description for the generated file.;
  - Add comment: @param tableName the table name.
  - Print:
    <tableName>-specific DAOFactory implementation.
- Define template class(table, C):
 - Add comment: Generates the class body.
 - Add comment: @param table the table.
 - Add comment: @param C the context.
 - Call classImpl:
   - Pass table: table;
   - Pass repository: C.repository;
   - Pass C: C;
- Define template classImpl(table, repository, C):
  - Add comment: Generates the class body.
  - Add comment: @param table the table.
  - Add comment: @param repository the table repository name.
  - Add comment: @param C the context.
  - Print a Javadoc class comment:
    - Call description:
      - Pass tableName: table.name
    - Call class_common_javadoc:
      - Pass template: "org/acmsl/queryj/dao/BaseDAOFactory.stg";
      - Pass generation_timestamps_allowed: C.generation_timestamps_allowed;
      - Pass timestamp: C.timestamp
  - Declare an abstract class called Abstract<table.name.capitalized>DAOFactory;
  - Declare a private attribute m__LastUsed, of type <table.name.capitalized>DAOFactory;
  - Write immutable setter, mutable setter, mutable getter for m__LastUsed;
  - Declare a public static method getInstance():
    - Add comment: Retrieves a {@code <table.name.capitalized>DAOFactory} instance.
    - Add comment: @return such instance.
    - Print:
      return getInstance(<repository.capitalized>DAOChooser.getInstance());
  - Declare a protected static <table.name.capitalized>DAOFactory getInstance(<repository.capitalized>DAOChooser daoChooser) method:
    - Add comment: Retrieves a {@code <table.name.capitalized>DAOFactory} instance.
    - Add comment: @param daoChooser the {@code <repository.capitalized>DAOChooser} instance.
    - Add comment: @return such instance.
    - Print:
      @Nullable final <table.name.capitalized>DAOFactory result = getLastUsed();

      @Nullable final String factoryClassName =
          daoChooser.get<table.name.capitalized>DAOFactoryClassName();

      if (   (result == null)
          || (   (factoryClassName != null)
              && (!factoryClassName.equals(result.getClass().getName()))))
      {
          try
          {
              @NotNull final Class\<<table.name.capitalized>DAOFactory>> factoryClass =
                  Class.forName(factoryClassName);

              result = factoryClass.newInstance();

              setLastUsed(result);
          }
          catch (@NotNull final ClassNotFoundException factoryImplementationMissing)
          {
              logError(
                  "Cannot find " + factoryClassName + " implementation",
                  factoryImplementationMissing);
          }
          catch (@NotNull final InstantiationException invalidClassName)
          {
              logError(
                  "Cannot instantiate " + factoryClassName + " implementation",
                  invalidClassName);
          }
      }
      else
      {
          logError("<table.name.capitalized>DAOFactory not specified");
      }

      return result;
  - Declare a protected static void logError(String message, Throwable error) method:
    - Add comment: Prints an error message.;
    - Add comment: @param message the error message.;
    - Add comment: @param error the underlying error (optional).;
    - Print:
          try
          {
              @Nullable final Log log = LogFactory.getLog(<table.name.capitalized>DAOFactory.class);

              if (log != null)
              {
                  if (error != null)
                  {
                      log.fatal(message, error);
                  }
                  else
                  {
                      log.fatal(message);
                  }
              }
              else
              {
                  @Nullable final PrintStream printer = retrieveFallbackLog();

                  if (printer != null)
                  {
                      logError(printer, message, error);
                  }
              }
          }
          catch (@NotNull final Throwable throwable)
          {
              @Nullable final PrintStream printer = retrieveFallbackLog();

              if (printer != null)
              {
                  logError(printer, "Cannot log using Apache Commons Logging.");
                  logError(printer, "The original error was: ");
                  logError(printer, message, error);
                  logError(printer, "The logging error is: ", throwable);
              }
          }
  - Declare a protected static void retrieveFallbackLog() method:
    - Add comment: Retrieves the fallback {@link PrintStream}.;
    - Add comment: @return either {@code System.err} or {@code System.out}, or {@code null} if none of them are available.;
    - Print:
          @Nullable final PrintStream result;

          if (System.err != null)
          {
              result = System.err;
          }
          else if (System.out != null)
          {
              result = System.out;
          }
          else
          {
              result = null;
          }

          return result;

  - Declare a protected static void logError(PrintStream, String) method:
    - Add comment: Logs an error if Commons-Logging is not available, using given {@code PrintStream}.;
    - Add comment: @param printStream the {@link PrintStream}.;
    - Add comment: @param message the message.;
    - Call logError(printStream, message, null);
  - Declare a protected static void logError(PrintStream, String, Throwable) method:
    - Add comment: Logs an error if Commons-Logging is not available, using given {@code PrintStream}.;
    - Add comment: @param printStream the {@link PrintStream}.;
    - Add comment: @param message the message.;
    - Add comment: @param error the cause (optional).
    - Print:
          if (error != null)
          {
              printStream.println(message + " (" + error.getMessage() + ")");
              error.printStacktrace(printStream);
          }
          else
          {
              printStream.println(message);
          }
  - Declare a public abstract <table.name.capitalized>DAO create<table.name.capitalized>DAO() method:
    - Add comment: Creates a <table.name>-specific DAO implementation.;
    - Add comment: @return such implementation.;
