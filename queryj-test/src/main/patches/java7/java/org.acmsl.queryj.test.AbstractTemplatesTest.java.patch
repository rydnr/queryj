diff -rupN org/acmsl/queryj/test/AbstractTemplatesTest.java org/acmsl/queryj/test/AbstractTemplatesTest.java
--- org/acmsl/queryj/test/AbstractTemplatesTest.java
+++ org/acmsl/queryj/test/AbstractTemplatesTest.java
@@ -169,22 +169,22 @@ public abstract class AbstractTemplatesTest<G, F>
     /**
      * A simple mapping between template names and generators.
      */
-    @NotNull protected final Map<String, G> GENERATOR_MAPPINGS = new HashMap<>();
+    @NotNull protected final Map<String, G> GENERATOR_MAPPINGS = new HashMap<String, G>();
 
     /**
      * A simple mapping between template names and factories.
      */
-    @NotNull protected final Map<String, F> FACTORY_MAPPINGS = new HashMap<>();
+    @NotNull protected final Map<String, F> FACTORY_MAPPINGS = new HashMap<String, F>();
 
     /**
      * A simple mapping between template names and packages.
      */
-    @NotNull protected final Map<String, String> PACKAGE_MAPPINGS = new HashMap<>();
+    @NotNull protected final Map<String, String> PACKAGE_MAPPINGS = new HashMap<String, String>();
 
     /**
      * Templates being debugged.
      */
-    @NotNull protected final Map<String, Boolean> DEBUG = new HashMap<>();
+    @NotNull protected final Map<String, Boolean> DEBUG = new HashMap<String, Boolean>();
 
     /**
      * The package name.
@@ -272,14 +272,14 @@ public abstract class AbstractTemplatesTest<G, F>
      */
     protected AbstractTemplatesTest()
     {
-        immutableSetOutputFiles(new HashMap<>());
-        immutableSetTables(new HashMap<>());
-        immutableSetForeignKeys(new ArrayList<>());
-        immutableSetSqlList(new ArrayList<>());
-        immutableSetParameters(new HashMap<>());
-        immutableSetRows(new HashMap<>());
-        immutableSetResults(new HashMap<>());
-        immutableSetProperties(new HashMap<>());
+        immutableSetOutputFiles(new HashMap<String, File>());
+        immutableSetTables(new HashMap<String, Table<String, Attribute<String>, List<Attribute<String>>>>());
+        immutableSetForeignKeys(new ArrayList<ForeignKey<String>>());
+        immutableSetSqlList(new ArrayList<Sql<String>>());
+        immutableSetParameters(new HashMap<String, List<Parameter<String, ?>>>());
+        immutableSetRows(new HashMap<String, List<Row<String>>>());
+        immutableSetResults(new HashMap<String, Result<String>>());
+        immutableSetProperties(new HashMap<String, List<Property<String>>>());
     }
 
     /**
@@ -989,10 +989,10 @@ public abstract class AbstractTemplatesTest<G, F>
         @NotNull final List<Row<String>> staticContent,
         @NotNull final DecoratorFactory decoratorFactory)
     {
-        @NotNull final List<String> tableNames = new ArrayList<>(1);
+        @NotNull final List<String> tableNames = new ArrayList<String>(1);
         tableNames.add(table.getName());
         @NotNull final List<Table<String, Attribute<String>, List<Attribute<String>>>> tables =
-	        new ArrayList<>(1);
+	        new ArrayList<Table<String, Attribute<String>, List<Attribute<String>>>>(1);
         tables.add(table);
 
         return retrieveMetadataManager(engineName, tableNames, tables, staticContent, decoratorFactory);
@@ -1013,7 +1013,7 @@ public abstract class AbstractTemplatesTest<G, F>
         @NotNull final List<Row<String>> staticContents,
         @NotNull final DecoratorFactory decoratorFactory)
     {
-        @NotNull final List<String> tableNames = new ArrayList<>(tables.size());
+        @NotNull final List<String> tableNames = new ArrayList<String>(tables.size());
 
         for (@Nullable final Table<String, Attribute<String>, List<Attribute<String>>> table : tables)
         {
@@ -1107,7 +1107,7 @@ public abstract class AbstractTemplatesTest<G, F>
         @NotNull final List<String> tableNames =
             resultClass != null
             ? Arrays.asList(StringUtils.getInstance().unCapitalize(resultClass, "_"))
-            : new ArrayList<>(0);
+            : new ArrayList<String>(0);
         @NotNull final Table<String, Attribute<String>, List<Attribute<String>>> table =
             EasyMock.createNiceMock(Table.class);
         @NotNull final List<Table<String, Attribute<String>, List<Attribute<String>>>> tables =
