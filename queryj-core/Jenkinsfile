pipeline {
    agent any

    options {
        skipDefaultCheckout() // Avoids Jenkins auto-checkout
    }

    environment {
        GIT_REPO = 'git@github.com:rydnr/java-commons.git' // Your repository URL
        CREDENTIALS_ID = 'github' // Jenkins credentials ID for SSH key
        GROUP_ID = 'org.acmsl.queryj'
        ARTIFACT_ID = 'queryj-core'
        MAVEN_REPO = 'http://maven.acm-sl.org/repository/maven-snapshots-local'
        LOCAL_VERSION_FILE = "${WORKSPACE}/.last_snapshot_versions"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']], // Replace with your branch
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'WipeWorkspace'], // Wipes workspace before cloning
                        [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        url: env.GIT_REPO,
                        credentialsId: env.CREDENTIALS_ID
                    ]]
                ])
            }
        }

        stage('Check for New SNAPSHOT') {
            steps {
                script {
                    // Generate the effective POM
                    sh '/home/jenkins/.sdkman/candidates/maven/current/bin/mvn help:effective-pom -Doutput=effective-pom.xml'

                    // Extract all SNAPSHOT dependencies
                    def snapshotDeps = sh(script: """
                        xmlstarlet sel -T -N "x=http://maven.apache.org/POM/4.0.0" \\
                        -t -m "/x:project/x:dependencies/x:dependency[x:version[contains(text(),'SNAPSHOT')]]" \\
                        -v "concat(x:groupId,':',x:artifactId,':',x:version)" -n effective-pom.xml
                    """, returnStdout: true).trim().split("\n")

                    def shouldTriggerBuild = false
                    def newVersions = [:]

                    snapshotDeps.each { dep ->
                        def parts = dep.split(":")
                        def groupId = parts[0].replace('.', '/')
                        def artifactId = parts[1]
                        def version = parts[2]

                        def metadataUrl = "${MAVEN_REPO}${groupId}/${artifactId}/maven-metadata.xml"
                        def latestSnapshot = sh(script: """
                            curl -s "${metadataUrl}" | xmlstarlet sel -T -t -v "/metadata/versioning/latest" || echo "none"
                        """, returnStdout: true).trim()

                        def lastSnapshot = sh(script: "grep ${artifactId} ${LOCAL_VERSION_FILE} || echo none", returnStdout: true).trim()

                        if (latestSnapshot != "none" && latestSnapshot != lastSnapshot) {
                            shouldTriggerBuild = true
                            newVersions[artifactId] = latestSnapshot
                        }
                    }

                    if (shouldTriggerBuild) {
                        echo "New SNAPSHOT detected!"
                        writeFile file: LOCAL_VERSION_FILE, text: newVersions.collect { k, v -> "${k}=${v}" }.join("\n")
                        currentBuild.result = 'SUCCESS'
                    } else {
                        echo "No new SNAPSHOT detected."
                        currentBuild.result = 'ABORTED'
                    }
                }
            }
        }

        stage('Build and Deploy') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                sh '/home/jenkins/.sdkman/candidates/maven/current/bin/mvn clean deploy'
            }
        }
    }
}
