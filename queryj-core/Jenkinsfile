pipeline {
    agent any

    tools {
        maven 'maven' // Ensure Jenkins uses the right Maven installation
    }

    options {
        skipDefaultCheckout() // Avoids Jenkins auto-checkout
    }

    environment {
        GIT_REPO = 'git@github.com:rydnr/queryj.git'
        CREDENTIALS_ID = 'github' // Jenkins credentials ID for SSH key
        GROUP_ID = 'org.acmsl.queryj'
        ARTIFACT_ID = 'queryj-core'
        MAVEN_REPO = 'http://maven.acm-sl.org/repository/maven-snapshots-local'
        LOCAL_VERSION_FILE = "${WORKSPACE}/.last_snapshot_versions"
        MAVEN_OPTS = "-Dmaven.repo.local=${WORKSPACE}/.m2/repository" // Optional: Isolate repo per build
        GIT_SSH_COMMAND = "ssh -i ~/.ssh/id_rsa-github-jenkins -o IdentitiesOnly=yes"
    }

    stages {
        stage('Ensure Parent POM is Available') {
            steps {
                script {
                    sshagent(credentials: [env.CREDENTIALS_ID]) {
                        sh 'git config --global core.sshCommand "ssh -o IdentitiesOnly=yes -i ~/.ssh/id_rsa-github-jenkins"'
                        sh '''
                            if ! /home/jenkins/.sdkman/candidates/maven/current/bin/mvn dependency:get -DgroupId=org.acmsl -DartifactId=acmsl-pom -Dversion=latest-SNAPSHOT -Dpackaging=pom; then
                                echo "Parent POM not found in remote repository, installing locally..."
                                git clone git@github.com:rydnr/acmsl-pom.git /tmp/$$
                                cd /tmp/$$
                                mvn clean install
                                rm -rf /tmp/$$
                            fi
                        '''
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    sshagent(credentials: [env.CREDENTIALS_ID]) {
                        sh 'git config --global core.sshCommand "ssh -o IdentitiesOnly=yes -i ~/.ssh/id_rsa-github-jenkins"'
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/master']],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [
                                [$class: 'WipeWorkspace'], // Wipes workspace before cloning
                                [$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false]
                            ],
                            submoduleCfg: [],
                            userRemoteConfigs: [[
                                url: env.GIT_REPO,
                                credentialsId: env.CREDENTIALS_ID
                            ]]
                        ])
                    }
                }
            }
        }

        stage('Build and Deploy') {
            steps {
                withMaven(maven: 'maven') {  // Enables Jenkins to track SNAPSHOT dependencies
                    sh '/home/jenkins/.sdkman/candidates/maven/current/bin/mvn -X clean deploy'
                }
            }
        }
    }
}
