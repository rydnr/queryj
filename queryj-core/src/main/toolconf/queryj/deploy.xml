<!--
 @license
                 ACM-SL Ant-based build script

    Copyright (C) 2001-2005  Jose San Leandro Armend&aacute;riz
                             chous@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: jose.sanleandro@acm-sl.com
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecaba&ntilde;as
                    Boadilla del monte
                    28660 Madrid
                    Spain

 @header
  
   Filename: $RCSfile$

   Author: Jose San Leandro Armendariz

   Description: Defines the steps and options available for building the
                project using Ant. Additional specific properties can be
                specified in the <i>build.properties</i> file.

-->

<!--
 Defines the steps and options available for building projects using Ant.
 Additional specific properties can be specified in the
 <i>build.properties</i> file.
 Projects supported by this script have the following structure:

  project-base-folder/
    conf/
      web-inf/
        web.xml
        [..][/]
      properties/
        [..][/]
      log4j/
        log4j.xml
        [..][/]
      i18n/
        [..][/]
      thirdparty/
        [..][/]
      xml/
        [..][/]
      [..]
    dist/
      build/
        [..][/]
      classes/
        [..][/]
      [..]
    docs/
      autogenerated/
        antlr/
          [..][/]
        javadoc/
          overview.html
          [..][/]
      design/
        [..][/]
      images/
        [..][/]
      license/
        [..][/]
      [..][/]
    engineering/
      psp/
        [..][/]
      notes/
        [..][/]
      [..]
    dependencies/
      lib/
        antlr/
          build/
            [..]
          runtime/
            [..]
          [..]
        java/
          build/
            [..]
          development/
            [..]
          runtime/
            [..]
          unittest/
            [..]
          [..]
      tld/
        [..]
    src/
      antlr/
        java/
          [..][/]
        jdkX.X/
          [..][/]
        javadoc/
          overview.html
          [..][/]
        input/
          [..][/]
        output/
          [..][/]
        [..][/]
      aspectj/
        aspects/
          [..][/]
        [..]
      css/
        [..][/]
      images/
        [..][/]
      html/
        [..][/]
      java/
        unittests/
          [..][/]
        [functionaltests/]
        [..][/]
      jsp/
        [..][/]
      javadoc/
        overview.html
        [..][/]
      shellscripts
        [..][/]
      toolconf/
        ant/
          build.properties
          build.xml
        [..][/]
    build.number
    package.number
    test.number
 @requires AspectJ libraries and Ant tasks.
 @requires JUnit libraries and Ant tasks.
 @author <a href="mailto:jsanleandro@yahoo.es">Jose San Leandro Armendariz</a>
 @default description
-->
<project name="${project.name}" default="description" basedir="../../..">

    <!--
     Displays the build script purpose, and the folder structure required.
     @return the output of the described message.
    -->
    <target
        name="description"
        description="Displays the build script purpose, and the folder
                              structure required.">

        <!--
         Displays the message.
        -->
        <echo>
  Projects supported by this script have the following structure:

  project-base-folder/
    conf/
      web-inf/
        web.xml
        [..][/]
      properties/
        [..][/]
      log4j/
        log4j.xml
        [..][/]
      i18n/
        [..][/]
      thirdparty/
        [..][/]
      xml/
        [..][/]
      [..]
    dist/
      build/
        [..][/]
      classes/
        [..][/]
      [..]
    docs/
      autogenerated/
        antlr/
          [..][/]
        javadoc/
          overview.html
          [..][/]
      design/
        [..][/]
      images/
        [..][/]
      license/
        [..][/]
      [..][/]
    engineering/
      psp/
        [..][/]
      notes/
        [..][/]
      [..]
      lib/
        antlr/
          build/
            [..]
          runtime/
            [..]
          [..]
        java/
          build/
            [..]
          development/
            [..]
          runtime/
            [..]
          unittest/
            [..]
          [..]
      tld/
        [..]
    src/
      antlr/
        build/
          [..][/]
        input/
          [..][/]
        output/
          [..][/]
        [..][/]
      aspectj/
        aspects/
          [..][/]
        [..]
      css/
        [..][/]
      html/
        [..][/]
      images/
        [..][/]
      java/
        unittests/
          [..][/]
        [functionaltests/]
        [..][/]
      jdkX.X/
        [..][/]
      jsp/
        [..][/]
      javadoc/
        overview.html
        [..][/]
      shellscripts
        [..][/]
      toolconf/
        ant/
          build.properties
          build.xml
        [..][/]
    build.number
    package.number
    test.number
        </echo>

    </target>

    <!--
     Defines the required variables in all tasks.
     Loads some of the from <i>build.properties</i> and creates the rest.
     @calls timestamp to get current time.
     @calls copy to backup <i>build.properties</i> before finding out project's
            current tag.
     @calls cvs to retrieve such tag.
     @calls property to initialize the required properties.
     @calls path to define each one of the class and source paths.
     @return the asignment of correct values to the required properties.
    -->
    <target name="init.properties">

      <!--
       System classpath not used.
      -->
      <property name="build.sysclasspath" value="ignore"/>

      <!--
       Checks whether "vendor" has been specified.
      -->
      <condition property="vendor.specified">
        <and>
          <isset property="vendor"/>
          <available file="src/toolconf/queryj/${vendor}.properties"/>
        </and>
      </condition>

      <property file="src/toolconf/queryj/${vendor}.properties"/>

      <!-- This stops the build if vendor.properties is not found or is incomplete -->

      <antcall target="check.vendor.settings.available" inheritAll="true"/>

      <!--
       Variable to check if JAVA_HOME variable is available.
      -->
      <condition property="java.home.available">

        <isset property="java.home"/>

      </condition>

      <!--
       Finds out current time and stores it in a variable called
       <i>current.time</i>.
      -->
      <tstamp>

        <format property="current.time" pattern="yyyyMMdd"/>

      </tstamp>

      <!--
       Reads some specific properties from an external property files.
      -->
      <property file="src/toolconf/ant/build.properties"/>
      <property file="src/toolconf/ant/project.properties"/>
      <property file="src/toolconf/ant/user.properties"/>
      <property file="src/toolconf/queryj/deploy.properties"/>

      <!--
       Requests CVS to perform the keyword clean substitution.
      -->
      <!--cvs command="update -kv src/toolconf/ant/version.properties"/-->

      <!--
       Reads some specific properties from an external property file.
      -->
      <property file="src/toolconf/ant/version.properties"/>

      <!--
       Removes the version.properties file to get rid of the sticky
       keyword substitution setting.
      -->
      <!--delete file="src/toolconf/ant/version.properties"/-->

      <!--
       Restores version.properties state.
      -->
      <!--cvs command="update -A src/toolconf/ant/version.properties"/-->

      <!--
       Displays some project information.
      -->
      <echo message=""/>
      <echo message="Project name: ${project.name}"/>
      <echo message="version: ${project.tag.name}"/>
      <echo message=""/>

<!--         BEGIN OF FOLDER STRUCTURE SECTION                              -->

      <!--
       Configuration base folder.
      -->
      <property name="conf.dir" value="${project.base.folder}/conf"/>

      <!--
         WEB-INF configuration folder. Under this folder are placed all
         files that will be included in the project WAR/EAR file, so
         be careful.
      -->
      <property name="web-inf.dir" value="${conf.dir}/web-inf"/>

      <!--
           web.xml location, needed for web applications.
      -->
      <property name="web.xml.path" value="${web-inf.dir}/web.xml"/>

      <!--
         Configuration properties folder.
      -->
      <property name="properties.dir" value="${conf.dir}/properties"/>

      <!--
         Log4J configuration folder.
      -->
      <property name="log4j.dir" value="${conf.dir}/log4j"/>

      <!--
         XML configuration files are placed in this folder.
      -->
      <property name="xml.dir" value="${conf.dir}/xml"/>

      <!--
         Internationalized message files in this folder.
      -->
      <property name="i18n.dir" value="${conf.dir}/i18n"/>

      <!--
       Compilation and distribution base folder.
      -->
      <property name="dist.dir" value="${project.base.folder}/dist"/>

      <!--
         Where the jar files with the compiled classes are created.
      -->
      <property name="build.dir" value="${dist.dir}/build"/>

      <!--
         Where the .class files are created while compiling.
      -->
      <property name="classes.dir" value="${dist.dir}/classes"/>

      <!--
       Documentation base folder.
      -->
      <property name="docs.dir" value="${project.base.folder}/docs"/>

      <!--
           Documentation images base folder.
      -->
      <property
        name="docs.images.dir"
        value="${docs.dir}/images"/>

      <!--
         Sets where to place the automatically-generated documentation.
      -->
      <property name="autogenerated.dir" value="${docs.dir}/autogenerated"/>

      <!--
         Sets where to place the Javadoc documentation for ANTLR compilers.
      -->
      <property name="antlr.javadoc.dir" value="${autogenerated.dir}/antlr"/>

      <!--
         Sets where to place the Javadoc documentation.
      -->
      <property name="javadoc.dir" value="${autogenerated.dir}/javadoc"/>

      <!--
         Specifies where the license-related files are located.
      -->
      <property name="license.dir" value="${docs.dir}/license"/>

      <!--
       Dependencies base folder.
      -->
      <property
        name="dependencies.dir"
        value="${project.base.folder}/dependencies"/>

      <!--
       Libraries base folder.
      -->
      <property name="lib.dir" value="${dependencies.dir}/lib"/>

      <!--
         ANTLR-specific libraries folder. Files under this folder are
         needed for compiling the sources and also at runtime.
      -->
      <property name="antlr.lib.dir" value="${lib.dir}/antlr"/>

      <!--
           ANTLR libraries needed ONLY for building the project, not
           required at runtime.
      -->
      <property
        name="antlr.build.lib.dir"
        value="${antlr.lib.dir}/build"/>

      <!--
           ANTLR libraries needed ONLY at runtime, not required for
           building the project.
      -->   
      <property
        name="antlr.runtime.lib.dir"
        value="${antlr.lib.dir}/runtime"/>
   
      <!--
           ANTLR libraries needed ONLY for unit tests, not required
           for building the project.
      -->   
      <property
        name="antlr.unit.test.lib.dir"
        value="${antlr.lib.dir}/unittest"/>

      <!--
         Java libraries folder. Files under this folder are needed for
         compiling the Java sources and also at runtime.
      -->
      <property name="java.lib.dir" value="${lib.dir}/java"/>

      <!--
           Java libraries needed ONLY while developing the project,
           required by development tools, not required at build or
           runtime.
      -->
      <property
        name="java.development.lib.dir"
        value="${java.lib.dir}/development"/>

      <!--
          Java libraries needed ONLY for building the project, not required
          at runtime.
      -->
      <property
        name="java.build.lib.dir"
        value="${java.lib.dir}/build"/>

      <!--
           Java libraries needed ONLY at runtime, not required for building
           the project.
      -->   
      <property
        name="java.runtime.lib.dir"
        value="${java.lib.dir}/runtime"/>

      <!--
           Java libraries needed ONLY for unit tests, not required
           for building the project.
      -->   
      <property
        name="java.unit.test.lib.dir"
        value="${java.lib.dir}/unittest"/>

      <!--
       TagLibs descriptors base folder.
      -->
      <property name="tld.dir" value="${dependencies.dir}/tld"/>

      <!--
       Base folder for all kind of source files.
      -->
      <property name="src.dir" value="${project.base.folder}/src"/>

      <!--
         ANTLR source folder.
      -->
      <property name="antlr.src.dir" value="${src.dir}/antlr"/>

      <!--
           ANTLR generated Java sources location.
      -->
      <property
        name="antlr.java.src.dir"
        value="${antlr.src.dir}/java"/>

      <!--
           Javadoc HTML sources related to ANTLR generated compiler packages.
      -->
      <property
        name="antlr.javadoc.src.dir"
        value="${antlr.src.dir}/javadoc"/>

      <!--
           ANTLR input data used in tests.
      -->
      <property
        name="antlr.input.src.dir"
        value="${antlr.src.dir}/input"/>

      <!--
           ANTLR output data generated by tests from previous input.
      -->
      <property
        name="antlr.output.src.dir"
        value="${antlr.src.dir}/output"/>

      <!--
         AspectJ source folder.
      -->
      <property name="aspectj.src.dir" value="${src.dir}/aspectj"/>

      <!--
         HTML source folder.
      -->
      <property name="html.dir" value="${src.dir}/html"/>

      <!--
         Where all images referred by web pages are located.
      -->
      <property name="web.images.dir" value="${src.dir}/images"/>

      <!--
         Where all stylesheets referred by web pages are located.
      -->
      <property name="web.css.dir" value="${src.dir}/css"/>

      <!--
         Java source folder.
      -->
      <property name="java.src.dir" value="${src.dir}/java"/>

      <!--
         JDK version-specific Java source folder.
      -->
      <property
        name="jdk.X.Y.src.dir"
        value="${src.dir}/jdk${include.specific.jdk.version}"/>

      <!--
         Javadoc source folder.
      -->
      <property name="javadoc.src.dir" value="${src.dir}/javadoc"/>

      <!--
         JSP source folder.
      -->
      <property name="jsp.dir" value="${src.dir}/jsp"/>

      <!--
         Shell scripts folder.
      -->
      <property name="shellscripts.dir" value="${src.dir}/shellscripts"/>

<!--         END OF FOLDER STRUCTURE SECTION                                -->

<!--         BEGIN MISC PROPERTIES DEFINITION SECTION                       -->

      <!--
       Defines the name and location of the project's jar file.
      -->
      <property
        name="project.jar.file"
        value="${build.dir}/${project.name}-${project.version}${project.status}.jar"/>

      <!--
       Defines the name and location of project's Javadoc packaged zip.
      -->
      <property
          name="javadoc.zip.path"
          value="${dist.dir}/${project.name}-javadoc.zip"/>

      <!--
       Prefix to use in WAR files to store the taglib descriptors.
      -->
      <property name="tld.war.prefix" value="tlds"/>

      <!--
       Prefix to use in WAR files to store the JSP pages.
      -->
      <property name="jsp.war.prefix" value=""/>

      <!--
       Prefix to use in WAR files to store the images.
      -->
      <property name="images.war.prefix" value="images"/>

      <!--
       Prefix to use in WAR files to store the stylesheets.
      -->
      <property name="css.war.prefix" value="css"/>

      <!--
       Prefix to use in WAR files to store the HTML pages.
      -->
      <property name="html.war.prefix" value=""/>

<!--         END MISC PROPERTIES DEFINITION SECTION                         -->

    </target>

    <!--
     Prepares the required directories.
     @depends init.properties to initialize all required properties.
     @param classes.dir the classes folder.
     @calls mkdir to create the <i>classes.dir</i> folder.
     @calls tstamp to retrieve the current time into <i>DSTAMP</i>.
     @return the creation of the <i>classes.dir</i> folder.
    -->
    <target
      name="init.folders"
      depends="init.properties"
      description="Prepares the required directories.">

      <!--
       Creates the distribution directory.
      -->
      <mkdir dir="${dist.dir}"/>

      <!--
       Creates the directory to store the compiled classes.
      -->
      <mkdir dir="${classes.dir}"/>

      <!--
       Creates the libraries base folder, if it's not created yet.
      -->
      <mkdir dir="${lib.dir}"/>

      <!--
       Creates the log4j directory, if it doesn't exist.
      -->
      <mkdir dir="${log4j.dir}"/>

      <!--
       Creates the properties directory, if it doesn't exist.
      -->
      <mkdir dir="${properties.dir}"/>

      <!--
       Creates the XML configuration directory, if it doesn't exist.
      -->
      <mkdir dir="${xml.dir}"/>

      <!--
         Creates the ANTLR-specific libraries folder, if it's not created
         yet.
      -->
      <mkdir dir="${antlr.lib.dir}"/>

      <!--
           Creates the folder where the ANTLR libraries needed ONLY for
           building the project (not required at runtime) are located,
           unless it already exists.
      -->
      <mkdir dir="${antlr.build.lib.dir}"/>

      <!--
           Creates the folder where the ANTLR libraries needed ONLY at
           runtime (not required for building the project) are located,
           unless it already exists.
      -->   
      <mkdir dir="${antlr.runtime.lib.dir}"/>
   
      <!--
           Creates the folder where the ANTLR libraries needed ONLY for
           testing.
      -->   
      <mkdir dir="${antlr.unit.test.lib.dir}"/>
   
      <!--
         Creates the Java libraries folder, if it's not created yet.
      -->
      <mkdir dir="${java.lib.dir}"/>

      <!--
           Creates the folder where Java libraries needed ONLY while
           developing the project (not required at runtime) are
           located, unless it already exists.
      -->
      <mkdir dir="${java.development.lib.dir}"/>

      <!--
           Creates the folder where Java libraries needed ONLY while
           building the project (not required at runtime) are
           located, unless it already exists.
      -->
      <mkdir dir="${java.build.lib.dir}"/>

      <!--
           Creates the folder where Java libraries needed ONLY at runtime
           (not required for building the project) are located, unless it
           already exists.
      -->   
      <mkdir dir="${java.runtime.lib.dir}"/>

      <!--
           Creates the folder where Java libraries needed ONLY for
           unit testing (not required for building the project) are
           located, unless it already exists.
      -->   
      <mkdir dir="${java.unit.test.lib.dir}"/>

      <!--
           Usually, projects use only the latest version of the JDK.
      -->
      <mkdir dir="${jdk.X.Y.src.dir}"/>

    </target>

    <!--
     Defines all required paths.
     @depends init.folders to ensure all folders exist.
     @return the definition of all paths.
    -->
    <target
      name="init.paths"
      depends="init.folders"
      description="Defines all required paths.">

      <!--
       ANTLR-only compilation classpath.
      -->
      <path id="antlr.compile.class.path">

        <!--
         ANTLR libraries needed for compilation and at runtime.
        -->
        <fileset dir="${antlr.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         ANTLR libraries needed only for compilation.
        -->
        <fileset dir="${antlr.build.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
       ANTLR-only runtime classpath.
      -->
      <path id="antlr.runtime.class.path">

        <!--
         ANTLR libraries needed for compilation and at runtime.
        -->
        <fileset dir="${antlr.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         ANTLR libraries needed only at runtime.
        -->
        <fileset dir="${antlr.runtime.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
       ANTLR-only unit test classpath.
      -->
      <path id="antlr.unit.test.class.path">

        <!--
         ANTLR compile classpath.
        -->
        <path refid="antlr.compile.class.path"/>

        <!--
         ANTLR runtime classpath.
        -->
        <path refid="antlr.runtime.class.path"/>

        <!--
         ANTLR libraries needed for compilation and at runtime.
        -->
        <fileset dir="${antlr.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         ANTLR libraries needed only for testing..
        -->
        <fileset dir="${antlr.unit.test.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
       ANTLR-only classpath.
      -->
      <path id="antlr.class.path">

        <!--
         ANTLR compile classpath.
        -->
        <path refid="antlr.compile.class.path"/>

        <!--
         ANTLR runtime classpath.
        -->
        <path refid="antlr.runtime.class.path"/>

        <!--
         ANTLR unit test classpath.
        -->
        <path refid="antlr.unit.test.class.path"/>

      </path>

      <!--
       Ant add-ins classpath.
      -->
      <path id="java.development.class.path">

        <!--
         Ant add-ins.
        -->
        <fileset dir="${java.development.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
       Java-only compilation classpath.
      -->
      <path id="java.compile.class.path">

        <!--
         Project own classes.
        -->
        <pathelement location="${classes.dir}"/>

        <!--
         Java libraries needed for compilation and at runtime.
        -->
        <fileset dir="${java.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed only for compilation.
        -->
        <fileset dir="${java.build.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed compiling the unit tests.
        -->
        <fileset dir="${java.unit.test.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         ANTLR-related libraries.
        -->
        <path refid="antlr.compile.class.path"/>

      </path>

      <!--
       Java-only runtime classpath.
      -->
      <path id="java.libonly.runtime.class.path">

        <!--
         Java libraries needed for compilation and at runtime.
        -->
        <fileset dir="${java.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed only at runtime.
        -->
        <fileset dir="${java.runtime.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         ANTLR-related libraries.
        -->
        <path refid="antlr.runtime.class.path"/>

      </path>

      <!--
       Java-only runtime classpath.
      -->
      <path id="java.runtime.class.path">

        <!--
         Project own classes.
        -->
        <pathelement location="${classes.dir}"/>

        <path refid="java.libonly.runtime.class.path"/>

      </path>

      <!--
       Java-only test classpath: unittest classpath.
      -->
      <path id="java.unit.test.class.path">

        <!--
         Project own classes.
        -->
        <pathelement location="${classes.dir}"/>

        <!--
         Java libraries needed for compilation and at runtime.
        -->
        <fileset dir="${java.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed only at runtime.
        -->
        <fileset dir="${java.runtime.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed only for compilation.
        -->
        <fileset dir="${java.build.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed only for unit tests.
        -->
        <fileset dir="${java.unit.test.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
       Compilation classpath (including aspects).
      -->
      <path id="compile.class.path">

        <!--
         Class path for compiling without aspects.
        -->
        <path refid="java.compile.class.path"/>

      </path>

      <!--
       Runtime classpath (including aspects).
      -->
      <path id="runtime.class.path">

        <!--
         Class path required at runtime without aspects.
        -->
        <path refid="java.runtime.class.path"/>

        <!--
         Project own classes.
        -->
        <pathelement location="${classes.dir}"/>

      </path>

      <!--
       Unit test classpath: compile plus runtime classpath
       (including aspects).
      -->
      <path id="unit.test.class.path">

        <!--
         Class path for testing without aspects.
        -->
        <path refid="java.unit.test.class.path"/>

        <!--
         ANTLR test libraries.
        -->
        <path refid="antlr.unit.test.class.path"/>

      </path>

<!--         END CLASSPATH DEFINITIONS SECTION                              -->

<!--         BEGIN SOURCE PATH DEFINITIONS SECTION                          -->

      <!--
       ANTLR source path.
      -->
      <path id="antlr.java.source.path">

        <!--
         Source files.
        -->
        <pathelement location="${antlr.java.src.dir}"/>

      </path>

      <!--
       ANTLR source path, plus Javadoc sources.
      -->
      <path id="antlr.java.source.and.javadoc.path">

        <!--
         Java Source files generated by ANTLR.
        -->
        <path refid="antlr.java.source.path"/>

        <!--
         Javadoc sources for packages generated from ANTLR grammars.
        -->
        <pathelement location="${antlr.javadoc.src.dir}"/>

      </path>

      <!--
       Java-only source path.
      -->
      <path id="java.source.path">

        <!--
         Source files.
        -->
        <pathelement location="${java.src.dir}"/>

        <!--
         Source files.
        -->
        <pathelement location="${jdk.X.Y.src.dir}"/>

      </path>

      <!--
       Java-only source path, plus Javadoc sources.
      -->
      <path id="java.source.and.javadoc.path">

        <!--
         Java Source files.
        -->
        <path refid="java.source.path"/>

        <!--
         Javadoc sources.
        -->
        <pathelement location="${javadoc.src.dir}"/>

      </path>

      <!--
       Source path, including aspects.
      -->
      <path id="project.source.path">

        <!--
         AspectJ source files.
        --> 
        <pathelement location="${aspectj.src.dir}"/>

        <!--
         Source files.
        -->
        <path refid="java.source.path"/>

      </path>

      <!--
       Source path, including aspects.
      -->
      <path id="project.source.and.javadoc.path">

        <!--
         Java and Javadoc source files.
        -->
        <path refid="java.source.and.javadoc.path"/>

        <!--
         AspectJ sources.
        -->
        <pathelement location="${aspectj.src.dir}"/>

      </path>

<!--        END SOURCE PATH DEFINITIONS SECTION                             -->

<!--        BEGIN CONFIGURATION PATH DEFINITIONS SECTION                    -->

      <!--
       Configuration files path.
      -->
      <path id="configuration.path">

        <!--
         Property files.
        -->
        <pathelement location="${properties.dir}"/>

        <!--
         Log4J configuration folder.
        -->
        <pathelement location="${log4j.dir}"/>

        <!--
         XML configuration files are placed in this folder.
        -->
        <pathelement location="${xml.dir}"/>

        <!--
         Internationalized messages.
        -->
        <pathelement location="${i18n.dir}"/>

      </path>

     </target>

<!--          END CONFIGURATION PATH DEFINITIONS SECTION                    -->

     <!--
      Checks all defined conditions.
      @depends init.paths to ensure all path references are defined.
      @return some properties with the results of the checks.
      -->
      <target
        name="init.conditions"
        depends="init.paths"
        description="Checks all defined conditions.">

<!--          BEGIN OS CHECK SECTION                                        -->

        <!--
         Checks if the operating system is Unix.
        -->
        <condition property="unix">
          <os family="unix"/>
        </condition>

        <!--
         Checks if the operating system is Microsoft's.
        -->
        <condition property="windows">
          <or>
            <os family="windows"/>
            <os family="dos"/>
          </or>
        </condition>

<!--          END OS CHECK SECTION                                          -->

<!--          BEGIN REQUIRED LIBRARIES/FILES/FOLDERS CHECK SECTION          -->

        <!--
         Checks if support for jdk version-specific code is required.
        -->
        <available
          property="specific.jdk.version.files.available"
          file="${jdk.X.Y.src.dir}"/>

        <!--
         Checks if antlr.jar is available.
        -->
        <available
          classname="antlr.ANTLRParser"
          property="antlr.jar.available"
          classpathref="antlr.class.path"/>

        <!--
         Checks if junit.jar is available.
        -->
        <available
          classname="junit.framework.TestCase"
          property="junit.jar.available"
          classpathref="unit.test.class.path"/>

        <!--
         Checks if optional.jar is available.
        -->
        <available
          classname="org.apache.tools.ant.taskdefs.optional.ANTLR"
          property="optional.jar.available"
          classpathref="unit.test.class.path"/>

        <!--
         Checks if jdktools.jar is available.
        -->
        <available
          classname="com.sun.tools.javadoc.DocletInvoker"
          property="jdktools.jar.available">

          <classpath>

            <!--
             Tries to find it in the folder where the JDK tools
             are located.
            -->
            <path location="${java.home}/lib"/>

          </classpath>

        </available>

        <!--
         Checks if aspectjrt.jar is available.
        -->
        <available
          classname="org.aspectj.lang.JoinPoint"
          property="aspectjrt.jar.available"
          classpathref="java.development.class.path"/>

        <!--
         Checks if aspectjtools.jar is available.
        -->
        <available
          classname="org.aspectj.asm.AsmManager"
          property="aspectjtools.jar.available"
          classpathref="java.development.class.path"/>

        <!--
         Checks if junitdoclet.jar is available.
        -->
        <available
          classname="com.objectfab.tools.junitdoclet.JUnitDoclet"
          property="junitdoclet.jar.available"
          classpathref="java.development.class.path"/>

        <!--
         Checks if junitdoclet-acmsl.jar is available.
        -->
        <available
          classname="org.acmsl.junitdoclet.AcmslNamingStrategy"
          property="junitdoclet-acmsl.jar.available"
          classpathref="java.development.class.path"/>

        <!--
         Checks if jalopy-ant.jar is available.
        -->
        <available
          classname="de.hunsicker.jalopy.plugin.ant.AntPlugin"
          property="jalopy-ant.jar.available"
          classpathref="java.development.class.path"/>

        <!--
         Checks if jalopy.jar is available.
        -->
        <available
          classname="de.hunsicker.jalopy.Jalopy"
          property="jalopy.jar.available"
          classpathref="java.development.class.path"/>

<!--         END REQUIRED LIBRARIES/FILES/FOLDERS CHECK SECTION             -->

    </target>

<!--         BEGIN REQUIRED LIBRARIES/FILES/FOLDERS CHECK SECTION           -->

    <!--
     Ensures all properties, folder, paths, etc. are correctly defined.
     @depends init.conditions to ensure all checks have been performed.
     @return the execution of all initial tasks.
    -->
   <target
       name="init"
       depends="init.conditions"
       description="Ensures all properties, folder, paths, etc. are
                                correctly defined."/>

    <!--
     Checks if the <i>antlr.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless antlr.jar.available exists, the process will fail.
     @param antlr.jar.available the flag that indicates if such
            jar is present.
     @param antlr.jar the location of the <i>ANTLR</i> jar.
     @calls fail to stop the process if <i>antlr.jar</i> is not present.
     @return the execution ends if the <i>antlr.jar</i> is not available.
    -->
    <target
        name="antlr.jar.available"
        depends="init.properties" 
        unless="antlr.jar.available"
        description="Checks if the antlr.jar is present.">

        <!--
         Contains all ANTLR classpath.
        -->
        <property
            name="antlr-classpath"
            refid="antlr.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting antlr.jar at ${antlr-classpath}.
                     The process stops because ANTLR library is
                     mandatory."/>

    </target>


    <!--
     Checks if the <i>antlrrt.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless antlrrt.jar.available exists, the process will fail.
     @param antlrrt.jar.available the flag that indicates if such
            jar is present.
     @param antlr.jar the location of the <i>ANTLR</i> runtime jar.
     @calls fail to stop the process if <i>antlrrt.jar</i> is not present.
     @return the execution ends if the <i>antlrrt.jar</i> is not available.
    -->
    <target
        name="antlrrt.jar.available"
        depends="init.properties" 
        unless="antlrrt.jar.available"
        description="Checks if the antlrrt.jar is present.">

        <!--
         Contains all ANTLR runtime classpath.
        -->
        <property
            name="antlr-runtime-classpath"
            refid="antlr.runtime.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting antlrrt.jar at ${antlr-runtime-classpath}.
                     The process stops because ANTLR runtime library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>junit.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless junit.jar.available exists, the process will fail.
     @param junit.jar the location of the <i>JUnit</i> jar.
     @calls fail to stop the process if <i>junit.jar</i> is not present.
     @return the execution ends if the <i>junit.jar</i> is not available.
    -->
    <target
        name="junit.jar.available"
        depends="init" 
        unless="junit.jar.available"
        description="Checks if the junit.jar is present.">

        <!--
         Contains the classpath used to test.
        -->
        <property
            name="unit-test-classpath"
            refid="unit.test.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting junit.jar at ${test-classpath}.
                     The process stops because JUnit runtime library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>optional.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless optional.jar.available exists, the process will fail.
     @param optional.jar the location of the <i>optional</i> jar.
     @calls fail to stop the process if <i>optional.jar</i> is not present.
     @return the execution ends if the <i>optional.jar</i> is not available.
    -->
    <target
        name="optional.jar.available"
        depends="init" 
        unless="optional.jar.available"
        description="Checks if the optional.jar is present.">

        <!--
         Contains the classpath used to test.
        -->
        <property
            name="unit-test-classpath"
            refid="unit.test.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting optional.jar at ${test-classpath}.
                     The process stops because JUnit Task is mandatory."/>

    </target>

    <!--
     Checks if the <i>jdktools.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless jdktools.jar.available exists, the process will fail.
     @param jdktools.jar.available the flag that indicates if such
            jar is present.
     @param jdktools.jar the location of the <i>JDK</i> tools.
     @calls fail to stop the process if <i>jdktools.jar</i> is not present.
     @return the execution ends if the <i>jdktools.jar</i> is not available.
    -->
    <target
        name="jdktools.jar.available"
        depends="init.properties" 
        unless="jdktools.jar.available"
        description="Checks if the jdktools.jar is present.">

        <!--
         Contains all development add-ins classpath.
        -->
        <property
            name="jdktools-classpath"
            refid="java.development.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="AspectJ expects tools.jar at ${jdktools-classpath}.
                     The process stops because AspectJ runtime library is
                     mandatory."/>
    </target>

    <!--
     Checks if the <i>aspectjtools.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless aspectjtools.jar.available exists, the process will fail.
     @param aspectjtools.jar.available the flag that indicates if such
            jar is present.
     @param aspectjtools.jar the location of the <i>AspectJ</i> tools.
     @calls fail to stop the process if <i>aspectjtools.jar</i> is not present.
     @return the execution ends if the <i>aspectjtools.jar</i> is not
             available.
    -->
    <target
        name="aspectjtools.jar.available"
        depends="init" 
        unless="aspectjtools.jar.available"
        description="Checks if the aspectjtools.jar is present.">

        <!--
         Contains all development add-ins classpath.
        -->
        <property
            name="aspectjtools-classpath"
            refid="java.development.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting aspectjtools.jar at
                     ${aspectjtools-classpath}.
                     The process stops because AspectJ runtime library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>aspectjrt.jar</i> is present.
     @depends init to initialize all required properties.
     @unless aspectjrt.jar.available exists, the process will fail.
     @param aspectjrt.jar.available the flag that indicates if such
            jar is present.
     @param aspectjrt.jar the location of the <i>AspectJ</i> runtime jar.
     @calls fail to stop the process if <i>aspectjrt.jar</i> is not present.
     @return the execution ends if the <i>aspectjrt.jar</i> is not available.
    -->
    <target
        name="aspectjrt.jar.available"
        depends="init" 
        unless="aspectjrt.jar.available"
        description="Checks if the aspectjrt.jar is present.">

        <!--
         Contains all development add-ins classpath.
        -->
        <property
            name="aspectjrt-classpath"
            refid="java.development.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting aspectjrt.jar at ${aspectjrt-classpath}.
                     The process stops because AspectJ runtime library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>junitdoclet.jar</i> is present.
     @depends init to initialize all required properties.
     @unless junitdoclet.jar.available exists, the process will fail.
     @param JUnitDoclet.jar the location of the <i>JUnitDoclet</i> jar.
     @calls fail to stop the process if <i>JUnitDoclet.jar</i> is not present.
     @return the execution ends if the <i>JUnitDoclet.jar</i> is not available.
    -->
    <target
        name="junitdoclet.jar.available"
        depends="init" 
        unless="junitdoclet.jar.available"
        description="Checks if the junitdoclet.jar is present.">

        <!--
         Contains all JUnitDoclet classpath.
        -->
        <property
            name="junitdoclet-classpath"
            refid="java.development.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting junitdoclet.jar and junitdoclet-acmsl.jar
                     at ${junitdoclet-classpath}.
                     The process stops because JUnitDoclet library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>junitdoclet-acmsl.jar</i> is present.
     @depends init to initialize all required properties.
     @unless junitdoclet-acmsl.jar.available exists, the process will fail.
     @param junitdoclet-acmsl.jar the location of the <i>ACMSL</i>
            JUnitDoclet customizations.
     @calls fail to stop the process if <i>junitdoclet-acmsl.jar</i> is not present.
     @return the execution ends if the <i>junitdoclet-acmsl.jar</i> is not available.
    -->
    <target
        name="junitdoclet-acmsl.jar.available"
        depends="init" 
        unless="junitdoclet-acmsl.jar.available"
        description="Checks if the junitdoclet-acmsl.jar is present.">

        <!--
         Contains all JUnitDoclet-ACMSL classpath.
        -->
        <property
            name="junitdoclet-acmsl-classpath"
            refid="java.development.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting junitdoclet-acmsl.jar at ${junitdoclet-acmsl-classpath}.
                     The process stops because ACM-SL's JUnitDoclet customizations
                     are mandatory."/>

    </target>

    <!--
     Checks if the <i>jalopy.jar</i> is present.
     @depends init to initialize all required properties.
     @unless jalopy.jar.available exists, the process will fail.
     @param jalopy.jar the location of the <i>jalopy</i> jar.
     @calls fail to stop the process if <i>jalopy.jar</i> is not present.
     @return the execution ends if the <i>jalopy.jar</i> is not available.
    -->
    <target
        name="jalopy.jar.available"
        depends="init" 
        unless="jalopy.jar.available"
        description="Checks if the jalopy.jar is present.">

        <!--
         Contains all Jalopy classpath.
        -->
        <property
            name="jalopy-classpath"
            refid="java.compile.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting jalopy.jar and jalopy-ant.jar
                     at ${jalopy-classpath}.
                     The process stops because Jalopy library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>project.jar</i> file is present.
     @depends init.properties to initialize all required properties.
     @param project.jar the expected location of the <i>project.jar</i> file.
     @return a property called "project.jar.available", indicating
     whether the file exists or not.
    -->
    <target
      name="check.project.jar.available"
      depends="init.properties"
      description="Checks if project.jar file is present.">

      <echo message="Checking ${project.jar.file}"/>

      <!--
       Checks if the project's jar is available.
      -->
      <available
        property="project.jar.available"
        file="${project.jar.file}"
        type="file"/>

    </target>

    <!--
     Stops the process unless the <i>project.jar</i> file is present.
     @depends check.project.jar to check whether the project.jar exists.
     @unless project.jar exists, the process will fail.
     @param project.jar.available the flag that indicates if such file is
            present.
     @param project.jar the expected location of the <i>project.jar</i> file.
     @calls fail to stop the process if <i>project.jar</i> is not present.
     @return the execution ends if the <i>project.jar</i> is not available.
    -->
    <target
      name="project.jar.available"
      depends="check.project.jar.available" 
      unless="project.jar.available"
      description="Stops the process unless the project.jar file is present.">

      <!--
       Indicates the error message and exits.
      -->
      <fail message="Please create a jar file using jar target,
                     or via ContractChecker.
                     The process cannot continue without the jar file
                     of the project."/>

    </target>

<!--         END REQUIRED LIBRARIES/FILES/FOLDERS CHECK SECTION             -->

  <!--
   Drops the database completely.
   @depends init.paths to initialize all required paths.
   @depends drop.constraints to drop the constraints.
   @depends drop.permissions to drop the permissions.
   @depends pre.statements to execute special pre statements.
   @depends drop.views to drop the views.
   @depends drop.schema to drop the schema.
   @return the complete deletion of the database.
  -->
  <target
    name="drop"
    depends="init.paths,drop.constraints,drop.permissions,pre.statements,drop.views,drop.schema"
    description="Drops the database."/>

  <!--
   Drops the schema completely in MySQL.
   @depends init.paths to initialize all required paths.
   @depends drop.constraints to drop the constraints.
   @depends drop.permissions to drop the permissions.
   @depends pre.statements to execute special pre statements.
   @depends drop.views to drop the views.
   @depends drop.schema to drop the schema.
   @return the complete deletion of the database.
  -->
  <target
    name="drop.mysql"
    depends="init.paths,drop.constraints,drop.permissions,pre.statements,drop.views,drop.schema"
    description="Drops the MySQL database.">

    <antcall target="drop">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Drops the schema completely in Oracle.
   @depends init.paths to initialize all required paths.
   @depends drop.constraints to drop the constraints.
   @depends drop.permissions to drop the permissions.
   @depends pre.statements to execute special pre statements.
   @depends drop.views to drop the views.
   @depends drop.schema to drop the schema.
   @return the complete deletion of the database.
  -->
  <target
    name="drop.oracle"
    depends="init.paths,drop.constraints,drop.permissions,pre.statements,drop.views,drop.schema"
    description="Drops the Oracle database.">

    <antcall target="drop">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Drops the database constraints.
   @depends init.paths to initialize all required paths.
   @return the complete deletion of the constraints.
  -->
  <target
    name="drop.constraints"
    depends="init.paths"
    description="Drops the database constraints."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-10-constraintDrops.sql"/>

    </sql>

  </target>

  <!--
   Drops the database constraints in MySQL.
   @return the complete deletion of the constraints.
  -->
  <target
    name="drop.constraints.mysql"
    depends="init.paths"
    description="Drops the database constraints in MySQL.">

    <antcall target="drop.constraints">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Drops the database constraints in Oracle.
   @return the complete deletion of the constraints.
  -->
  <target
    name="drop.constraints.oracle"
    depends="init.paths"
    description="Drops the database constraints in Oracle.">

    <antcall target="drop.constraints">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Drops the database permissions.
   @depends init.paths to initialize all required paths.
   @return the complete deletion of the permissions.
  -->
  <target
    name="drop.permissions"
    depends="init.paths"
    description="Drops the database permissions."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-20-permissionsDrops.sql"/>

    </sql>

  </target>

  <!--
   Drops the database permissions in MySQL.
   @return the complete deletion of the permissions.
  -->
  <target
    name="drop.permissions.mysql"
    description="Drops the database permissions in MySQL.">

    <antcall target="drop.permissions">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Drops the database permissions in Oracle.
   @return the complete deletion of the permissions.
  -->
  <target
    name="drop.permissions.oracle"
    description="Drops the database permissions in Oracle.">

    <antcall target="drop.permissions">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Executes the special pre statements.
   @depends init.paths to initialize all required paths.
   @return the execution of the special pre statements.
  -->
  <target
    name="pre.statements"
    depends="init.paths"
    description="Executes the special pre statements."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-30-specialPreStatements.sql"/>

    </sql>

  </target>

  <!--
   Executes the special pre statements in MySQL.
   @return the execution of the special pre statements.
  -->
  <target
    name="pre.statements.mysql"
    description="Executes the special pre statements in MySQL.">

    <antcall target="pre.statements">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Executes the special pre statements in Oracle.
   @return the execution of the special pre statements.
  -->
  <target
    name="pre.statements.oracle"
    description="Executes the special pre statements in Oracle.">

    <antcall target="pre.statements">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Dops the views.
   @depends init.paths to initialize all required paths.
   @return the deletion of the views.
  -->
  <target
    name="drop.views"
    depends="init.paths"
    description="Drops the views."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-40-viewDrops.sql"/>

    </sql>

  </target>

  <!--
   Dops the views in MySQL.
   @return the deletion of the views.
  -->
  <target
    name="drop.views.mysql"
    description="Drops the views in MySQL.">

    <antcall target="drop.views">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Dops the views in Oracle.
   @return the deletion of the views.
  -->
  <target
    name="drop.views.oracle"
    description="Drops the views in Oracle.">

    <antcall target="drop.views">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Drops the schema.
   @depends init.paths to initialize all required paths.
   @return the deletion of the schema.
  -->
  <target
    name="drop.schema"
    depends="init.paths"
    description="Drops the schema."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-45-schemaDrops.sql"/>

    </sql>

  </target>

  <!--
   Drops the schema in MySQL.
   @return the deletion of the schema.
  -->
  <target
    name="drop.schema.mysql"
    description="Drops the schema in MySQL.">

    <antcall target="drop.schema">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Drops the schema in Oracle.
   @return the deletion of the schema.
  -->
  <target
    name="drop.schema.oracle"
    description="Drops the schema in Oracle.">

    <antcall target="drop.schema">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Deploys the database schema into the database vendor.
   @depends init.paths to define required paths.
   @depends deploy.schema to create the schema.
   @depends deploy.views to create the views.
   @depends post.statements to execute special post statements.
   @depends deploy.permissions to create the permissions.
   @depends deploy.inserts to execute the inserts.
   @depends deploy.constraints to create the constraints.
   @return the creation of the schema.
  -->
  <target
    name="create"
    depends="init.paths,deploy.schema,deploy.views,post.statements,deploy.permissions,deploy.inserts,deploy.constraints"
    description="Deploys the database schema into the database vendor."
    if="vendor.specified"/>

  <!--
   Deploys the database schema into MySQL.
   @return the creation of the schema.
  -->
  <target
    name="create.mysql"
    description="Deploys the database schema into MySQL.">

    <antcall target="create">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Deploys the database schema into Oracle.
   @return the creation of the schema.
  -->
  <target
    name="create.oracle"
    description="Deploys the database schema into Oracle.">

    <antcall target="create">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Creates the schema.
   @depends init.paths to define required paths.
   @return the creation of the schema.
  -->
  <target
    name="deploy.schema"
    depends="init.paths"
    description="Creates the schema."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-50-schemaCreate.sql"/>

    </sql>

  </target>

  <!--
   Creates the schema in MySQL.
   @return the creation of the schema.
  -->
  <target
    name="deploy.schema.mysql"
    description="Creates the schema in MySQL.">

    <antcall target="deploy.schema">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Creates the schema in Oracle.
   @return the creation of the schema.
  -->
  <target
    name="deploy.schema.oracle"
    description="Creates the schema in Oracle.">

    <antcall target="deploy.schema">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Creates the views.
   @depends init.paths to define required paths.
   @return the creation of the views.
  -->
  <target
    name="deploy.views"
    depends="init.paths"
    description="Creates the views."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-55-viewCreate.sql"/>

    </sql>

  </target>

  <!--
   Creates the views in MySQL.
   @return the creation of the views.
  -->
  <target
    name="deploy.views.mysql"
    description="Creates the views in MySQL.">

    <antcall target="deploy.views">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Creates the views in Oracle.
   @return the creation of the views.
  -->
  <target
    name="deploy.views.oracle"
    description="Creates the views in Oracle.">

    <antcall target="deploy.views">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Executes the special post statements.
   @depends init.paths to define required paths.
   @return the execution of the special post statements.
  -->
  <target
    name="post.statements"
    depends="init.paths"
    description="Executes the special post statements."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-60-specialPostStatements.sql"/>

    </sql>

  </target>

  <!--
   Executes the special post statements in MySQL.
   @return the execution of the special post statements.
  -->
  <target
    name="post.statements.mysql"
    description="Executes the special post statements in MySQL.">

    <antcall target="post.statements">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Executes the special post statements in Oracle.
   @return the execution of the special post statements.
  -->
  <target
    name="post.statements.oracle"
    description="Executes the special post statements in Oracle.">

    <antcall target="post.statements">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Creates the permissions.
   @depends init.paths to define required paths.
   @return the creation of the permissions.
  -->
  <target
    name="deploy.permissions"
    depends="init.paths"
    description="Creates the permissions."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-70-permissionsCreate.sql"/>

    </sql>

  </target>

  <!--
   Creates the permissions in MySQL.
   @return the creation of the permissions.
  -->
  <target
    name="deploy.permissions.mysql"
    description="Creates the permissions in MySQL.">

    <antcall target="deploy.permissions">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Creates the permissions in Oracle.
   @return the creation of the permissions.
  -->
  <target
    name="deploy.permissions.oracle"
    description="Creates the permissions in Oracle.">

    <antcall target="deploy.permissions">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Inserts the static data.
   @depends init.paths to define required paths.
   @return the creation of the permissions.
  -->
  <target
    name="deploy.inserts"
    depends="init.paths"
    description="Inserts the static data."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-80-tableInserts.sql"/>

    </sql>

  </target>

  <!--
   Inserts the static data in MySQL.
   @return the creation of the permissions.
  -->
  <target
    name="deploy.inserts.mysql"
    description="Inserts the static data in MySQL.">

    <antcall target="deploy.inserts">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Inserts the static data in Oracle.
   @return the creation of the permissions.
  -->
  <target
    name="deploy.inserts.oracle"
    description="Inserts the static data in Oracle.">

    <antcall target="deploy.inserts">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   Creates the constraints.
   @depends init.paths to define required paths.
   @return the creation of the constraints.
  -->
  <target
    name="deploy.constraints"
    depends="init.paths"
    description="Creates the constraints."
    if="vendor.specified">

    <sql
      driver="${rdb.driver}"
      url="${rdb.url}"
      userid="${rdb.username}"
      password="${rdb.password}"
      classpathref="java.development.class.path">

      <transaction
        src="${basedir}/${base.deploy.script.folder}/${rdb.vendor.deploy.script.subfolder}/${project.name.rdb.deploy.script.prefix}-90-constraintsCreate.sql"/>

    </sql>

  </target>

  <!--
   Creates the constraints in MySQL.
   @return the creation of the constraints.
  -->
  <target
    name="deploy.constraints.mysql"
    description="Creates the constraints in MySQL.">

    <antcall target="deploy.constraints">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>

  <!--
   Creates the constraints in Oracle.
   @return the creation of the constraints.
  -->
  <target
    name="deploy.constraints.oracle"
    description="Creates the constraints in Oracle.">

    <antcall target="deploy.constraints">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>

  <!--
   (Re)Deploys the database schema completely into the database vendor.
   @depends deploy.clean to drop existing schema.
   @return the complete (re)creation of the schema.
  -->
  <target
    name="deploy"
    depends="drop, create"
    description="(Re)Deploys the database schema completely into the database vendor."
    if="vendor.specified">

    <buildnumber file="${vendor}-deploy.number"/>

  </target>

  <!--
   (Re)Deploys the database schema completely into MySQL.
   @return the complete (re)creation of the schema in MySQL.
  -->
  <target
    name="deploy.mysql"
    description="Deploys the database schema into MySQL">

    <antcall target="deploy">
      <param name="vendor" value="mysql"/>
    </antcall>

  </target>
    
  <!--
   (Re)Deploys the database schema completely into Oracle.
   @return the complete (re)creation of the schema in Oracle.
  -->
  <target
    name="deploy.oracle"
    description="Deploys the database schema into Oracle">

    <antcall target="deploy">
      <param name="vendor" value="oracle"/>
    </antcall>

  </target>
    
  <!--
   Debugs the deployment process.
   @param target the target to call.
   @depends init.paths to set-up the environment.
   @calls exec to execute ant externally.
   @return a jvm waiting to be debugged.
  -->
  <target
    name="debug"
    depends="init.paths"
    description="Debugs the deployment process.">

    <property environment="env"/>

    <exec executable="ant" dir="${basedir}/sql">
      <env key="ANT_OPTS" value="-Xdebug -Xrunjdwp:transport=dt_socket,address=4000,server=y,suspend=y"/>
      <arg line="-f ${basedir}/src/toolconf/queryj/deploy.xml ${env.ANT_TARGET}"/>

    </exec>

  </target>

  <!--
   Fails unless the vendor-specific settings are defined.
  -->
  <target
    name="check.vendor.settings.available"
    description="Loads vendor-specific settings.">

    <fail unless="vendor.specified">src/toolconf/queryj/**vendor**.properties" not found</fail>
    <fail unless="rdb.driver">rdb.driver setting not defined on src/toolconf/queryj/${vendor}.properties</fail>
    <fail unless="rdb.url">rdb.url setting not defined on src/toolconf/queryj/${vendor}.properties</fail>
    <fail unless="rdb.username">rdb.username setting not defined on src/toolconf/queryj/${vendor}.properties</fail>
    <fail unless="rdb.password">rdb.password setting not defined on src/toolconf/queryj/${vendor}.properties</fail>
    <fail unless="rdb.vendor.deploy.script.subfolder">rdb.vendor.deploy.script.subfolder setting not defined on src/toolconf/queryj/${vendor}.properties</fail>

  </target>

</project>
