<!--
 @license
                        QueryJ

    Copyright (C) 2001-2006  Jose San Leandro Armend&aacute;riz
                             chous@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: jose.sanleandro@acm-sl.com
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecaba&ntilde;as
                    Boadilla del monte
                    28660 Madrid
                    Spain

    This library uses an external API to retrieve version information at
    runtime.
    So far I haven't released such API as a project itself, but you should be
    able to download it from the web page where you got this source code.

 @header
  
   Filename: $RCSfile$

   Author: Jose San Leandro Armendariz

   Description: Describes the design of QueryJ task, that is,
                how it's designed to be used from within an Ant build file.

-->

<!--
 Describes the design of QueryJ task, that is,
 how it's designed to be used from within an Ant build file.
 @author <a href="mailto:jsanleandro@yahoo.es">Jose San Leandro Armendariz</a>
 @version $Revision$
 @default description
-->
<project name="queryj" default="description" basedir="../../..">

    <!--
     Displays the build script purpose, and the folder structure required.
     @return the output of the described message.
    -->
    <target
      name="description"
      description="Displays the build script purpose.">

      <echo>
        This script is provided to show how to configure QueryJ
        for your particular needs.
      </echo>
    </target>

    <!--
     Defines the required variables in all tasks.
     @calls property to initialize the required properties.
     @calls path to define each one of the class and source paths.
     @return the asignment of correct values to the required properties.
    -->
    <target name="init.properties">

      <!--
       Ignores system classpath to make sure we have full control over
       classpaths used.
      -->
      <property name="build.sysclasspath" value="ignore"/>

      <!--
       Libraries base folder.
      -->
      <property name="lib.dir" value="dependencies/lib/java"/>

      <!--
       Runtime libraries base folder.
      -->
      <property name="runtime.lib.dir" value="${lib.dir}/runtime"/>

      <!--
       Unit tests libraries base folder.
      -->
      <property name="unittests.lib.dir" value="${lib.dir}/unittest"/>

      <!--
       Compilation and distribution base folder.
      -->
      <property name="dist.dir" value="dist"/>

      <!--
       Classes folder.
      -->
      <property name="classes.dir" value="${dist.dir}/classes"/>

      <!--
       Using externally-defined properties.
      -->
      <property file="src/toolconf/ant/queryj.properties"/>

      <!--
       Defines the classpath to use for executing QueryJ.
      -->
      <path id="queryj.classpath">

        <pathelement location="${classes.dir}"/>

        <fileset dir="${lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <fileset dir="${runtime.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <fileset dir="${runtime.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed compiling the unit tests.
        -->
        <fileset dir="${unittests.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
        Defines the classpath to use for declaring QueryJ.
      -->
      <path id="queryj.declaration.classpath">

        <path refid="queryj.classpath"/>

      </path>

      <!--
       Defines the output folder of the classes generated by QueryJ.
      -->
      <property name="queryj.outputdir" value="output"/>

      <!--
       Defines where to store the compiled classes for the generated sources.
      -->
      <property name="queryj.classes.outputdir" value="output-classes"/>

      <!--
       Defines where to store the Javadoc documentation for the generated sources.
      -->
      <property name="queryj.javadoc.outputdir" value="output-javadoc"/>

      <!--
       Defines the classpath to use for executing QueryJ unit tests.
      -->
      <path id="unittests.queryj.classpath">

        <path refid="queryj.classpath"/>

        <fileset dir="${unittests.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <pathelement location="${queryj.classes.outputdir}"/>

      </path>

    </target>

    <!--
     Declares QueryJ task.
     @return the correctly declared queryj task.
    -->
    <target name="declare.queryj.task">

      <description>Declares QueryJ task</description>

      <property name="qj.cp" refid="queryj.classpath"/>

      <echo>Using classpath:</echo>
      <echo>${qj.cp}</echo>
      <!--
       Defines the <i>QueryJ</i> task.
      -->
      <taskdef
        name="queryj"
        classname="org.acmsl.queryj.tools.QueryJTask"
        classpathref="queryj.classpath"/>

    </target>

    <!--
     Executes QueryJ.
     @param queryj.driver the JDBC driver.
     @param queryj.url the JDBC url.
     @param queryj.username the JDBC username.
     @param queryj.password the JDBC password.
     @param queryj.catalog the database catalog.
     @param queryj.schema the database schema.
     @param queryj.classpath the classpath needed to
            execute QueryJ.
     @param queryj.outputdir the output dir where the files
            will be generated.
     @return the result of executing QueryJ.
    -->
    <target
      name="queryj"
      depends="init.properties, clean, declare.queryj.task"
      description="Executes QueryJ">

      <!--
       Executes QueryJ defining all its attributes and
       content.
      -->
      <queryj
        driver="${queryj.driver}"
        url="${queryj.url}"
        username="${queryj.username}"
        password="${queryj.password}"
        catalog="${queryj.catalog}"
        schema="${queryj.schema}"
        repository="${queryj.repository}"
        package="com.foo.bar"
        classpathref="queryj.classpath"
        outputdir="${queryj.outputdir}"
        extractFunctions="${queryj.extractfunctions}"
        extractProcedures="${queryj.extractprocedures}"
        jndiDataSource="java:comp/env/jdbc/queryj"
        generateMockDAOImplementation="false"
        generateXMLDAOImplementation="false"
        customSqlModel="xml"
        sqlXmlFile="src/toolconf/queryj/sql.xml">

        <!--externally-managed-fields>

          <field
            name="ADDRESSID"
            table-name="ADDRESSES"
            keyword="testseq.nextval"/>

        </externally-managed-fields-->

        <!--
        <tables>

          <table name="userscopy"/>

        </tables>

        <tables>

          <table name="address">

            <field name="addressid" type="integer" pk="yes"/>

            <field name="address" type="varchar"/>

            <field name="useridfk" type="integer">

              <fk table="user" field="userid"/>

            </field>

          </table>

          <table name="user">

            <field name="userid" type="integer" pk="yes"/>

            <field name="name" type="varchar"/>

          </table>

        </tables>
        -->

      </queryj>

    </target>

    <!--
     Cleans any previously generated code.
     @param queryj.outputdir the folder where the sources
            are generated.
     @return the confidence that queryj.outputdir is empty.
    -->
    <target
      name="clean"
      depends="init.properties"
      description="Cleans any previously generated code.">

      <!--
       Delete the output folder.
      -->
      <delete dir="${queryj.outputdir}"/>

      <!--
       Delete the output folder of the generated classes.
      -->
      <delete dir="${queryj.classes.outputdir}"/>

      <!--
       Create them again.
      -->
      <mkdir dir="${queryj.outputdir}"/>

      <mkdir dir="${queryj.classes.outputdir}"/>

    </target>

    <!--
     Compiles the source code generated by QueryJ.
     @param queryj.classpath the classpath.
     @param queryj.outputdir the location of
     the generated source files.
     @return the compiled generated classes.
    -->
    <target
      name="compile"
      depends="init.properties"
      description="Compiles the source code generated by QueryJ">

      <!--
       Copies all templates from QueryJ to the output folder.

      <copy todir="${queryj.outputdir}" flatten="true">

        <fileset dir="${templates.dir}">

          <include name="**/*.java.template"/>

        </fileset>

        <mapper type="regexp" from="^(.*)\.java.template$$" to="\1.java"/>

      </copy>
      -->

      <!--
       Creates the output folder for the compiled classes if necessary.
      -->
      <mkdir dir="${queryj.classes.outputdir}"/>

      <!--
       Compile the java code from ${java.source.path} into ${classes.dir}.
      -->
      <javac
        destdir="${queryj.classes.outputdir}"
        debug="on"
        encoding="ISO-8859-1">

        <src location="${queryj.outputdir}"/>

        <classpath refid="queryj.classpath"/>

      </javac>

      <!-- copies any property or resource to the output folder -->
      <copy todir="${queryj.outputdir}" flatten="false">

        <fileset dir="${queryj.outputdir}">

          <include name="**/*.properties"/>
          <include name="**/*.xml"/>

        </fileset>

      </copy>

    </target>

    <!--
     Executes the unit tests for the generated classes.
    -->
    <target
      name="unit.tests"
      depends="compile"
      description="Executes the unit tests for the generated classes">

      <java
        fork="yes"
        classname="junit.textui.TestRunner"
        taskname="JUnit"
        failonerror="true">

        <classpath refid="unittests.queryj.classpath"/>

        <arg value="unittests.com.foo.bar.BarSuite"/>

      </java>

    </target>

    <!--
     Debugs defined unit tests.
     @depends compile to make sure the classes are compiled.
     @param project.base.suite the JUnit suite that contains all tests.
     @param classpath the classpath.
     @param project.build the project compiled classes.
     @calls java to invoke the JUnit framework.
     @return the debugging environment.
    -->
    <target
        name="debug.unit.tests"
        depends="compile"
        description="DEbugs defined unit tests.">

        <property name="unit-test-path" refid="unittests.queryj.classpath"/>

        <!--
         Debug unit tests.
        -->
        <exec executable="java">
          <arg line="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y -cp ${unit-test-path} junit.textui.TestRunner unittests.com.foo.bar.BarSuite"/>
        </exec>

    </target>

    <!--
     Creates the javadoc for the generated files.
    -->
    <target
      name="javadoc"
      depends="compile"
      description="Creates the javadoc for the generated files">

      <!--
       Creates the javadoc destination directory.
      -->
      <mkdir dir="${queryj.javadoc.outputdir}"/>

      <!--
       Generates the Javadoc documentation.
      -->
      <javadoc
        version="yes"
        author="yes"
        destdir="${queryj.javadoc.outputdir}"
        doctitle="${queryj.repository} API"
        windowtitle="${queryj.repository} API"
        access="public"
        packagenames="*"
        defaultexcludes="no"
        classpathref="unittests.queryj.classpath"
        encoding="ISO-8859-1">

        <sourcepath>

          <pathelement location="${queryj.outputdir}"/>

        </sourcepath>

      </javadoc>

    </target>

    <!--
     Debugs QueryJ execution.
     @depends init.properties to make sure the environment is defined.
     @calls ant to invoke QueryJ via Ant.
     @return the debugging environment.
    -->
    <target
      name="debug.queryj"
      depends="init.properties"
      description="Debugs QueryJ execution.">

      <!--
       Debug QueryJ.
      -->
      <exec executable="ant" dir="${basedir}/src/toolconf/queryj">
        <env key="ANT_OPTS" value="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y"/>
        <arg line="-f ${basedir}/src/toolconf/ant/queryj.xml queryj"/>
      </exec>

    </target>

</project>
