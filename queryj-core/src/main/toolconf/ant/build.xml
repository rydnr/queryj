<!--
 @license
                 ACM-SL Ant-based build script

    Copyright (C) 2002-2006  Jose San Leandro Armend&aacute;riz
                             chous@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: jose.sanleandro@acm-sl.com
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecaba&ntilde;as
                    Boadilla del monte
                    28660 Madrid
                    Spain

 @header
  
   Filename: build.xml

   Author: Jose San Leandro Armendariz

   Description: Defines the steps and options available for building the
                project using Ant. Additional specific properties can be
                specified in the <i>build.properties</i> file.

  $Id$
-->

<!--
 Defines the steps and options available for building projects using Ant.
 Additional specific properties can be specified in the
 <i>build.properties</i> file.
 Projects supported by this script have the following structure:

  project-base-folder/
    conf/
      web-inf/
        web.xml
        [..][/]
      properties/
        [..][/]
      log4j/
        log4j.xml
        [..][/]
      i18n/
        [..][/]
      thirdparty/
        [..][/]
      xml/
        [..][/]
      [..]
    dist/
      build/
        [..][/]
      classes/
        [..][/]
      [..]
    docs/
      autogenerated/
        antlr/
          [..][/]
        javadoc/
          overview.html
          [..][/]
      design/
        [..][/]
      images/
        [..][/]
      license/
        [..][/]
      [..][/]
    engineering/
      psp/
        [..][/]
      notes/
        [..][/]
      [..]
    dependencies/
      lib/
        antlr/
          build/
            [..]
          runtime/
            [..]
          [..]
        java/
          build/
            [..]
          development/
            [..]
          runtime/
            [..]
          unittest/
            [..]
          [..]
      tld/
        [..]
    src/
      antlr/
        java/
          [..][/]
        jdkX.X/
          [..][/]
        javadoc/
          overview.html
          [..][/]
        input/
          [..][/]
        output/
          [..][/]
        [..][/]
      aspectj/
        aspects/
          [..][/]
        [..]
      css/
        [..][/]
      images/
        [..][/]
      html/
        [..][/]
      java/
        unittests/
          [..][/]
        [functionaltests/]
        [..][/]
      jsp/
        [..][/]
      javadoc/
        overview.html
        [..][/]
      shellscripts
        [..][/]
      toolconf/
        ant/
          build.properties
          build.xml
        [..][/]
    build.number
    package.number
    test.number
 @requires AspectJ libraries and Ant tasks.
 @requires JUnit libraries and Ant tasks.
 @author <a href="mailto:chous@acm-sl.org">Jose San Leandro Armendariz</a>
 @default description
-->
<project name="${project.name}" default="description" basedir="../../..">

  <!--
   Displays the build script purpose, and the folder structure required.
   @return the output of the described message.
  -->
  <target
    name="description"
    description="Displays the build script purpose, and the folder
                        structure required.">

    <!--
     Displays the message.
    -->
    <echo>
  Projects supported by this script have the following structure:

  project-base-folder/
    conf/
      web-inf/
        web.xml
        [..][/]
      properties/
        [..][/]
      log4j/
        log4j.xml
        [..][/]
      i18n/
        [..][/]
      thirdparty/
        [..][/]
      xml/
        [..][/]
      [..]
    dist/
      build/
        [..][/]
      classes/
        [..][/]
      [..]
    docs/
      autogenerated/
        antlr/
          [..][/]
        javadoc/
          overview.html
          [..][/]
      design/
        [..][/]
      images/
        [..][/]
      license/
        [..][/]
      [..][/]
    engineering/
      psp/
        [..][/]
      notes/
        [..][/]
      [..]
      lib/
        antlr/
          build/
            [..]
          runtime/
            [..]
          [..]
        java/
          build/
            [..]
          development/
            [..]
          runtime/
            [..]
          unittest/
            [..]
          [..]
      tld/
        [..]
    src/
      antlr/
        build/
          [..][/]
        input/
          [..][/]
        output/
          [..][/]
        [..][/]
      aspectj/
        aspects/
          [..][/]
        [..]
      css/
        [..][/]
      html/
        [..][/]
      images/
        [..][/]
      java/
        unittests/
          [..][/]
        [functionaltests/]
        [..][/]
      jdkX.X/
        [..][/]
      jsp/
        [..][/]
      javadoc/
        overview.html
        [..][/]
      shellscripts
        [..][/]
      toolconf/
        ant/
          build.properties
          build.xml
        [..][/]
    build.number
    package.number
    test.number
    </echo>

  </target>

    <!--
     Defines the required variables in all tasks.
     Loads some of the from <i>build.properties</i> and creates the rest.
     @calls timestamp to get current time.
     @calls copy to backup <i>build.properties</i> before finding out project's
            current tag.
     @calls cvs to retrieve such tag.
     @calls property to initialize the required properties.
     @calls path to define each one of the class and source paths.
     @return the asignment of correct values to the required properties.
    -->
    <target name="init.properties">

      <!--
       System classpath not used.
      -->
      <property name="build.sysclasspath" value="ignore"/>

      <!--
       Variable to check if JAVA_HOME variable is available.
      -->
      <condition property="java.home.available">

        <isset property="java.home"/>

      </condition>

      <!--
       Finds out current time and stores it in a variable called
       <i>current.time</i>.
      -->
      <tstamp>

        <format property="current.time" pattern="yyyyMMdd"/>

      </tstamp>

      <!--
       Reads some specific properties from an external property files.
      -->
      <property file="src/toolconf/ant/build.properties"/>
      <property file="src/toolconf/ant/project.properties"/>
      <property file="src/toolconf/ant/user.properties"/>

      <!--
       Requests CVS to perform the keyword clean substitution.
      -->
      <!--cvs command="update -kv src/toolconf/ant/version.properties"/-->

      <!--
       Reads some specific properties from an external property file.
      -->
      <property file="src/toolconf/ant/version.properties"/>

      <!--
       Removes the version.properties file to get rid of the sticky
       keyword substitution setting.
      -->
      <!--delete file="src/toolconf/ant/version.properties"/-->

      <!--
       Restores version.properties state.
      -->
      <!--cvs command="update -A src/toolconf/ant/version.properties"/-->

      <!--
       Displays some project information.
      -->
      <echo message=""/>
      <echo message="Project name: ${project.name}"/>
      <echo message="version: ${project.tag.name}"/>
      <echo message=""/>

<!--         BEGIN OF FOLDER STRUCTURE SECTION                              -->

      <!--
       Configuration base folder.
      -->
      <property name="conf.dir" value="${project.base.folder}/conf"/>

      <!--
         WEB-INF configuration folder. Under this folder are placed all
         files that will be included in the project WAR/EAR file, so
         be careful.
      -->
      <property name="web-inf.dir" value="${conf.dir}/web-inf"/>

      <!--
           web.xml location, needed for web applications.
      -->
      <property name="web.xml.path" value="${web-inf.dir}/web.xml"/>

      <!--
         Configuration properties folder.
      -->
      <property name="properties.dir" value="${conf.dir}/properties"/>

      <!--
         Log4J configuration folder.
      -->
      <property name="log4j.dir" value="${conf.dir}/log4j"/>

      <!--
         XML configuration files are placed in this folder.
      -->
      <property name="xml.dir" value="${conf.dir}/xml"/>

      <!--
         Internationalized message files in this folder.
      -->
      <property name="i18n.dir" value="${conf.dir}/i18n"/>

      <!--
       Compilation and distribution base folder.
      -->
      <property name="dist.dir" value="${project.base.folder}/dist"/>

      <!--
         Where the jar files with the compiled classes are created.
      -->
      <property name="build.dir" value="${dist.dir}/build"/>

      <!--
         Where the .class files are created while compiling.
      -->
      <property name="classes.dir" value="${dist.dir}/classes"/>

      <!--
       Documentation base folder.
      -->
      <property name="docs.dir" value="${project.base.folder}/docs"/>

      <!--
           Documentation images base folder.
      -->
      <property
        name="docs.images.dir"
        value="${docs.dir}/images"/>

      <!--
         Sets where to place the automatically-generated documentation.
      -->
      <property name="autogenerated.dir" value="${docs.dir}/autogenerated"/>

      <!--
         Sets where to place the Javadoc documentation for ANTLR compilers.
      -->
      <property name="antlr.javadoc.dir" value="${autogenerated.dir}/antlr"/>

      <!--
         Sets where to place the Javadoc documentation.
      -->
      <property name="javadoc.dir" value="${autogenerated.dir}/javadoc"/>

      <!--
         Specifies where the license-related files are located.
      -->
      <property name="license.dir" value="${docs.dir}/license"/>

      <!--
       Dependencies base folder.
      -->
      <property
        name="dependencies.dir"
        value="${project.base.folder}/dependencies"/>

      <!--
       Libraries base folder.
      -->
      <property name="lib.dir" value="${dependencies.dir}/lib"/>

      <!--
         ANTLR-specific libraries folder. Files under this folder are
         needed for compiling the sources and also at runtime.
      -->
      <property name="antlr.lib.dir" value="${lib.dir}/antlr"/>

      <!--
           ANTLR libraries needed ONLY for building the project, not
           required at runtime.
      -->
      <property
        name="antlr.build.lib.dir"
        value="${antlr.lib.dir}/build"/>

      <!--
           ANTLR libraries needed ONLY at runtime, not required for
           building the project.
      -->   
      <property
        name="antlr.runtime.lib.dir"
        value="${antlr.lib.dir}/runtime"/>
   
      <!--
           ANTLR libraries needed ONLY for unit tests, not required
           for building the project.
      -->   
      <property
        name="antlr.unit.test.lib.dir"
        value="${antlr.lib.dir}/unittest"/>

      <!--
         Java libraries folder. Files under this folder are needed for
         compiling the Java sources and also at runtime.
      -->
      <property name="java.lib.dir" value="${lib.dir}/java"/>

      <!--
           Java libraries needed ONLY while developing the project,
           required by development tools, not required at build or
           runtime.
      -->
      <property
        name="java.development.lib.dir"
        value="${java.lib.dir}/development"/>

      <!--
          Java libraries needed ONLY for building the project, not required
          at runtime.
      -->
      <property
        name="java.build.lib.dir"
        value="${java.lib.dir}/build"/>

      <!--
           Java libraries needed ONLY at runtime, not required for building
           the project.
      -->   
      <property
        name="java.runtime.lib.dir"
        value="${java.lib.dir}/runtime"/>

      <!--
           Java libraries needed ONLY for unit tests, not required
           for building the project.
      -->   
      <property
        name="java.unit.test.lib.dir"
        value="${java.lib.dir}/unittest"/>

      <!--
       TagLibs descriptors base folder.
      -->
      <property name="tld.dir" value="${dependencies.dir}/tld"/>

      <!--
       Base folder for all kind of source files.
      -->
      <property name="src.dir" value="${project.base.folder}/src"/>

      <!--
         ANTLR source folder.
      -->
      <property name="antlr.src.dir" value="${src.dir}/antlr"/>

      <!--
           ANTLR generated Java sources location.
      -->
      <property
        name="antlr.java.src.dir"
        value="${antlr.src.dir}/java"/>

      <!--
           Javadoc HTML sources related to ANTLR generated compiler packages.
      -->
      <property
        name="antlr.javadoc.src.dir"
        value="${antlr.src.dir}/javadoc"/>

      <!--
           ANTLR input data used in tests.
      -->
      <property
        name="antlr.input.src.dir"
        value="${antlr.src.dir}/input"/>

      <!--
           ANTLR output data generated by tests from previous input.
      -->
      <property
        name="antlr.output.src.dir"
        value="${antlr.src.dir}/output"/>

      <!--
         AspectJ source folder.
      -->
      <property name="aspectj.src.dir" value="${src.dir}/aspectj"/>

      <!--
         HTML source folder.
      -->
      <property name="html.dir" value="${src.dir}/html"/>

      <!--
         Where all images referred by web pages are located.
      -->
      <property name="web.images.dir" value="${src.dir}/images"/>

      <!--
         Where all stylesheets referred by web pages are located.
      -->
      <property name="web.css.dir" value="${src.dir}/css"/>

      <!--
         Java source folder.
      -->
      <property name="java.src.dir" value="${src.dir}/java/main"/>

      <!--
         Java source folder.
      -->
      <property name="java.test.dir" value="${src.dir}/java/test"/>

      <!--
         JDK version-specific Java source folder.
      -->
      <property
        name="jdk.X.Y.src.dir"
        value="${src.dir}/jdk${include.specific.jdk.version}"/>

      <!--
         Javadoc source folder.
      -->
      <property name="javadoc.src.dir" value="${src.dir}/javadoc"/>

      <!--
         JSP source folder.
      -->
      <property name="jsp.dir" value="${src.dir}/jsp"/>

      <!--
         Shell scripts folder.
      -->
      <property name="shellscripts.dir" value="${src.dir}/shellscripts"/>

      <!--
         Templates configuration files are placed in this folder.
      -->
      <property name="templates.dir" value="${src.dir}/templates"/>

<!--         END OF FOLDER STRUCTURE SECTION                                -->

<!--         BEGIN MISC PROPERTIES DEFINITION SECTION                       -->

      <!--
       Defines the name and location of the project's jar file.
      -->
      <property
        name="project.jar.file"
        value="${build.dir}/${project.name}-${project.version}${project.status}.jar"/>

      <!--
       Defines the name and location of project's Javadoc packaged zip.
      -->
      <property
          name="javadoc.zip.path"
          value="${dist.dir}/${project.name}-javadoc.zip"/>

      <!--
       Prefix to use in WAR files to store the taglib descriptors.
      -->
      <property name="tld.war.prefix" value="tlds"/>

      <!--
       Prefix to use in WAR files to store the JSP pages.
      -->
      <property name="jsp.war.prefix" value=""/>

      <!--
       Prefix to use in WAR files to store the images.
      -->
      <property name="images.war.prefix" value="images"/>

      <!--
       Prefix to use in WAR files to store the stylesheets.
      -->
      <property name="css.war.prefix" value="css"/>

      <!--
       Prefix to use in WAR files to store the HTML pages.
      -->
      <property name="html.war.prefix" value=""/>

<!--         END MISC PROPERTIES DEFINITION SECTION                         -->

    </target>

    <!--
     Prepares the required directories.
     @depends init.properties to initialize all required properties.
     @param classes.dir the classes folder.
     @calls mkdir to create the <i>classes.dir</i> folder.
     @calls tstamp to retrieve the current time into <i>DSTAMP</i>.
     @return the creation of the <i>classes.dir</i> folder.
    -->
    <target
      name="init.folders"
      depends="init.properties"
      description="Prepares the required directories.">

      <!--
       Creates the distribution directory.
      -->
      <mkdir dir="${dist.dir}"/>

      <!--
       Creates the directory to store the compiled classes.
      -->
      <mkdir dir="${classes.dir}"/>

      <!--
       Creates the libraries base folder, if it's not created yet.
      -->
      <mkdir dir="${lib.dir}"/>

      <!--
       Creates the log4j directory, if it doesn't exist.
      -->
      <mkdir dir="${log4j.dir}"/>

      <!--
       Creates the properties directory, if it doesn't exist.
      -->
      <mkdir dir="${properties.dir}"/>

      <!--
       Creates the XML configuration directory, if it doesn't exist.
      -->
      <mkdir dir="${xml.dir}"/>

      <!--
         Creates the ANTLR-specific libraries folder, if it's not created
         yet.
      -->
      <mkdir dir="${antlr.lib.dir}"/>

      <!--
           Creates the folder where the ANTLR libraries needed ONLY for
           building the project (not required at runtime) are located,
           unless it already exists.
      -->
      <mkdir dir="${antlr.build.lib.dir}"/>

      <!--
           Creates the folder where the ANTLR libraries needed ONLY at
           runtime (not required for building the project) are located,
           unless it already exists.
      -->   
      <mkdir dir="${antlr.runtime.lib.dir}"/>
   
      <!--
           Creates the folder where the ANTLR libraries needed ONLY for
           testing.
      -->   
      <mkdir dir="${antlr.unit.test.lib.dir}"/>
   
      <!--
         Creates the Java libraries folder, if it's not created yet.
      -->
      <mkdir dir="${java.lib.dir}"/>

      <!--
           Creates the folder where Java libraries needed ONLY while
           developing the project (not required at runtime) are
           located, unless it already exists.
      -->
      <mkdir dir="${java.development.lib.dir}"/>

      <!--
           Creates the folder where Java libraries needed ONLY while
           building the project (not required at runtime) are
           located, unless it already exists.
      -->
      <mkdir dir="${java.build.lib.dir}"/>

      <!--
           Creates the folder where Java libraries needed ONLY at runtime
           (not required for building the project) are located, unless it
           already exists.
      -->   
      <mkdir dir="${java.runtime.lib.dir}"/>

      <!--
           Creates the folder where Java libraries needed ONLY for
           unit testing (not required for building the project) are
           located, unless it already exists.
      -->   
      <mkdir dir="${java.unit.test.lib.dir}"/>

      <!--
           Usually, projects use only the latest version of the JDK.
      -->
      <mkdir dir="${jdk.X.Y.src.dir}"/>

    </target>

    <!--
     Defines all required paths.
     @depends init.folders to ensure all folders exist.
     @return the definition of all paths.
    -->
    <target
      name="init.paths"
      depends="init.folders"
      description="Defines all required paths.">

      <!--
       ANTLR-only compilation classpath.
      -->
      <path id="antlr.compile.class.path">

        <!--
         ANTLR libraries needed for compilation and at runtime.
        -->
        <fileset dir="${antlr.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         ANTLR libraries needed only for compilation.
        -->
        <fileset dir="${antlr.build.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
       ANTLR-only runtime classpath.
      -->
      <path id="antlr.runtime.class.path">

        <!--
         ANTLR libraries needed for compilation and at runtime.
        -->
        <fileset dir="${antlr.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         ANTLR libraries needed only at runtime.
        -->
        <fileset dir="${antlr.runtime.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
       ANTLR-only unit test classpath.
      -->
      <path id="antlr.unit.test.class.path">

        <!--
         ANTLR compile classpath.
        -->
        <path refid="antlr.compile.class.path"/>

        <!--
         ANTLR runtime classpath.
        -->
        <path refid="antlr.runtime.class.path"/>

        <!--
         ANTLR libraries needed for compilation and at runtime.
        -->
        <fileset dir="${antlr.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         ANTLR libraries needed only for testing..
        -->
        <fileset dir="${antlr.unit.test.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
       ANTLR-only classpath.
      -->
      <path id="antlr.class.path">

        <!--
         ANTLR compile classpath.
        -->
        <path refid="antlr.compile.class.path"/>

        <!--
         ANTLR runtime classpath.
        -->
        <path refid="antlr.runtime.class.path"/>

        <!--
         ANTLR unit test classpath.
        -->
        <path refid="antlr.unit.test.class.path"/>

      </path>

      <!--
       Ant add-ins classpath.
      -->
      <path id="java.development.class.path">

        <!--
         Ant add-ins.
        -->
        <fileset dir="${java.development.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
       Java-only compilation classpath.
      -->
      <path id="java.compile.class.path">

        <!--
         Project own classes.
        -->
        <pathelement location="${classes.dir}"/>

        <!--
         Java libraries needed for compilation and at runtime.
        -->
        <fileset dir="${java.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed only for compilation.
        -->
        <fileset dir="${java.build.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed compiling the unit tests.
        -->
        <fileset dir="${java.unit.test.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         ANTLR-related libraries.
        -->
        <path refid="antlr.compile.class.path"/>

      </path>

      <!--
       Java-only runtime classpath.
      -->
      <path id="java.libonly.runtime.class.path">

        <!--
         Java libraries needed for compilation and at runtime.
        -->
        <fileset dir="${java.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed only at runtime.
        -->
        <fileset dir="${java.runtime.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         ANTLR-related libraries.
        -->
        <path refid="antlr.runtime.class.path"/>

      </path>

      <!--
       Java-only runtime classpath.
      -->
      <path id="java.runtime.class.path">

        <!--
         Project own classes.
        -->
        <pathelement location="${classes.dir}"/>

        <path refid="java.libonly.runtime.class.path"/>

      </path>

      <!--
       Java-only test classpath: unittest classpath.
      -->
      <path id="java.unit.test.class.path">

        <!--
         Project own classes.
        -->
        <pathelement location="${classes.dir}"/>

        <!--
         Java libraries needed for compilation and at runtime.
        -->
        <fileset dir="${java.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed only at runtime.
        -->
        <fileset dir="${java.runtime.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed only for compilation.
        -->
        <fileset dir="${java.build.lib.dir}">

          <include name="*.jar"/>

        </fileset>

        <!--
         Java libraries needed only for unit tests.
        -->
        <fileset dir="${java.unit.test.lib.dir}">

          <include name="*.jar"/>

        </fileset>

      </path>

      <!--
       Compilation classpath (including aspects).
      -->
      <path id="compile.class.path">

        <!--
         Class path for compiling without aspects.
        -->
        <path refid="java.compile.class.path"/>

      </path>

      <!--
       Runtime classpath (including aspects).
      -->
      <path id="runtime.class.path">

        <!--
         Class path required at runtime without aspects.
        -->
        <path refid="java.runtime.class.path"/>

        <!--
         Project own classes.
        -->
        <pathelement location="${classes.dir}"/>

      </path>

      <!--
       Unit test classpath: compile plus runtime classpath
       (including aspects).
      -->
      <path id="unit.test.class.path">

        <!--
         Class path for testing without aspects.
        -->
        <path refid="java.unit.test.class.path"/>

        <!--
         ANTLR test libraries.
        -->
        <path refid="antlr.unit.test.class.path"/>

      </path>

<!--         END CLASSPATH DEFINITIONS SECTION                              -->

<!--         BEGIN SOURCE PATH DEFINITIONS SECTION                          -->

      <!--
       ANTLR source path.
      -->
      <path id="antlr.java.source.path">

        <!--
         Source files.
        -->
        <pathelement location="${antlr.java.src.dir}"/>

      </path>

      <!--
       ANTLR source path, plus Javadoc sources.
      -->
      <path id="antlr.java.source.and.javadoc.path">

        <!--
         Java Source files generated by ANTLR.
        -->
        <path refid="antlr.java.source.path"/>

        <!--
         Javadoc sources for packages generated from ANTLR grammars.
        -->
        <pathelement location="${antlr.javadoc.src.dir}"/>

      </path>

      <!--
       Java-only source path.
      -->
      <path id="java.source.path">

        <!--
         Source files.
        -->
        <pathelement location="${java.src.dir}"/>

        <!--
         Source files.
        -->
        <pathelement location="${jdk.X.Y.src.dir}"/>

      </path>

      <!--
       Java-only test path.
      -->
      <path id="java.test.path">

        <!--
         Source files.
        -->
        <pathelement location="${java.test.dir}"/>

      </path>

      <!--
       Java-only source path, plus Javadoc sources.
      -->
      <path id="java.source.and.javadoc.path">

        <!--
         Java Source files.
        -->
        <path refid="java.source.path"/>

        <!--
         Javadoc sources.
        -->
        <pathelement location="${javadoc.src.dir}"/>

      </path>

      <!--
       Source path, including aspects.
      -->
      <path id="project.source.path">

        <!--
         AspectJ source files.
        --> 
        <pathelement location="${aspectj.src.dir}"/>

        <!--
         Source files.
        -->
        <path refid="java.source.path"/>

      </path>

      <!--
       Source path, including aspects.
      -->
      <path id="project.source.and.javadoc.path">

        <!--
         Java and Javadoc source files.
        -->
        <path refid="java.source.and.javadoc.path"/>

        <!--
         AspectJ sources.
        -->
        <pathelement location="${aspectj.src.dir}"/>

      </path>

<!--        END SOURCE PATH DEFINITIONS SECTION                             -->

<!--        BEGIN CONFIGURATION PATH DEFINITIONS SECTION                    -->

      <!--
       Configuration files path.
      -->
      <path id="configuration.path">

        <!--
         Property files.
        -->
        <pathelement location="${properties.dir}"/>

        <!--
         Log4J configuration folder.
        -->
        <pathelement location="${log4j.dir}"/>

        <!--
         XML configuration files are placed in this folder.
        -->
        <pathelement location="${xml.dir}"/>

        <!--
         Internationalized messages.
        -->
        <pathelement location="${i18n.dir}"/>

      </path>

     </target>

<!--          END CONFIGURATION PATH DEFINITIONS SECTION                    -->

     <!--
      Checks all defined conditions.
      @depends init.paths to ensure all path references are defined.
      @return some properties with the results of the checks.
      -->
      <target
        name="init.conditions"
        depends="init.paths"
        description="Checks all defined conditions.">

<!--          BEGIN GENERAL CHECK SECTION                                   -->

        <!--
         Checks if the operating system is Unix.
        -->
        <condition property="unix">
          <os family="unix"/>
        </condition>

        <!--
         Checks if the operating system is Microsoft's.
        -->
        <condition property="windows">
          <or>
            <os family="windows"/>
            <os family="dos"/>
          </or>
        </condition>

        <!--
         Checks whether we're using Java5
        -->
        <condition property="java5">
          <available classname="java.lang.StringBuilder"/>
        </condition>

<!--          END GENERAL CHECK SECTION                                     -->

<!--          BEGIN REQUIRED LIBRARIES/FILES/FOLDERS CHECK SECTION          -->

        <!--
         Checks if support for jdk version-specific code is required.
        -->
        <available
          property="specific.jdk.version.files.available"
          file="${jdk.X.Y.src.dir}"/>

        <!--
         Checks if antlr.jar is available.
        -->
        <available
          classname="antlr.ANTLRParser"
          property="antlr.jar.available"
          classpathref="antlr.class.path"/>

        <!--
         Checks if junit.jar is available.
        -->
        <available
          classname="junit.framework.TestCase"
          property="junit.jar.available"
          classpathref="unit.test.class.path"/>

        <!--
         Checks if optional.jar is available.
        -->
        <available
          classname="org.apache.tools.ant.taskdefs.optional.ANTLR"
          property="optional.jar.available"
          classpathref="unit.test.class.path"/>

        <!--
         Checks if jdktools.jar is available.
        -->
        <available
          classname="com.sun.tools.javadoc.DocletInvoker"
          property="jdktools.jar.available">

          <classpath>

            <!--
             Tries to find it in the folder where the JDK tools
             are located.
            -->
            <path location="${java.home}/lib"/>

          </classpath>

        </available>

        <!--
         Checks if aspectjrt.jar is available.
        -->
        <available
          classname="org.aspectj.lang.JoinPoint"
          property="aspectjrt.jar.available"
          classpathref="java.development.class.path"/>

        <!--
         Checks if aspectjtools.jar is available.
        -->
        <available
          classname="org.aspectj.asm.AsmManager"
          property="aspectjtools.jar.available"
          classpathref="java.development.class.path"/>

        <!--
         Checks if junitdoclet.jar is available.
        -->
        <available
          classname="com.objectfab.tools.junitdoclet.JUnitDoclet"
          property="junitdoclet.jar.available"
          classpathref="java.development.class.path"/>

        <!--
         Checks if junitdoclet-acmsl.jar is available.
        -->
        <available
          classname="org.acmsl.junitdoclet.AcmslNamingStrategy"
          property="junitdoclet-acmsl.jar.available"
          classpathref="java.development.class.path"/>

        <!--
         Checks if jalopy-ant.jar is available.
        -->
        <available
          classname="de.hunsicker.jalopy.plugin.ant.AntPlugin"
          property="jalopy-ant.jar.available"
          classpathref="java.development.class.path"/>

        <!--
         Checks if jalopy.jar is available.
        -->
        <available
          classname="de.hunsicker.jalopy.Jalopy"
          property="jalopy.jar.available"
          classpathref="java.development.class.path"/>

        <antcall
          target="init.conditions.for.java5"
          inheritRefs="true"
          inheritAll="true"/>

<!--         END REQUIRED LIBRARIES/FILES/FOLDERS CHECK SECTION             -->

    </target>

     <!--
      Checks conditions depending on Java5.
      @depends init.paths to ensure all path references are defined.
      @if java5 since the libraries require it.
      @return some properties with the results of the checks.
      -->
      <target
        name="init.conditions.for.java5"
        depends="init.paths"
        if="java5"
        description="Checks conditions depending on Java5.">

        <!--
         Checks if umlgraph.jar is available.
        -->
        <available
          classname="gr.spinellis.umlgraph.doclet.UmlGraphDoc"
          property="umlgraph.jar.available"
          classpathref="java.development.class.path"/>

      </target>

<!--         BEGIN REQUIRED LIBRARIES/FILES/FOLDERS CHECK SECTION           -->

    <!--
     Ensures all properties, folder, paths, etc. are correctly defined.
     @depends init.conditions to ensure all checks have been performed.
     @return the execution of all initial tasks.
    -->
   <target
       name="init"
       depends="init.conditions"
       description="Ensures all properties, folder, paths, etc. are
                                correctly defined."/>

    <!--
     Checks if the <i>antlr.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless antlr.jar.available exists, the process will fail.
     @param antlr.jar.available the flag that indicates if such
            jar is present.
     @param antlr.jar the location of the <i>ANTLR</i> jar.
     @calls fail to stop the process if <i>antlr.jar</i> is not present.
     @return the execution ends if the <i>antlr.jar</i> is not available.
    -->
    <target
        name="antlr.jar.available"
        depends="init.properties" 
        unless="antlr.jar.available"
        description="Checks if the antlr.jar is present.">

        <!--
         Contains all ANTLR classpath.
        -->
        <property
            name="antlr-classpath"
            refid="antlr.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting antlr.jar at ${antlr-classpath}.
                     The process stops because ANTLR library is
                     mandatory."/>

    </target>


    <!--
     Checks if the <i>antlrrt.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless antlrrt.jar.available exists, the process will fail.
     @param antlrrt.jar.available the flag that indicates if such
            jar is present.
     @param antlr.jar the location of the <i>ANTLR</i> runtime jar.
     @calls fail to stop the process if <i>antlrrt.jar</i> is not present.
     @return the execution ends if the <i>antlrrt.jar</i> is not available.
    -->
    <target
        name="antlrrt.jar.available"
        depends="init.properties" 
        unless="antlrrt.jar.available"
        description="Checks if the antlrrt.jar is present.">

        <!--
         Contains all ANTLR runtime classpath.
        -->
        <property
            name="antlr-runtime-classpath"
            refid="antlr.runtime.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting antlrrt.jar at ${antlr-runtime-classpath}.
                     The process stops because ANTLR runtime library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>junit.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless junit.jar.available exists, the process will fail.
     @param junit.jar the location of the <i>JUnit</i> jar.
     @calls fail to stop the process if <i>junit.jar</i> is not present.
     @return the execution ends if the <i>junit.jar</i> is not available.
    -->
    <target
        name="junit.jar.available"
        depends="init" 
        unless="junit.jar.available"
        description="Checks if the junit.jar is present.">

        <!--
         Contains the classpath used to test.
        -->
        <property
            name="unit-test-classpath"
            refid="unit.test.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting junit.jar at ${test-classpath}.
                     The process stops because JUnit runtime library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>optional.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless optional.jar.available exists, the process will fail.
     @param optional.jar the location of the <i>optional</i> jar.
     @calls fail to stop the process if <i>optional.jar</i> is not present.
     @return the execution ends if the <i>optional.jar</i> is not available.
    -->
    <target
        name="optional.jar.available"
        depends="init" 
        unless="optional.jar.available"
        description="Checks if the optional.jar is present.">

        <!--
         Contains the classpath used to test.
        -->
        <property
            name="unit-test-classpath"
            refid="unit.test.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting optional.jar at ${test-classpath}.
                     The process stops because JUnit Task is mandatory."/>

    </target>

    <!--
     Checks if the <i>jdktools.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless jdktools.jar.available exists, the process will fail.
     @param jdktools.jar.available the flag that indicates if such
            jar is present.
     @param jdktools.jar the location of the <i>JDK</i> tools.
     @calls fail to stop the process if <i>jdktools.jar</i> is not present.
     @return the execution ends if the <i>jdktools.jar</i> is not available.
    -->
    <target
        name="jdktools.jar.available"
        depends="init.properties" 
        unless="jdktools.jar.available"
        description="Checks if the jdktools.jar is present.">

        <!--
         Contains all development add-ins classpath.
        -->
        <property
            name="jdktools-classpath"
            refid="java.development.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="AspectJ expects tools.jar at ${jdktools-classpath}.
                     The process stops because AspectJ runtime library is
                     mandatory."/>
    </target>

    <!--
     Checks if the <i>aspectjtools.jar</i> is present.
     @depends init.properties to initialize all required properties.
     @unless aspectjtools.jar.available exists, the process will fail.
     @param aspectjtools.jar.available the flag that indicates if such
            jar is present.
     @param aspectjtools.jar the location of the <i>AspectJ</i> tools.
     @calls fail to stop the process if <i>aspectjtools.jar</i> is not present.
     @return the execution ends if the <i>aspectjtools.jar</i> is not
             available.
    -->
    <target
        name="aspectjtools.jar.available"
        depends="init" 
        unless="aspectjtools.jar.available"
        description="Checks if the aspectjtools.jar is present.">

        <!--
         Contains all development add-ins classpath.
        -->
        <property
            name="aspectjtools-classpath"
            refid="java.development.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting aspectjtools.jar at
                     ${aspectjtools-classpath}.
                     The process stops because AspectJ runtime library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>aspectjrt.jar</i> is present.
     @depends init to initialize all required properties.
     @unless aspectjrt.jar.available exists, the process will fail.
     @param aspectjrt.jar.available the flag that indicates if such
            jar is present.
     @param aspectjrt.jar the location of the <i>AspectJ</i> runtime jar.
     @calls fail to stop the process if <i>aspectjrt.jar</i> is not present.
     @return the execution ends if the <i>aspectjrt.jar</i> is not available.
    -->
    <target
        name="aspectjrt.jar.available"
        depends="init" 
        unless="aspectjrt.jar.available"
        description="Checks if the aspectjrt.jar is present.">

        <!--
         Contains all development add-ins classpath.
        -->
        <property
            name="aspectjrt-classpath"
            refid="java.development.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting aspectjrt.jar at ${aspectjrt-classpath}.
                     The process stops because AspectJ runtime library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>junitdoclet.jar</i> is present.
     @depends init to initialize all required properties.
     @unless junitdoclet.jar.available exists, the process will fail.
     @param JUnitDoclet.jar the location of the <i>JUnitDoclet</i> jar.
     @calls fail to stop the process if <i>JUnitDoclet.jar</i> is not present.
     @return the execution ends if the <i>JUnitDoclet.jar</i> is not available.
    -->
    <target
        name="junitdoclet.jar.available"
        depends="init" 
        unless="junitdoclet.jar.available"
        description="Checks if the junitdoclet.jar is present.">

        <!--
         Contains all JUnitDoclet classpath.
        -->
        <property
            name="junitdoclet-classpath"
            refid="java.development.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting junitdoclet.jar and junitdoclet-acmsl.jar
                     at ${junitdoclet-classpath}.
                     The process stops because JUnitDoclet library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>junitdoclet-acmsl.jar</i> is present.
     @depends init to initialize all required properties.
     @unless junitdoclet-acmsl.jar.available exists, the process will fail.
     @param junitdoclet-acmsl.jar the location of the <i>ACMSL</i>
            JUnitDoclet customizations.
     @calls fail to stop the process if <i>junitdoclet-acmsl.jar</i> is not present.
     @return the execution ends if the <i>junitdoclet-acmsl.jar</i> is not available.
    -->
    <target
        name="junitdoclet-acmsl.jar.available"
        depends="init" 
        unless="junitdoclet-acmsl.jar.available"
        description="Checks if the junitdoclet-acmsl.jar is present.">

        <!--
         Contains all JUnitDoclet-ACMSL classpath.
        -->
        <property
            name="junitdoclet-acmsl-classpath"
            refid="java.development.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting junitdoclet-acmsl.jar at ${junitdoclet-acmsl-classpath}.
                     The process stops because ACM-SL's JUnitDoclet customizations
                     are mandatory."/>

    </target>

    <!--
     Checks if the <i>jalopy.jar</i> is present.
     @depends init to initialize all required properties.
     @unless jalopy.jar.available exists, the process will fail.
     @param jalopy.jar the location of the <i>jalopy</i> jar.
     @calls fail to stop the process if <i>jalopy.jar</i> is not present.
     @return the execution ends if the <i>jalopy.jar</i> is not available.
    -->
    <target
        name="jalopy.jar.available"
        depends="init" 
        unless="jalopy.jar.available"
        description="Checks if the jalopy.jar is present.">

        <!--
         Contains all Jalopy classpath.
        -->
        <property
            name="jalopy-classpath"
            refid="java.compile.class.path"/>

        <!--
         Indicates the error message and exits.
        -->
        <fail
            message="Expecting jalopy.jar and jalopy-ant.jar
                     at ${jalopy-classpath}.
                     The process stops because Jalopy library is
                     mandatory."/>

    </target>

    <!--
     Checks if the <i>project.jar</i> file is present.
     @depends init.properties to initialize all required properties.
     @param project.jar the expected location of the <i>project.jar</i> file.
     @return a property called "project.jar.available", indicating
     whether the file exists or not.
    -->
    <target
      name="check.project.jar.available"
      depends="init.properties"
      description="Checks if project.jar file is present.">

      <echo message="Checking ${project.jar.file}"/>

      <!--
       Checks if the project's jar is available.
      -->
      <available
        property="project.jar.available"
        file="${project.jar.file}"
        type="file"/>

    </target>

    <!--
     Stops the process unless the <i>project.jar</i> file is present.
     @depends check.project.jar to check whether the project.jar exists.
     @unless project.jar exists, the process will fail.
     @param project.jar.available the flag that indicates if such file is
            present.
     @param project.jar the expected location of the <i>project.jar</i> file.
     @calls fail to stop the process if <i>project.jar</i> is not present.
     @return the execution ends if the <i>project.jar</i> is not available.
    -->
    <target
      name="project.jar.available"
      depends="check.project.jar.available" 
      unless="project.jar.available"
      description="Stops the process unless the project.jar file is present.">

      <!--
       Indicates the error message and exits.
      -->
      <fail message="Please create a jar file using jar target,
                     or via ContractChecker.
                     The process cannot continue without the jar file
                     of the project."/>

    </target>

<!--         END REQUIRED LIBRARIES/FILES/FOLDERS CHECK SECTION             -->

<!--         BEGIN CLEAN-UP TASKS SECTION                                   -->

    <!--
     Cleans up compiled classes, AspectJ browse symbols and Emacs backup files.
     @depends init to initialize all required properties.
     @param classes.dir the classes folder.
     @param java.src.dir the folder where the java sources are located.
     @calls delete to remove <i>classes.dir</i> folder.
     @calls delete to remove any other generated files under
            <i>java.src.dir</i> folder.
     @return the deletion of the <i>classes.dir</i> folders, the AspectJ browse
             symbols and emacs backup files.
    -->
    <target
      name="clean"
      depends="init"
      description="Cleans up compiled classes, AspectJ browse symbols
                             and Emacs backup files.">

      <!--
       Deletes the ${classes.dir} folder.
      -->
      <delete dir="${classes.dir}"/>

      <delete>

        <!--
         Deletes the generated AspectJ browse symbols.
        -->
        <fileset dir="${java.src.dir}" includes="**/*.ajesym"/>

        <!--
         Deletes Emacs backup files.
        -->
        <fileset dir="${java.src.dir}" includes="**/*.*~"/>

      </delete>

      <!--
       Creates the directory to store the compiled classes again.
      -->
      <mkdir dir="${classes.dir}"/>

    </target>

    <!--
     Cleans up previous Javadoc autogenerated documentation.
     @depends init to initialize all required properties.
     @param javadoc.dir the folder where the javadoc documentation is created.
     @calls delete to remove the <i>javadoc.dir</i> folder.
     @return the cleaning of the <i>Javadoc</i> files.
    -->
    <target
      name="clean.javadoc"
      depends="init"
      description="Cleans up previous Javadoc autogenerated
                                       documentation.">

      <!--
       Deletes the ${javadoc.dir} folder.
      -->
      <delete dir="${javadoc.dir}"/>

    </target>

    <!--
     Cleans up previous Antdoc autogenerated documentation.
     @depends init to initialize all required properties.
     @param antdoc.dir the folder where the Antdoc documentation is created.
     @calls delete to remove the <i>antdoc.dir</i> folder.
     @return the cleaning of the <i>antdoc</i> files.
    -->
    <target
      name="clean.antdoc"
      depends="init"
      description="Cleans up previous Antdoc autogenerated
                                        documentation.">

      <!--
       Deletes the ${antdoc.dir} folder.
      -->
      <delete dir="${antdoc.dir}"/>

    </target>

<!--         END CLEAN-UP TASKS SECTION                                     -->

<!--         BEGIN EXTERNAL TASKS DEFINITION SECTION                        -->

    <!--
     Initializes the AspectJ task definitions.
     @depends init to initialize all required properties.
     @depends aspectjtools.jar.available to check if <i>aspectjtools.jar</i> is
              available. 
     @depends aspectjrt.jar.available to check if <i>aspectjrt.jar</i> is
              available. 
     @depends jdktools.jar.available to check if <i>jdktools.jar</i> is
              available. 
     @param aspectjtools.jar the aspectjtools jar path.
     @param aspectj-ant.jar the aspectj ant jar path.
     @param jdktools.jar the tools.jar path bundled with the jdk.
     @calls taskdef to define the <i>iajc</i> task.
     @return initializes the task definition required for AspectJ: <i>iajc</i>.
    -->
    <target
      name="init.aspectj.taskdefs"
      depends="init,
               aspectjtools.jar.available,
               aspectjrt.jar.available,
               jdktools.jar.available">

      <!--
       Defines <i>iajc</i> task.
      -->
      <taskdef 
        resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties"
        classpathref="aspectj.class.path"/>

    </target>

    <!--
     Initializes the JUnit task definitions.
     @depends init to initialize all required properties.
     @depends junit.jar.available to check if <i>junit.jar</i> is
              available. 
     @param junit.jar the JUnit jar path.
     @calls taskdef to define the <i>junit</i> task.
     @return initializes the task definitions required for JUnit,
    -->
    <target
      name="init.junit.taskdefs"
      depends="init, junit.jar.available, optional.jar.available"
      description="Initializes the JUnit task definitions.">

      <!--property name="unit-test-path" refid="unit.test.class.path"/>

      <echo message="${unit-test-path}"/-->

      <!--
       Defines the <i>JUnit</i> task.
      -->
      <taskdef
        name="junit"
        classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
        classpathref="unit.test.class.path"/>

    </target>

    <!--
     Initializes the ANTLR-specific task definitions.
     @depends init to initialize all required properties.
     @depends antlr.jar.available to check if <i>antlr.jar</i> is
              available. 
     @param antlr.jar the antlr jar path.
     @calls taskdef to define the <i>antlr</i> task.
     @return initializes the task definition required for ANTLR.
    -->
    <target
      name="init.antlr.taskdefs"
      depends="init, antlr.jar.available">

      <!--
       Defines the <i>antlr</i> task.
      -->
      <taskdef
        name="antlr"
        classname="org.apache.tools.ant.taskdefs.optional.ANTLR"
        classpathref="antlr.class.path"/>

    </target>

    <!--
     Initializes the Jalopy task definitions.
     @depends init to initialize all required properties.
     @depends jalopy.jar.available to check if <i>jalopy-ant.jar</i> is
              available. 
     @depends jalopy-ant.jar.available to check if <i>jalopy-ant.jar</i> is
              available. 
     @param jalopy-ant.jar the Jalopy-Ant jar path.
     @calls taskdef to define the <i>jalopy</i> task.
     @return initializes the task definitions required for Jalopy
    -->
    <target
      name="init.jalopy.taskdefs"
      depends="init, jalopy.jar.available"
      description="Initializes the Jalopy task definitions.">

      <!--
       Defines the <i>Jalopy</i> task.
      -->
      <taskdef
        name="jalopy"
        classname="de.hunsicker.jalopy.plugin.ant.AntPlugin"
        classpathref="unit.test.class.path"/>

    </target>

<!--         END EXTERNAL TASKS DEFINITION SECTION                          -->

<!--         BEGIN CODE GENERATION SECTION                                  -->

    <!--
     Generates the unit test cases for the source files.
     @depends init to take some basic initial steps in the build
     process.
     @depends junitdoclet.jar.available to ensure <i>junitdoclet.jar</i> exists.
     @depends junitdoclet-acmsl.jar.available to ensure
     <i>junitdoclet-acmsl.jar</i> exists.
     @param organization.type the type of organization.
     @param java.compile.class.path the classpath.
     @param javadoc.src.dir the folder of the Javadoc source files.
     @param javadoc.src.dir the folder of the Javadoc source files.
     @param java.source.and.javadoc.path the complete Java + Javadoc source path.
     @return the generated and managed unit tests.
    -->
    <target
      name="junitdoclet"
      depends="init, junitdoclet.jar.available, junitdoclet-acmsl.jar.available">

      <mkdir dir="${javadoc.src.dir}"/>

      <javadoc
        packagenames="${organization.type}.*"
        defaultexcludes="yes"
        classpathref="unit.test.class.path"
        doclet="com.objectfab.tools.junitdoclet.JUnitDoclet"
        docletpathref="java.development.class.path"
        additionalparam="-d ../../../${java.src.dir} -buildall -naming org.acmsl.junitdoclet.AcmslNamingStrategy -testintest">

        <sourcepath>

          <!-- ORDER MATTERS -->
          <pathelement location="${javadoc.src.dir}"/>

          <path refid="java.source.and.javadoc.path"/>

        </sourcepath>

    </javadoc>
  </target>

<!--         END CODE GENERATION SECTION                                    -->

<!--         BEGIN CODE FORMATTING SECTION                                  -->

    <!--
     Formats the source code according to ACM-SL conventions.
     @depends init to take some basic initial steps in the build
     process.
     @depends init.jalopy.taskdefs to ensure <i>jalopy</i> task is
     correctly declared.
     @param java.compile.class.path the classpath.
     @param acmsl-jalopy-code-conv.xml the convention file.
     @param java.src.dir the folder of Java source files.
     @return the formatted code.
    -->
    <target
      name="format.code"
      depends="init, init.jalopy.taskdefs">

      <jalopy
        backup="yes"
        classpathref="java.compile.class.path"
        convention="acmsl-jalopy-code-conv.xml">
        
        <fileset dir="${java.src.dir}">

          <include name="**/*.java"/>

        </fileset>

      </jalopy>

    </target>

<!--         END CODE FORMATTING SECTION                                    -->

<!--         BEGIN COMPILE TASKS SECTION                                    -->

    <!--
     Compiles the Java source files.
     @depends init to take some basic initial steps in the build
     process.
     @depends clean to clean-up previously-generated files.
     @param classes.dir the classes folder.
     @param java.source.path the Java source files folder(s).
     @param java.compile.class.path the classpath needed for compilation.
     @calls javac to compile the sources.
     @calls update.build.number to update the build number.
     @return the compilation of specified classes.
    -->
    <target
      name="compile"
      depends="init"
      description="Compiles the source files.">

      <!--
       Compile the java code from ${java.source.path} into ${classes.dir}.
      -->
      <javac
        debug="on"
        destdir="${classes.dir}"
        encoding="ISO-8859-1"
        deprecation="false">

        <src refid="java.source.path"/>

        <classpath refid="java.compile.class.path"/>

      </javac>

      <!--
       Copy resources to ${classes.dir}
      -->
      <copy todir="${classes.dir}" flatten="true" includeEmptyDirs="false">
        <fileset dir="${conf.dir}"/>
      </copy>

      <!--
       In case of success, update the build count.
      <antcall target="update.build.number" inheritRefs="true"/>
      -->

    </target>

    <!--
     Compiles the Java tests.
     @depends init to take some basic initial steps in the build
     process.
     @depends clean to clean-up previously-generated files.
     @param classes.dir the classes folder.
     @param java.source.path the Java source files folder(s).
     @param java.compile.class.path the classpath needed for compilation.
     @calls javac to compile the sources.
     @calls update.build.number to update the build number.
     @return the compilation of specified classes.
    -->
    <target
      name="compile.tests"
      depends="init, clean"
      description="Compiles the source files.">

      <!--
       Compile the java code from ${java.source.path} into ${classes.dir}.
      -->
      <javac
        debug="on"
        destdir="${classes.dir}"
        encoding="ISO-8859-1"
        target="1.4"
        deprecation="false">

        <src refid="java.test.path"/>

        <classpath refid="java.compile.class.path"/>

      </javac>

      <!--
       Copy resources to ${classes.dir}
      -->
      <copy todir="${classes.dir}" flatten="true" includeEmptyDirs="false">
        <fileset dir="${conf.dir}"/>
      </copy>

      <!--
       In case of success, update the build count.
      <antcall target="update.build.number" inheritRefs="true"/>
      -->

    </target>

    <!--
     Compiles the source files with optimization settings activated.
     @depends init to take some basic initial steps in the build process.
     @param classes.dir the classes folder.
     @param java.source.path the Java source files folder(s).
     @param java.compile.class.path the classpath needed for compilation.
     @calls javac to compile the sources.
     @return the optimized compilation of the project sources.
    -->
    <target
        name="compile.final"
        depends="init"
        description="Compiles the source files with optimization
                                    settings activated.">

        <!--
         Compile the java code from ${java.source.path} into ${classes.dir}
        -->
        <javac
          destdir="${classes.dir}"
          debug="off"
          optimize="on"
          encoding="ISO-8859-1">

            <src refid="java.source.path"/>

            <classpath refid="java.compile.class.path"/>

        </javac>

    </target>

    <!--
     Compiles Java and AspectJ files.
     @depends init to take some basic initial steps in the build process.
     @depends jdktools.jar.available to check if <i>jdktools.jar</i> is
              available. 
     @depends the previous execution of the <i>jdktools.jar.available</i>
              task.
     @depends clean to clean up previously generated classes.
     @depends init.aspectj.taskdefs to define the external AspectJ tasks.
     @param classes.dir the generated classes folder.
     @param compile.class.path the classpath needed to compile the project.
     @param aspectj.class.path the classpath related to AspectJ.
     @param project.source.path the folders to look for Java and AspectJ.
     @calls mkdir to create the <i>classes.dir</i> folder.
     @calls iajc to build the classes and aspects.
     @return the compiled files.
    -->
    <target
      name="aspectj"
      depends="init,jdktools.jar.available,clean,init.aspectj.taskdefs"
      description="Compiles Java and AspectJ files.">

      <!--
       Creates the classes folder.
      -->
      <mkdir dir="${classes.dir}"/>

      <!--
       Calls <i>iajc</i> to build Java and AspectJ files
      -->
      <iajc
        sourcerootsref="project.source.path"
        destdir="${classes.dir}">

        <classpath>

          <path refid="compile.class.path"/>

          <path refid="aspectj.class.path"/>

        </classpath>

      </iajc>

    </target>

<!--         END COMPILE TASKS SECTION                                      -->

<!--         BEGIN PROCESS COUNT ANNOTATION TASKS SECTION                   -->

    <!--
     Updates the build number.
     @depends init.properties to initialize all required
     properties. However, it's not declared since this task is called
     after each successful compilation, via antcall, and would execute
     init.properties twice.
     @param project.base.folder the project's root folder.
     @calls buildnumber to increment the build number.
     @return the build.number file has been updated, incrementing its number
             by one.
    -->
    <target
      name="update.build.number"
      description="Updates the build number.">

      <!--
       Updates the build count.
      -->
      <buildnumber file="${project.base.folder}/build.number"/>

      <echo message="build number: ${build.number}"/>

    </target>

    <!--
     Updates how many times the project has been unit tested.
     @depends init.properties to initialize all required
     properties. However, it's not declared since this task is called
     after each successful test, via antcall, and would execute
     init.properties twice.
     @param project.base.folder the project's root folder.
     @calls build.number to increment the test number.
     @return the test.number file has been updated, incrementing its number
             by one.
    -->
    <target
      name="update.unittest.number"
      description="Updates how many times the project has been unit
                               tested.">

      <!--
       Updates the unit test count.
      -->
      <buildnumber file="${project.base.folder}/test.number"/>

    </target>

    <!--
     Updates how many times the project has been functional tested.
     @depends init.properties to initialize all required
     properties. However, it's not declared since this task is called
     after each successful test, via antcall, and would execute
     init.properties twice.
     @param project.base.folder the project's root folder.
     @calls build.number to increment the test number.
     @return the functional.test.number file has been updated,
             incrementing its number by one.
    -->
    <target
      name="update.functionaltest.number"
      description="Updates how many times the project has been functional
                             tested.">

      <!--
       Updates the unit test count.
      -->
      <buildnumber file="${project.base.folder}/functionaltest.number"/>

    </target>

    <!--
     Updates how many times the project has been packaged.
     @depends init.properties to initialize all required properties.
     @param project.base.folder the project's root folder.
     @calls build.number to increment the packaged number.
     @return the packaged.number file has been updated, incrementing its number
             by one.
    -->
    <target
      name="update.package.number"
      depends="init.properties"
      description="Updates how many times the project has been
                                    packaged.">

      <!--
       Updates the package count.
      -->
      <buildnumber file="${project.base.folder}/package.number"/>

    </target>

<!--         END PROCESS COUNT ANNOTATION TASKS SECTION                     -->

<!--         BEGIN JAR/WAR/EAR CREATION TASKS SECTION                       -->

    <!--
     Creates a jar with the classes, including aspects.
     @depends aspectj to generate the .class files of the sources not compiled
              yet.
     @depends jar to package the .class files.
     @calls jar to actually create the jar file.
     @return the jar with all compiled classes, in folder <i>build.dir</i>.
    -->
    <target
        name="aspectj.make.jar"
        depends="aspectj,jar"
        description="Creates a jar with the classes, including aspects."/>

    <!--
     Creates a jar with the classes.
     @depends init to set up required properties and paths.
     @param build.dir the folder that will contain the jar file(s).
     @param classes.dir the classes folder.
     @param log4j.dir the Log4J configuration files.
     @param properties.dir the configuration properties.
     @param xml.dir the XML configuration files.
     @param project.name the project's name.
     @param project.version the project's current version.
     @param project.status the project's status.
     @param build.number the count of builds.
     @param organization.name the name of the organization.
     @calls mkdir to create the <i>build.dir</i> folder.
     @calls copy to copy some needed files to the jar.
     @calls mkdir to create the <i>classes.dir</i>/META-INF folder.
     @calls manifest to create the jar manifest file.
     @calls jar to actually create the jar file.
     @return the jar with all compiled classes, in folder <i>build.dir</i>.
    -->
    <target
        name="jar"
        depends="init, update.build.number"
        description="Creates a jar with the classes.">

        <!--
         Creates the distribution directory.
        -->
        <mkdir dir="${build.dir}"/>

        <!--
         Copy all configuration files.
        -->
        <copy todir="${classes.dir}">

            <!--
             Log4J's.
            -->
            <fileset dir="${log4j.dir}" includes="**/*.lcf"/>
            <fileset dir="${log4j.dir}" includes="**/*.xml"/>

            <!--
             Properties
            -->
            <fileset dir="${properties.dir}" includes="**/*.properties"/>

            <!--
             XML
            -->
            <fileset dir="${xml.dir}" includes="**/*.xml"/>

            <!--
             DTD
            -->
            <fileset dir="${xml.dir}" includes="**/*.dtd"/>

            <!--
             Templates
            -->
            <fileset dir="${templates.dir}">
              <include name="**/*"/>
              <exclude name="**/CVS"/>
            </fileset>

        </copy>

        <!--
         Creates the META-INF FOLDER.
        -->
        <mkdir dir="${classes.dir}/META-INF"/>

        <!--
         Creates the Manifest.
        -->           
        <manifest file="${classes.dir}/META-INF/MANIFEST.MF">

            <attribute name="Built-By" value="${organization.beautified.name}"/>

            <section name="common">

                <attribute
                    name="Specification-Title" 
                    value="${project.beautified.name}"/>

                <attribute
                    name="Specification-Version"
                    value="${project.version}"/>

                <attribute
                    name="Specification-Vendor"
                    value="${organization.beautified.name}"/>

                <attribute
                    name="Implementation-Title"
                    value="${project.beautified.name} module."/>

                <attribute
                    name="Implementation-Version"
                    value="${project.version} build #${build.number}"/>

                <attribute
                    name="Implementation-Vendor"
                    value="${organization.beautified.name}"/>

                <attribute
                    name="Implementation-Timestamp"
                    value="${DSTAMP}"/>

            </section>

        </manifest>

        <!--
         Puts everything in ${build.dir} into a jar file.
        -->
        <jar
          jarfile="${build.dir}/${project.name}-${project.version}${project.status}-${build.number}.jar"
          basedir="${classes.dir}"
          manifest="${classes.dir}/META-INF/MANIFEST.MF"/>

        <condition property="isUnix">
          <os family="unix"/>
        </condition>

        <antcall target="_jar.copy"/>
        <antcall target="_jar.symlink"/>

    </target>

    <!--
     Copies project's latest jar file to files with no version in their name, so they can
     be referred without explicit version information.
     @depends init to define all properties.
     @calls  copy to copy the file.
     @return the new files.
    -->
    <target
      name="_jar.copy"
      depends="init"
      description="Copies to version-less filenames the project's latest jar file."
      unless="isUnix">

        <property environment="env"/>

        <!--
         Copies such jar file to one with no build.number information
         in its name.
        -->
        <copy
          file="${basedir}/${build.dir}/${project.name}-${project.version}${project.status}-${build.number}.jar"
          tofile="${basedir}/${build.dir}/${project.name}-${project.version}${project.status}.jar"/>

        <copy
          file="${basedir}/${build.dir}/${project.name}-${project.version}${project.status}-${build.number}.jar"
          tofile="${basedir}/${build.dir}/${project.name}.jar"/>

        <condition property="maven.available.locally">
          <available type="dir" file="${env.MAVEN_HOME}/repository"/>
        </condition>

        <antcall target="_jar.copy.to.maven"/>

    </target>

    <!--
     Copies the latest jar file to the local Maven repository, if it's installed.
     @depends init to set required properties.
     @param env.MAVEN_HOME/repository the local Maven repository
     @calls copy to copy the new jar file to Maven.
     @return the publishing of the jar file to Maven.
    -->
    <target
      name="_jar.copy.to.maven"
      depends="init"
      description="Copies the latest jar file to the local Maven repository, if it's installed."
      if="maven.available.locally">

      <delete
        file="${env.MAVEN_HOME}/repository/${project.name}/jars/${project.name}-${project.version}${project.status}.jar"/>

      <copy
        file="${basedir}/${build.dir}/${project.name}-${project.version}${project.status}-${build.number}.jar"
        tofile="${env.MAVEN_HOME}/repository/${project.name}/jars/${project.name}-${project.version}${project.status}.jar"/>

    </target>

    <!--
     Creates sumbolic links for project's latest jar file.
     @depends init to define all properties.
     @calls symlink to declare the symbolic links.
     @return the new links.
    -->
    <target
      name="_jar.symlink"
      depends="init"
      description="Creates symbolic links for project's latest jar file."
      if="isUnix">

      <property environment="env"/>

      <!--
       Creates symlinks for latest jar file.
      -->
      <symlink
        action="single"
        overwrite="true"
        resource="${basedir}/${build.dir}/${project.name}-${project.version}${project.status}-${build.number}.jar"
        link="${basedir}/${build.dir}/${project.name}-${project.version}${project.status}.jar"/>

      <!--symlink
        action="single"
        overwrite="true"
        resource="${basedir}/${build.dir}/${project.name}-${project.version}${project.status}-${build.number}.jar"
        link="${basedir}/${build.dir}/${project.name}.jar"/-->

      <condition property="maven.available.locally">
        <available type="dir" file="${env.MAVEN_HOME}/repository"/>
      </condition>

      <antcall target="_jar.symlink.to.maven"/>

    </target>

    <!--
     Creates symlinks to the latest jar file in the local Maven repository, if it's installed.
     @depends init to set required properties.
     @param env.MAVEN_HOME/repository the local Maven repository
     @calls symlink to create the symlink to the new jar file in Maven.
     @return the publishing of the jar file to Maven.
    -->
    <target
      name="_jar.symlink.to.maven"
      depends="init"
      description="Creates symlinks to the latest jar file in the local Maven repository, if it's installed."
      if="maven.available.locally">

      <delete
        file="${env.MAVEN_HOME}/repository/${project.group}/jars/${project.name}-${project.version}${project.status}.jar"/>

      <move
        file="${basedir}/${build.dir}/${project.name}-${project.version}${project.status}-${build.number}.jar"
        toFile="${env.MAVEN_HOME}/repository/${project.group}/jars/${project.name}-${project.version}${project.status}.jar"/>

      <symlink
        action="single"
        overwrite="true"
        resource="${env.MAVEN_HOME}/repository/${project.group}/jars/${project.name}-${project.version}${project.status}.jar"
        link="${basedir}/${build.dir}/${project.name}-${project.version}${project.status}-${build.number}.jar"/>

    </target>

<!--         END JAR/WAR/EAR CREATION TASKS SECTION                         -->

<!--         BEGIN API GENERATION TASKS SECTION                             -->

    <!--
     Creates the javadoc API documentation.
     @depends init to take some basic initial steps in the build process.
     @depends clean.javadoc to clean up previously generated <i>Javadoc</i>
              documentation.
     @param javadoc.dir the javadoc output folder.
     @param project.name the name of the project.
     @param java.source.and.javadoc.path the Javadoc source files folder(s).
     @param java.compile.class.path the classpath used to compile.
     @calls <i>mkdir</i> to create the <i>javadoc.dir</i> folder.
     @calls <i>javadoc</i> to actually generate the documentation.
     @return the javadoc documentation.
    -->
    <target
      name="javadoc"
      depends="init, clean.javadoc"
      description="Creates the javadocs.">

      <!--
       Creates the javadoc destination directory.
      -->
      <mkdir dir="${javadoc.dir}"/>

      <antcall target="_javadoc.umlgraph"/>
      <antcall target="_javadoc.standard"/>

    </target>
   
    <!--
     Creates the javadoc API documentation.
     @param javadoc.dir the javadoc output folder.
     @param project.name the name of the project.
     @param java.source.and.javadoc.path the Javadoc source files folder(s).
     @param java.compile.class.path the classpath used to compile.
     @if java5 since UMLGraph requires it.
     @if umlgraph.jar.available to print class diagrams as well.
     @calls <i>mkdir</i> to create the <i>javadoc.dir</i> folder.
     @calls <i>javadoc</i> to actually generate the documentation.
     @return the javadoc documentation.
    -->
    <target
      name="_javadoc.umlgraph"
      description="Creates the javadocs."
      if="java5,umlgraph.jar.available">

      <!--link resource="${java.development.lib.dir}/-->

      <!--
       Generates the Javadoc documentation.
      -->
      <javadoc
        version="yes"
        author="yes"
        destdir="${javadoc.dir}"
        doctitle="${project.beautified.name} API"
        windowtitle="${project.beautified.name} API"
        access="public"
        defaultexcludes="no"
        overview="${javadoc.src.dir}/overview.html"
        packagenames="*"
        classpathref="java.compile.class.path"
        encoding="ISO-8859-1"
        stylesheetfile="${javadoc.src.dir}/javadoc.css"
        use="yes">

        <doclet
          name="gr.spinellis.umlgraph.doclet.UmlGraphDoc">
          <path>
            <path refid="java.development.class.path"/>
          </path>

          <param name="-inferrel"/>
          <param name="-inferdep"/>
          <param name="-hide" value="java.*"/>
          <param name="-collpackages" value="java.util.*"/>
          <param name="-qualify"/>
          <param name="-postfixpackage"/>
          <param name="-nodefontsize" value="9"/>
          <param name="-nodefontpackagesize" value="7"/>
          <param name="-link" value="http://java.sun.com/j2se/1.5.0/docs/guide/javadoc/doclet/spec"/>
          <param name="-link" value="http://java.sun.com/j2se/1.5/docs/api"/>
        </doclet>

        <sourcepath>

          <!-- ORDER MATTERS -->
          <pathelement location="${javadoc.src.dir}"/>

          <path refid="java.source.and.javadoc.path"/>

        </sourcepath>

        <bottom><![CDATA[<i>Copyright &#169; 2002-2006 ACM S.L.</i>]]></bottom>

        <tag
          name="precondition"
          scope="all"
          description="Preconditions: "/>
        <tag
          name="todo"
          scope="all"
          description="WARNING (not finished):"/>
        <tag
          name="testfamily"
          scope="all"
          description="Test family:"/>
        <tag
          name="testkind"
          scope="all"
          description="Test kind:"/>
        <tag
          name="testsetup"
          scope="all"
          description="Test set up:"/>
        <tag
          name="testpackage"
          scope="all"
          description="Test package:"/>

        <group
          title="${project.beautified.name} Packages"
          packages="org.acmsl.queryj"/>
        <group
          title="${project.beautified.name} generation Packages"
          packages="org.acmsl.queryj.tools*"/>

        <link
          href="${acmsl-commons.documentation.location}"/>

        <link
          href="${jdk.documentation.location}"/>

        <link
          href="${junit.documentation.location}"/>

      </javadoc>

    </target>

    <!--
     Creates the javadoc API documentation.
     @param javadoc.dir the javadoc output folder.
     @param project.name the name of the project.
     @param java.source.and.javadoc.path the Javadoc source files folder(s).
     @param java.compile.class.path the classpath used to compile.
     @unless umlgraph.jar.available, which would be used instead.
     @calls <i>mkdir</i> to create the <i>javadoc.dir</i> folder.
     @calls <i>javadoc</i> to actually generate the documentation.
     @return the javadoc documentation.
    -->
    <target
      name="_javadoc.standard"
      description="Creates the javadocs."
      unless="umlgraph.jar.available">

      <!--
       Creates the javadoc destination directory.
      -->
      <mkdir dir="${javadoc.dir}"/>

      <!--
       Generates the Javadoc documentation.
      -->
      <javadoc
        version="yes"
        author="yes"
        destdir="${javadoc.dir}"
        doctitle="${project.beautified.name} API"
        windowtitle="${project.beautified.name} API"
        access="public"
        defaultexcludes="no"
        overview="${javadoc.src.dir}/overview.html"
        packagenames="*"
        classpathref="java.compile.class.path"
        encoding="ISO-8859-1"
        stylesheetfile="${javadoc.src.dir}/javadoc.css"
        use="yes">

        <sourcepath>

          <!-- ORDER MATTERS -->
          <pathelement location="${javadoc.src.dir}"/>

          <path refid="java.source.and.javadoc.path"/>

        </sourcepath>

        <bottom><![CDATA[<i>Copyright &#169; 2002-2006 ACM S.L.</i>]]></bottom>

        <tag
          name="precondition"
          scope="all"
          description="Preconditions: "/>
        <tag
          name="todo"
          scope="all"
          description="WARNING (not finished):"/>
        <tag
          name="testfamily"
          scope="all"
          description="Test family:"/>
        <tag
          name="testkind"
          scope="all"
          description="Test kind:"/>
        <tag
          name="testsetup"
          scope="all"
          description="Test set up:"/>
        <tag
          name="testpackage"
          scope="all"
          description="Test package:"/>

        <group
          title="${project.beautified.name} Packages"
          packages="org.acmsl.queryj"/>
        <group
          title="${project.beautified.name} generation Packages"
          packages="org.acmsl.queryj.tools*"/>

        <link
          href="${acmsl-commons.documentation.location}"/>

        <link
          href="${jdk.documentation.location}"/>

        <link
          href="${junit.documentation.location}"/>

      </javadoc>

    </target>

    <!--
     Creates the Antdoc documentation.
     @depends init to take some basic initial steps in the build process.
     @depends clean.antdoc to clean up previously generated <i>Antdoc</i>
              documentation.
     @param antdoc.dir the Antdoc output folder.
     @param project.name the name of the project.
     @param ant.dir the Antdoc source files folder.
     @param java.compile.class.path the classpath used to compile.
     @calls <i>mkdir</i> to create the <i>antdoc.dir</i> folder.
     @calls <i>javadoc</i> to actually generate the documentation.
     @return the Antdoc documentation.
    -->
    <target
        name="antdoc"
        depends="init, clean.antdoc"
        description="Creates the Antdoc documentation.">

        <!--
         Creates the Antdoc destination directory.
        -->
        <mkdir dir="${antdoc.dir}"/>

        <!--
         Generates the Antdoc documentation.
        -->
        <javadoc
            version="yes"
            author="yes"
            access="private"
            sourcepathref="java.source.and.javadoc.path">

            <doclet
                name="org.acmsl.antdoc.AntDoclet"
                pathref="compile.class.path"/>

            <package name="org.*"/>

        </javadoc>

    </target>

    <!--
     Creates the complete API documentation bundle.
     @depends javadoc to create the <i>Javadoc</i> documentation.
     @return the creation of the complete API documentation.
    -->
    <target
        name="create.api.doc"
        depends="javadoc"
        description="Creates the complete API documentation bundle."/>

<!--         BEGIN API GENERATION TASKS SECTION                             -->

<!--         BEGIN TEST TASKS SECTION                                       -->

    <!--
     Executes all defined unit tests.
     @depends junitdoclet to manage the unit tests.
     @depends rebuild to build the project.
     @depends update.unittest.number to update the test count.
     @param project.base.suite the JUnit suite that contains all tests.
     @param classpath the classpath.
     @param project.build the project compiled classes.
     @calls java to invoke the JUnit framework.
     @calls update.test.number to update the test number.
     @return the execution of the defined JUnit tests.
    -->
    <target
        name="unit.tests"
        depends="junitdoclet,compile,compile.tests"
        description="Executes all defined unit tests.">

        <!--
         Actual JUnit invokation.
        -->
        <java
            fork="true"
            classname="${junit.runner.classname}"
            taskname="JUnit"
            failonerror="true"
            classpathref="unit.test.class.path">

            <arg value="${project.base.suite}"/>

        </java>

        <!--
         If success, increase the test count.
        -->
        <antcall target="update.unittest.number"/>

    </target>

    <!--
     Executes all defined unit tests.
     @depends rebuild to build the project.
     @depends update.unittest.number to update the test count.
     @param project.base.suite the JUnit suite that contains all tests.
     @param classpath the classpath.
     @param project.build the project compiled classes.
     @calls java to invoke the JUnit framework.
     @calls update.test.number to update the test number.
     @return the execution of the defined JUnit tests.
    -->
    <target
        name="functional.tests"
        depends="aspectj.rebuild, update.functionaltest.number"
        description="Executes all defined functional tests.">

        <!--property name="functional-test-path" refid="functional.test.class.path"/>

        <echo message="${functional-test-path}"/-->

        <!--
         Actual JUnit invokation.
        -->
        <java
            fork="yes"
            classname="${junit.runner.classname}"
            taskname="JUnit"
            failonerror="true"
            classpathref="unit.test.class.path">

            <arg value="${project.functional.base.suite}"/>

        </java>

        <!--
         If success, increase the test count.
        -->
        <antcall target="update.functionaltest.number"/>

    </target>

    <!--
     Executes all defined tests.
     @depends unittests to execute all JUnit-based unit tests.
     @return the execution of all defined tests.
    -->
    <target
        name="tests"
        depends="unit.tests,functional.tests"
        description="Executes all defined tests."/>

<!--         END TEST TASKS SECTION                                         -->

<!--         BEGIN DEBUG TASKS SECTION                                      -->

    <!--
     Debugs defined unit tests.
     @depends junitdoclet to manage the unit tests.
     @param project.base.suite the JUnit suite that contains all tests.
     @param classpath the classpath.
     @param project.build the project compiled classes.
     @calls java to invoke the JUnit framework.
     @return the debugging environment.
    -->
    <target
        name="debug.unit.tests"
        depends="junitdoclet"
        description="DEbugs defined unit tests.">

        <property name="unit-test-path" refid="unit.test.class.path"/>

        <echo message="${unit-test-path}"/>

        <!--
         Debug unit tests.
        -->
        <exec executable="java">
          <arg line="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y -cp ${unit-test-path} ${junit.runner.classname} ${project.base.suite}"/>
        </exec>

    </target>

<!--         END DEBUG TASKS SECTION                                        -->

<!--         BEGIN REBUILD TASKS SECTION                                    -->

    <!--
     Builds the project from scratch.
     @depends clean to clean up previously compiled classes.
     @depends compile to generate the .class files.
     @depends jar to create the resulting jar file.
     @return the complete build process.
    -->
    <target
        name="rebuild"
        depends="clean, compile, jar"
        description="Builds the project from scratch."/>

    <!--
     Builds the project from scratch, enabling aspects.
     @depends clean to clean up previously compiled classes.
     @depends compile to generate the .class files.
     @depends aspectj.make.jar to create the resulting jar file.
     @return the complete build process.
    -->
    <target
        name="aspectj.rebuild"
        depends="clean, compile, aspectj.make.jar"
        description="Builds the project from scratch."/>

    <!--
     Builds the project from scratch, with optimization settings
     enabled.
     @depends clean to clean up previously compiled classes.
     @depends compile.final to generate the optimized .class files.
     @depends make.jar to create the resulting jar file.
     @return the complete build process.
    -->
    <target
        name="rebuild.final"
        depends="clean, compile.final, jar"
        description="Builds the project from scratch, with
                                          optimizations."/>

    <!--
     Rebuilds the classes and executes the tests.
     @depends rebuild to rebuild the application from scratch.
     @depends tests to execute all defined tests.
     @return the build and test process.
    -->
    <target
        name="rebuild.and.test"
        depends="rebuild,tests"
        description="Rebuilds the classes and executes the tests."/>

<!--         END REBUILD TASKS SECTION                                      -->

<!--         BEGIN PROJECT PACKAGING TASKS SECTION                          -->

    <!--
     Packages the API and the source files.
     @depends all to take the whole process steps before packaging the project.
     @param javadoc.dir the javadoc output folder.
     @param javadoc.zip.path the javadoc output file.
     @param src the source files folder.
     @param javadoc.src the javadoc source files folder.
     @calls zip to store <i>javadoc.dir</i> files and subfolders into a single
            <i>javadoc.zip.path</i> archive.
     @calls zip to store the whole set of source files of any kind, and the
            project configuration into a single <i>source.zip.path</i> archive.
     @return the <i>Javadoc</i>, and the source files in a single
             zip.
    -->
    <target
        name="distribute"
        depends="all"
        description="Packages the API and the source files.">

        <!--
         Creates the Javadoc zip.
        -->
        <zip zipfile="${javadoc.zip.path}" basedir="${javadoc.dir}"/>

        <!--
         Creates the zip with the source and configuration files.
        -->
        <zip zipfile="${source.zip.path}">

            <fileset dir="${src.dir}"/>

            <fileset dir="${conf.dir}"/>

        </zip>

        <!--
         If success, increase the package number.
        -->
        <antcall target="update.package.number"/>

    </target>

<!--         END PROJECT PACKAGING TASKS SECTION                            -->

<!--         BEGIN WHOLE PROCESS TASKS SECTION                              -->

    <!--
     Rebuilds the classes, makes the jar, creates the javadoc and executes the
     unit tests.
     @depends rebuild to rebuild the application from scratch.
     @depends make.jar to package the application into one or several jar
              files.
     @depends create.api.doc to create the whole set of API documentation.
     @depends tests to execute all defined tests.
     @return the complete build and test process.
    -->
    <target
        name="all"
        depends="rebuild, create.api.doc, tests"
        description="Rebuilds the classes, makes the jar, creates the
                               API documentation and executes the tests."/>

    <!--
     Rebuilds the classes with optimization settings activated,
     makes the jar, creates the API documentation and executes the tests.
     @depends rebuild.final to rebuild the application from scratch, with
              optimizations.
     @depends make.jar to package the application into one or several jar
              files.
     @depends create.api.doc to create the whole set of API documentation.
     @depends tests to execute all defined tests.
     @return the complete (optimized) build and test process.
    -->
    <target
        name="all.final"
        depends="rebuild.final,create.api.doc,tests"
        description="Rebuilds the classes with optimization settings
                                activated, makes the jar, creates the API
                                      documentation and executes the tests."/>

<!--         END WHOLE PROCESS TASKS SECTION                                -->

<!--         BEGIN NEW PROJECT TASKS SECTION                                -->

    <!--
     Creates a new project.
     @depends init.properties to initialize all required properties.
     @calls input to ask the user the name and the base folder of the new
            project.
     @calls mkdir several times to create the whole directory structure.
     @return the folder structure associated to this generic script.
    -->
    <target
        name="create.new.project"
        depends="init.properties"
        description="Creates a new project.">

        <!--
         Asks the user for the new project's name.
        -->
        <input addproperty="new.project.name" message="New project name:"/>

        <!--
         Asks the user for the new project's base folder.
        -->
        <input
            addproperty="new.project.parent.folder"
            message="Parent folder (use full-qualified path):"/>

        <!--
         Defines a property with the new project's base folder.
        -->
        <property
            name="new.project.base.folder"
            value="${new.project.parent.folder}/${new.project.name}"/>

        <!--
         Creates the project base folder.
        -->
        <mkdir dir="${new.project.base.folder}"/>

        <!--
           Creates the configuration folder.
        -->
        <mkdir dir="${new.project.base.folder}/conf"/>

        <!--
             Creates the web-inf folder.
        -->
        <mkdir dir="${new.project.base.folder}/conf/web-inf"/>

        <!--
               Touches an empty web.xml to ensure its correct location.
        -->
        <touch file="${new.project.base.folder}/conf/web-inf/web.xml"/>

        <!--
             Creates the properties folder.
        -->
        <mkdir dir="${new.project.base.folder}/conf/properties"/>

        <!--
             Creates the log4j folder.
        -->
        <mkdir dir="${new.project.base.folder}/conf/log4j"/>

        <!--
             Creates the third-party folder.
        -->
        <mkdir dir="${new.project.base.folder}/conf/thirdparty"/>

        <!--
             Creates the xml folder.
        -->
        <mkdir dir="${new.project.base.folder}/conf/xml"/>

        <!--
           Creates the dist folder.
        -->
        <mkdir dir="${new.project.base.folder}/dist"/>

        <!--
             Creates the build folder.
        -->
        <mkdir dir="${new.project.base.folder}/dist/build"/>

        <!--
             Creates the classes folder.
        -->
        <mkdir dir="${new.project.base.folder}/dist/classes"/>

        <!--
           Creates the docs folder.
        -->
        <mkdir dir="${new.project.base.folder}/docs"/>

        <!--
             Creates the autogenerated docs folder.
        -->
        <mkdir dir="${new.project.base.folder}/docs/autogenerated"/>

        <!--
               Creates the autogenerated Javadoc docs folder.
        -->
        <mkdir dir="${new.project.base.folder}/docs/autogenerated/javadoc"/>

        <!--
             Creates the design docs folder.
        -->
        <mkdir dir="${new.project.base.folder}/docs/design"/>

        <!--
             Creates the license docs folder.
        -->
        <mkdir dir="${new.project.base.folder}/docs/license"/>

        <!--
           Creates the engineering data folder.
        -->
        <mkdir dir="${new.project.base.folder}/engineering"/>

        <!--
             Creates the PSP data folder.
        -->
        <mkdir dir="${new.project.base.folder}/engineering/psp"/>

        <!--
             Creates the notes folder.
        -->
        <mkdir dir="${new.project.base.folder}/engineering/notes"/>

        <!--
           Creates the lib folder.
        -->
        <mkdir dir="${new.project.base.folder}/lib"/>

        <!--
             Creates the AspectJ lib folder.
        -->
        <mkdir dir="${new.project.base.folder}/lib/aspectj"/>

        <!--
               Creates the AspectJ build lib folder.
        -->
        <mkdir dir="${new.project.base.folder}/lib/aspectj/build"/>

        <!--
               Creates the AspectJ runtime lib folder.
        -->
        <mkdir dir="${new.project.base.folder}/lib/aspectj/runtime"/>

        <!--
             Creates the Java lib folder.
        -->
        <mkdir dir="${new.project.base.folder}/lib/java"/>

        <!--
               Creates the Java build lib folder.
        -->
        <mkdir dir="${new.project.base.folder}/lib/java/build"/>

        <!--
               Creates the Java runtime lib folder.
        -->
        <mkdir dir="${new.project.base.folder}/lib/java/runtime"/>

        <!--
             Creates the WAR temp folder.
        -->
        <mkdir dir="${new.project.base.folder}/lib/wartmp"/>

        <!--
           Creates the source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src"/>

        <!--
             Creates the AspectJ source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/aspectj"/>

        <!--
               Creates the AspectJ's aspects source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/aspectj/aspects"/>

        <!--
             Creates the HTML source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/html"/>

        <!--
             Creates the Java source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/java"/>

        <!--
               Creates the Java unit tests source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/java/unittests"/>

        <!--
               Creates the Java functional tests source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/java/functionaltests"/>

        <!--
             Creates the JSP source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/jsp"/>

        <!--
             Creates the Javadoc source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/javadoc"/>

        <!--
             Creates the shell scripts source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/shellscripts"/>

        <!--
               Creates the WAR-related shell scripts source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/shellscripts/wartmp"/>

        <!--
             Creates the tool configuration source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/toolconf"/>

        <!--
             Creates the Ant source folder.
        -->
        <mkdir dir="${new.project.base.folder}/src/toolconf/ant"/>

        <!--
               Initializes the build count.
        -->
        <echo
            file="${new.project.base.folder}/src/toolconf/ant/build.number"
            message="build.number=0"/>

        <!--
               Copies this script to the new location.
        -->
        <copy
            file="src/toolconf/ant/build.xml"
            tofile="${new.project.base.folder}/src/toolconf/ant/build.xml"/>

        <!--
               Creates a template for build.properties.
        -->
        <echo
            file="${new.project.base.folder}/src/toolconf/ant/build.properties">#
#                       ${project.beautified.name}
#
#    Copyright (C) 2002  Jose San Leandro Armendariz
#                        jsanleandro@yahoo.es
#                        chousz@yahoo.com
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public
#    License as published by the Free Software Foundation; either
#    version 2 of the License, or any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    General Public License for more details.
#
#    You should have received a copy of the GNU General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
#    Thanks to ACM S.L. for distributing this library under the GPL license.
#    Contact info: jsr000@terra.es
#    Postal Address: c/Playa de Lagoa, 1
#                    Urb. Valdecabanas
#                    Boadilla del monte
#                    28660 Madrid
#                    Spain
#
###############################################################################
#                                                                             
# Filename: $$RCSfile$$
#
# Author: Jose San Leandro Armendariz
#
# Description:	Spefifies some properties needed to build the project using
#               Ant, in each concrete environment.
#
# Last modified by: $$Author$$
#
# File version: $$Revision$$
#
# Project version: $$Name$$
#                  ("Name" means no concrete version has been checked out)
#
# $$Id$$
#

# Project name
project.name=${new.project.name}

# Project dir
project.base.folder=.

 # CVS updates project.version value everytime this file is checked out.
project.version=$$Name$$

# Project status
project.status=

# Organization information
organization.name=

# JUnit runner class name
#junit.runner.classname=junit.textui.TestRunner
junit.runner.classname=junit.swingui.TestRunner

# Project base JUnit suite.
project.base.suite=
        </echo>

        <!--
               Initializes the packaged count.
        -->
        <echo
            file="${new.project.base.folder}/src/toolconf/packaged.number"
            message="build.number=0"/>

        <!--
               Initializes the unit tests count.
        -->
        <echo
            file="${new.project.base.folder}/src/toolconf/tested.number"
            message="build.number=0"/>

    </target>
<!--         END NEW PROJECT TASKS SECTION                                  -->

<!--         BEGIN ANTLR TASK SECTION                                     -->

    <!--
     Cleans up any already generated sources from ANTLR grammar.
     @depends init.properties to set required properties.
     @return the removal of previously generated compiler sources.
    -->
    <target
        name="antlr.clean"
        depends="init"
        description="Cleans up any already generated sources from ANTLR
                             grammar.">

        <!--
         Removes any sources generated from ANTLR grammars.
        -->
        <delete
            dir="${antlr.java.src.dir}/org/acmsl/${project.name}/antlr"/>

        <!--
         Creates such folder again.
        -->
        <mkdir
            dir="${antlr.java.src.dir}/org/acmsl/${project.name}/antlr"/>

    </target>

    <!--
     Builds any ANTLR-based language parser.
     @depends init.properties to set required properties.
     @return the generated source files of such parser.
    -->
    <target
        name="antlr.execute"
        depends="init"
        description="Builds ANTLR-based language parser.">

        <property
            name="antlr-class-path"
            refid="antlr.class.path"/>

        <echo message="${antlr-class-path}"/>

        <mkdir
        dir="${antlr.java.src.dir}/${antlr.base.package.folder}"/>

        <!--
         Actual antlr execution on given grammar.
        -->
        <antlr
            target="${antlr.src.dir}/${antlr.grammar.name}Lexer.g"
            outputdirectory="${antlr.java.src.dir}/${antlr.base.package.folder}"/>
        <antlr
            target="${antlr.src.dir}/${antlr.grammar.name}Parser.g"
            outputdirectory="${antlr.java.src.dir}/${antlr.base.package.folder}"/>

    </target>

    <!--
     Compiles the Java source files generated by ANTLR from the grammar.
     @depends init to take some basic initial steps in the build process.
     @param antlr.classes.dir the classes folder.
     @param antlr.java.source.path the Java source files folder(s).
     @param antlr.compile.class.path the classpath needed for compilation.
     @calls javac to compile the sources.
     @return the compilation of specified classes.
    -->
    <target
        name="antlr.compile"
        depends="antlr.execute"
        description="Compiles the Java source files generated by ANTLR
                              from the grammar.">

        <!--
         Compile the java code from ${java.source.path} into ${classes.dir}.
        -->
        <javac destdir="${classes.dir}" debug="on">

            <src refid="antlr.java.source.path"/>

            <classpath refid="antlr.compile.class.path"/>

            <classpath refid="antlr.unit.test.class.path"/>

        </javac>

        <mkdir dir="${antlr.input.src.dir}"/>

        <!--
         Copies all input files to the test classpath.
        -->
        <copy
            todir="${classes.dir}/${antlr.base.package.folder}">

            <fileset dir="${antlr.input.src.dir}"/>

        </copy>
   
    </target>

    <!--
     Cleans up any already generated Javadoc from ANTLR grammar.
     @depends init.properties to set required properties.
     @return the removal of previously generated compiler sources.
    -->
    <target
        name="antlr.clean.javadoc"
        depends="init"
        description="Cleans up any already generated Javadoc from ANTLR
                             grammar.">

        <!--
         Removes any Javadoc files for sources generated from ANTLR grammars.
        -->
        <delete
            dir="${antlr.javadoc.dir}"/>

        <!--
         Creates such folder again.
        -->
        <mkdir dir="${antlr.javadoc.dir}"/>

    </target>

    <!--
     Creates the Javadoc API documentation for Java sources generated by ANTLR.
     @depends init to take some basic initial steps in the build process.
     @depends clean.antlr.javadoc to clean up previously generated
              <i>Javadoc</i> documentation for ANTLR generated sources.
     @param antlr.javadoc.dir the Javadoc output folder.
     @param project.name the name of the project.
     @param antlr.java.source.and.javadoc.path the Javadoc source files
            folder(s).
     @param antlr.java.compile.class.path the classpath used to compile.
     @calls <i>mkdir</i> to create the <i>antlr.javadoc.dir</i> folder.
     @calls <i>javadoc</i> to actually generate the documentation.
     @return the Javadoc documentation for ANTLR generated sources.
    -->
    <target
        name="antlr.javadoc"
        depends="init, antlr.clean.javadoc"
        description="Creates the Javadoc API documentation for Java
                                 sources generated by ANTLR.">

        <!--
         Creates the javadoc destination directory.
        -->
        <mkdir dir="${antlr.javadoc.dir}"/>

        <!--
         Contains all Antlr runtime classpath.
        -->
        <property
            name="antlr-javadoc-source-path"
            refid="antlr.java.source.and.javadoc.path"/>

        <echo message="${antlr-javadoc-source-path}"/>

        <!--
         Generates the Javadoc documentation.
        -->
        <javadoc
            version="yes"
            author="yes"
            destdir="${antlr.javadoc.dir}"
            doctitle="${project.name} ANTLR API"
            windowtitle="${project.name} ANTLR API"
            access="private"
            defaultexcludes="no"
            packagenames="*"
            sourcepathref="antlr.java.source.and.javadoc.path"
            classpathref="antlr.class.path"/>

    </target>

    <!--
     Builds the compiler from scratch.
     @depends clean.antlr to remove any previously generated source files for
              the grammar.
     @depends antlr to generate the Java sources from the grammar.
     @return the compiler sources built from scratch.
    -->
    <target
        name="antlr.rebuild"
        depends="antlr.clean, antlr.compile"
        description="Builds the compiler from scratch."/>

    <!--
     Executes all defined unit tests for ANTLR grammar.
     @depends unit.junit.taskdefs to set up the junit tasks defs.
     @depends antlr.rebuild to rebuild all ANTLR files.
     @depends update.unittest.number to increment the test count.
     @param antlr.base.suite the suite to test.
     @param antlr.test.classpath the classpath.
     @param project.build the project compiled classes.
     @calls java to invoke the JUnit framework.
     @return the execution of the defined JUnit tests.
    -->
    <target
        name="antlr.unit.tests"
        depends="antlr.rebuild, update.unittest.number"
        description="Executes all defined unit tests for ANTLR grammar.">

        <!--
         Actual JUnit invokation.
        -->
        <junit printsummary="withOutAndErr" fork="no" haltonfailure="yes">

            <classpath>

                <path refid="test.class.path"/>

                <path refid="antlr.class.path"/>

                <pathelement location="${classes.dir}"/>

            </classpath>

            <formatter type="plain" usefile="false"/>

            <test name="${antlr.junit.suite}"/>

        </junit>

    </target>

<!--         END ANTLR TASK SECTION                                         -->

<!--         BEGIN AUTOCONF SECTION                                         -->

    <!--
     Creates the required files to successfully build the project
     with AutoConf / AutoMake.
     @depends init to set up the global paths and properties.
     @return the creation of the autotools files.
    -->
    <target
      name="autotools"
      depends="init">
      <description>Creates the required files to successfully build
      the project with AutoConf / AutoMake.</description>

      <!--
        Copies AUTHORS, NEWS, COPYING, README, etc from
        autotools folder.
      -->
      <copy todir="${project.base.folder}">

        <fileset dir="${autotools.dir}"/>

      </copy>

    </target>

<!--         END AUTOCONF SECTION                                           -->

</project>
