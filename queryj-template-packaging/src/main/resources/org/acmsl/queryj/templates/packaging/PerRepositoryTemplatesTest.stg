//;-*- mode: antlr -*-
//
//                      QueryJ Template Packaging
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: PerRepositoryTemplatesTest.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate PerRepositoryTemplatesTest
//              implementations.
//
group PerRepositoryTemplatesTest;

import "common.stg"

source(C) ::= <<
<!
  Generates PerRepositoryTemplatesTest implementations.
!>
<if(C.header)>
<C.header>
<else>
<java_header(
  description=
  [
    description()
  ],
  template="org/acmsl/queryj/templates/packaging/PerRepositoryTemplatesTest.stg",
  C=C)><endif>

<package_declaration(packageName="cucumber.templates")>
<checkers_import()>

/*
 * Importing QueryJ Core classes.
 */
import org.acmsl.queryj.api.exceptions.DevelopmentModeException;
import org.acmsl.queryj.api.exceptions.QueryJBuildException;
import org.acmsl.queryj.api.PerRepositoryTemplate;
import org.acmsl.queryj.api.PerRepositoryTemplateContext;
import org.acmsl.queryj.api.PerRepositoryTemplateFactory;
import org.acmsl.queryj.api.PerRepositoryTemplateGenerator;
import org.acmsl.queryj.ConfigurationQueryJCommandImpl;
import org.acmsl.queryj.customsql.CustomSqlProvider;
import org.acmsl.queryj.customsql.handlers.CustomSqlProviderRetrievalHandler;
import org.acmsl.queryj.customsql.handlers.CustomSqlValidationHandler;
import org.acmsl.queryj.customsql.handlers.customsqlvalidation.RetrieveQueryHandler;
import org.acmsl.queryj.customsql.Parameter;
import org.acmsl.queryj.customsql.Sql;
import org.acmsl.queryj.Literals;
import org.acmsl.queryj.metadata.DecoratedString;
import org.acmsl.queryj.metadata.DecoratorFactory;
import org.acmsl.queryj.metadata.engines.Engine;
import org.acmsl.queryj.metadata.engines.EngineDecorator;
import org.acmsl.queryj.metadata.engines.UndefinedJdbcEngine;
import org.acmsl.queryj.metadata.engines.oracle.OracleEngine;
import org.acmsl.queryj.metadata.MetadataManager;
import org.acmsl.queryj.metadata.vo.Attribute;
import org.acmsl.queryj.metadata.vo.ForeignKey;
import org.acmsl.queryj.metadata.vo.Row;
import org.acmsl.queryj.metadata.vo.Table;
import org.acmsl.queryj.QueryJCommand;
import org.acmsl.queryj.QueryJCommandWrapper;
import org.acmsl.queryj.QueryJSettings;
import org.acmsl.queryj.SerializablePropertiesConfiguration;
import org.acmsl.queryj.tools.handlers.DatabaseMetaDataRetrievalHandler;
import org.acmsl.queryj.tools.handlers.JdbcConnectionOpeningHandler;
import org.acmsl.queryj.tools.handlers.ParameterValidationHandler;

/*
 * Importing QueryJ Template Packaging classes.
 */
import org.acmsl.queryj.templates.packaging.TemplateDef;
import org.acmsl.queryj.templates.packaging.TemplateDefPerRepositoryTemplateContext;

/*
 * Importing QueryJ Test classes.
 */
import org.acmsl.queryj.test.AbstractTemplatesTest;
import org.acmsl.queryj.test.TableTestHelper;

/*
 * Importing project classes.
 */
<C.templateDefs:{ d | <def_import(d=d)>}; separator="\n">

/*
 * Importing StringTemplate classes.
 */
import org.stringtemplate.v4.ST;

/*
 * Importing ACM-SL Commons classes.
 */
import org.acmsl.commons.logging.UniqueLogFactory;

/*
 * Importing Cucumber classes.
 */
import cucumber.api.DataTable;
import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

/*
 * Importing Apache Commons Logging classes.
 */
import org.apache.commons.logging.LogFactory;

/*
 * Importing Jetbrains Annotations.
 */
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/*
 * Importing JUnit classes.
 */
import org.junit.Assert;

/*
 * Importing JDK classes.
 */
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

<class(defs=C.templateDefs, C=C)>
>>

description() ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
!>
Cucumber tests for per-table templates.
>>

def_import(d) ::= <<
<!
  Generates the imports for a given TemplateDef.
  @param d the template def.
!>
import org.acmsl.queryj.templates.<d.defName>TemplateFactory;
import org.acmsl.queryj.templates.<d.defName>TemplateGenerator;
>>

class(defs, C) ::= <<
<!
 Generates the class body.
 @param defs the template defs.
 @param C the context.
!>
/**
 * <description()>
<class_common_javadoc(
  template="org/acmsl/queryj/dao/PerRepositoryTemplatesTest.stg",
  generation_timestamps_enabled=C.generation_timestamps_enabled,
  timestamp=C.timestamp,
  version=C.version)>
 */
public class PerRepositoryTemplatesTest
    extends AbstractTemplatesTest\<
                PerRepositoryTemplateGenerator\<? extends PerRepositoryTemplate\<PerRepositoryTemplateContext>, PerRepositoryTemplateContext>,
                PerRepositoryTemplateFactory\<? extends PerRepositoryTemplate\<PerRepositoryTemplateContext>, PerRepositoryTemplateContext\>>
{
    /**
     * Creates an instance.
     */
    public PerRepositoryTemplatesTest()
    {
        super();

        <defs:{ d | <if(!d.disabled)><if(d.type.perRepository)><generator_mapping(def=d)><endif><endif>}; separator="\n">
        <defs:{ d | <if(!d.disabled)><if(d.type.perRepository)><debug_mapping(def=d)><endif><endif>}; separator="\n">
    }

    /**
     * Defines the input tables based on the information provided by the
     * feature.
     * @param tableInfo the information about the tables.
     */
    @SuppressWarnings("unused")
    @Given("^the repository whose name is (.*), composed of:$")
    public void defineInputTables(@NotNull final String repository, @NotNull final DataTable tableInfo)
    {
        setRepository(repository);
        defineInputTables(tableInfo, getTables(), TableTestHelper.getInstance());
    }

    /**
     * Defines the input tables based on the information provided by the
     * feature.
     * @param tableInfo the information about the tables.
     * @param tables the tables.
     * @param helper the {@link TableTestHelper} instance.
     */
    protected void defineInputTables(
        @NotNull final DataTable tableInfo,
        @NotNull final Map\<String, Table\<String, Attribute\<String>, List\<Attribute\<String\>>\>> tables,
        @NotNull final TableTestHelper helper)
    {
        helper.defineInputTables(tableInfo, tables);
    }

    /**
     * Generates a file with the information from the feature.
     * @param template the template.
     * @param engine the engine.
     */
    @SuppressWarnings("unused")
    @When("^I use the repository-wide (.*).stg for (.*)$")
    public void generateFile(@NotNull final String template, @NotNull final String engine)
    {
        setEngineName(engine);

        generateFile(
            template,
            engine,
            retrieveTemplateDef(template),
            getRepository(),
            getTables(),
            getOutputFiles(),
            retrieveCustomSqlProvider(getSqlList(), getParameters()));
    }

    /**
     * Generates a file with the information from the feature.
     * @param templateName the template.
     * @param engine the engine name.
     * @param templateDef the {@link TemplateDef}.
     * @param repository the repository.
     * @param tableMap the table map.
     * @param outputFiles the output files.
     * @param sqlProvider the {@link CustomSqlProvider} instance.
     */
    @SuppressWarnings("unchecked")
    protected void generateFile(
        @NotNull final String templateName,
        @NotNull final String engine,
        @NotNull final TemplateDef\<String> templateDef,
        @NotNull final String repository,
        @NotNull final Map\<String, Table\<String, Attribute\<String>, List\<Attribute\<String\>>\>> tableMap,
        @NotNull final Map\<String, File> outputFiles,
        @NotNull final CustomSqlProvider sqlProvider)
    {
        @Nullable final PerRepositoryTemplateGenerator\<PerRepositoryTemplate\<PerRepositoryTemplateContext>, PerRepositoryTemplateContext> t_Generator =
            (PerRepositoryTemplateGenerator\<PerRepositoryTemplate\<PerRepositoryTemplateContext>, PerRepositoryTemplateContext>) retrieveTemplateGenerator(
                templateName);

        Assert.assertNotNull(
            "No template generator found for " + templateName + ". Does " + templateName + ".stg exist?",
            t_Generator);

        @NotNull final DecoratorFactory t_DecoratorFactory = retrieveDecoratorFactory(t_Generator);

        boolean firstTime = true;
        boolean restart = false;

        @Nullable String failCause = null;

        while (   (firstTime)
               || (restart))
        {
            firstTime = false;

            @NotNull final QueryJCommand t_Command =
                new ConfigurationQueryJCommandImpl(new SerializablePropertiesConfiguration());

            new QueryJCommandWrapper\<DecoratorFactory>(t_Command).setSetting(
                DecoratorFactory.class.getName(), t_DecoratorFactory);
            new QueryJCommandWrapper\<CustomSqlProvider>(t_Command).setSetting(
                CustomSqlProviderRetrievalHandler.CUSTOM_SQL_PROVIDER, sqlProvider);
            new QueryJCommandWrapper\<String>(t_Command).setSetting(
                QueryJSettings.PACKAGE_NAME, BASE_PACKAGE_NAME);
            new QueryJCommandWrapper\<String>(t_Command).setSetting(
                Literals.HEADER, "");
            new QueryJCommandWrapper\<String>(t_Command).setSetting(
                QueryJSettings.REPOSITORY, repository);
            new QueryJCommandWrapper\<Boolean>(t_Command).setSetting(
                QueryJSettings.DISABLE_TIMESTAMPS, false);
            new QueryJCommandWrapper\<Boolean>(t_Command).setSetting(
                QueryJSettings.IMPLEMENT_MARKER_INTERFACES, false);
            new QueryJCommandWrapper\<Boolean>(t_Command).setSetting(
                QueryJSettings.DISABLE_NOTNULL_ANNOTATIONS, false);
            new QueryJCommandWrapper\<Boolean>(t_Command).setSetting(
                QueryJSettings.DISABLE_CHECKTHREAD_ANNOTATIONS, false);
            new QueryJCommandWrapper\<String>(t_Command).setSetting(
                QueryJSettings.JNDI_DATASOURCE, "");
            new QueryJCommandWrapper\<String>(t_Command).setSetting(
                QueryJSettings.VERSION, "<C.version>");

            @NotNull final List\<Table\<String, Attribute\<String>, List\<Attribute\<String\>>\>> t_lTables =
                new ArrayList\<Table\<String, Attribute\<String>, List\<Attribute\<String\>>\>>(tableMap.values());

            @NotNull final MetadataManager t_MetadataManager =
                retrieveMetadataManager(
                    engine,
                    t_lTables,
                    new ArrayList\<Row\<String\>>(0),
                    t_DecoratorFactory);

            new QueryJCommandWrapper\<MetadataManager>(t_Command).setSetting(
                DatabaseMetaDataRetrievalHandler.METADATA_MANAGER, t_MetadataManager);

            @Nullable final PerRepositoryTemplateFactory\<? extends PerRepositoryTemplate\<PerRepositoryTemplateContext>, PerRepositoryTemplateContext> t_TemplateFactory =
                retrieveTemplateFactory(templateName);

            Assert.assertNotNull("No template factory found for " + templateName, t_TemplateFactory);

            @NotNull final List\<String> t_lTableNames = t_MetadataManager.getTableDAO().findAllTableNames();

            @NotNull final PerRepositoryTemplateContext t_Context =
                new TemplateDefPerRepositoryTemplateContext(
                    templateDef,
                    repository,
                    t_lTableNames,
                    (DEBUG.containsKey(templateName) && DEBUG.get(templateName)),
                    t_Command);

            @NotNull final String t_strPackageName =
                resolvePackage(PACKAGE_MAPPINGS.get(templateName), repository, resolveEngine(engine));

            t_Context.setPackageName(t_strPackageName);

            @Nullable final PerRepositoryTemplate\<PerRepositoryTemplateContext> t_Template =
                t_TemplateFactory.createTemplate(
                    repository, t_lTableNames, t_Context, t_Command);

            Assert.assertNotNull("No template found for " + templateName, t_Template);

            File t_OutputDir = null;

            try
            {
                rootFolder.create();

                @NotNull final String[] t_astrPackages = t_strPackageName.split("\\\.");
                @NotNull final StringBuilder t_sbFolder = new StringBuilder();

                for (@NotNull final String t_strPkg : t_astrPackages)
                {
                    t_sbFolder.append(File.separator);
                    t_sbFolder.append(t_strPkg);
                }

                t_OutputDir = new File(rootFolder.getRoot().getAbsolutePath().concat(t_sbFolder.toString()));

                t_OutputDir.mkdirs();
            }
            catch (@NotNull final IOException ioException)
            {
                Assert.fail(ioException.getMessage());
            }

            if (!t_OutputDir.exists())
            {
                Assert.fail("Cannot create folder: " + t_OutputDir.getAbsolutePath());
            }

            UniqueLogFactory.initializeInstance(LogFactory.getLog(PerRepositoryTemplatesTest.class));

            try
            {
                t_Generator.write(
                    t_Template,
                    t_OutputDir,
                    rootFolder.getRoot(),
                    Charset.defaultCharset());
            }
            catch (@NotNull final IOException ioException)
            {
                failCause = ioException.getMessage();

                restart = false;
            }
            catch (@NotNull final DevelopmentModeException debugging)
            {
                restart = true;
            }
            catch (@NotNull final QueryJBuildException queryjBuildException)
            {
                failCause = queryjBuildException.getMessage();

                restart = false;
            }

            outputFiles.put(
                repository,
                new File(t_OutputDir, t_Template.getTemplateContext().getFileName()));
        }

        if (failCause != null)
        {
            Assert.fail(failCause);
        }
    }

    /**
     * Checks the generated file compiles.
     * @param outputName the name of the output file.
     */
    @SuppressWarnings("unused")
    @Then("^the generated repository-wide (.*) file compiles successfully")
    public void checkGeneratedFileCompiles(@NotNull final String outputName)
    {
        checkGeneratedFilesCompile(outputName, getOutputFiles());
    }

    /**
     * Retrieves the {@link DecoratorFactory} instance using given generator.
     * @param generator the generator to use.
     * @return the decorator factory.
     */
    @NotNull
    @Override
    protected DecoratorFactory retrieveDecoratorFactory(
        @NotNull final PerRepositoryTemplateGenerator\<? extends PerRepositoryTemplate\<PerRepositoryTemplateContext>, PerRepositoryTemplateContext> generator)
    {
        return generator.getDecoratorFactory();
    }

    /**
     * Resolves the engine.
     * @param name the engine name.
     * @return the {@link Engine}.
     */
    @NotNull
    protected Engine\<String> resolveEngine(@NotNull final String name)
    {
        @NotNull final Engine\<String> result;

        if (name.equalsIgnoreCase(Literals.ORACLE))
        {
            result = new OracleEngine("unknown");
        }
        else
        {
            result = new UndefinedJdbcEngine(name, "unknown");
        }

        return result;
    }

    /**
     * Resolves the package.
     * @param packageTemplate the package template.
     * @param repository the repository.
     * @param engine the engine.
     * @return the actual package.
     */
    @NotNull
    protected String resolvePackage(
        @NotNull final String packageTemplate,
        @NotNull final String repository,
        @NotNull final Engine\<String> engine)
    {
        @NotNull final String result;

        @NotNull final ST template = new ST(packageTemplate);
        template.add(Literals.PACKAGE_NAME, new DecoratedString(BASE_PACKAGE_NAME));
        template.add(Literals.REPOSITORY, new DecoratedString(repository));
        template.add(Literals.ENGINE, new EngineDecorator(engine));
        template.add(Literals.NOTHING, new DecoratedString(""));

        result = template.render();

        return result;
    }
}
>>

generator_mapping(def) ::= <<
<!
 Generates the call to add the generator and factory of the def to the general mappings.
 @param def the template def.
!>
GENERATOR_MAPPINGS.put("<def.defName>", new <def.defName>TemplateGenerator(false, 1));
FACTORY_MAPPINGS.put("<def.defName>", <def.defName>TemplateFactory.getInstance());
PACKAGE_MAPPINGS.put("<def.defName>", "<def.packageName>");
>>

debug_mapping(def) ::= <<
<!
 Generates the call to specify which template defs are market for debugging.
 @param def the template def.
!>
DEBUG.put("<def.defName>", <def.debug>);
>>
