- Create a new Java abstract class TemplatePackagingBuildHandler in folder src/main/java/org/acmsl/queryj/templates/packaging/handlers;
- Add comment: Base build handler for Template Packaging templates.;
- Add class parameters:
  - T extends TemplatePackagingTemplate<C>;
  - TF extends TemplatePackagingTemplateFactory<T, C>;
  - C extends TemplatePackagingContext;
- Make it implement QueryJCommandHandler<QueryJCommand>;
- Make it implement TemplatePackagingSettings;
- Implement a default constructor;
- Override the handle(QueryJCommand) method:
  - Call buildTemplates(parameters, retrieveTemplateFactory());
  - Call storeTemplates(template, parameters);
  - return false;
- Implement T[] buildTemplates(QueryJCommand, TF):
  - Create a new ArrayList<T>();
  - Retrieve all TemplateDef instances from the command, by calling retrieveTemplateDefs(parameters);
  - Iterate through all instances. For each instance:
    - Call buildTemplate(parameters, templateDef);
    - If the template returned is null, throw a RuntimeException and annotate a TODO item;
    - Otherwise, add the template to the list of templates to return;
- Create a method retrieveTemplateDefs(QueryJCommand);
- Create a method buildTemplate(QueryJCommand):
  - call buildTemplate(retrieveTemplateFactory(), buildContext(templateDef, parameters));;
- Create a method buildTemplate(TF, C):
  - call factory.createTemplate(context);
- Declare a new abstract method TF retrieveTemplateFactory();
- Declare a new abstract method C buildContext(TemplateDef, QueryJCommand);
- Declare a new abstract method storeTemplates(List<T>, QueryJCommand),
- Declare a new abstract method retrieveTemplateName(QueryJCommand);
- Implement a new method DefaultTemplatePackagingContext buildDefaultContext(TemplateDef, QueryJCommand):
  - Return a new DefaultTemplatePackagingContext passing templateDef, retrieveTemplateFileName(parameters), and templateDef.getFile().getAbsolutePath();
- Fix import groups;
