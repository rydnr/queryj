- Create a new StringTemplate template TemplateWritingHandler.stg in folder src/main/resources/org/acmsl/queryj/templates/packaging;
- Add QueryJ header;
- Add comment: Defines the rules to generate QueryJ's TemplateWritingHandler.;
- Declare the group TemplateWritingHandler;
- Import "common.stg";
- Define a rule source(C):
  - Add comment: Generates a TemplateWritingHandler source file.;
  - Add comment: @param C the context.;
  - Call <sourceImpl(def=C.templateDef, C=C)>;
- Define a rule sourceImpl(def, C):
  - Add comment: Generates a TemplateWritingHandler source file according to a TemplateDef.;
  - Add comment: @param def the template definition.;
  - Add comment: @param C the context.;
  - Call java_header template:
    - Pass description as [ "Writing handler for", def.name.capitalized, "Templates" ],
    - Pass description_oneline as true;
    - Pass filename as C.class_name;
    - Pass template as "org/acmsl/queryj/templates/packaging/TemplateWritingHandler.stg";
    - Pass C as C;
  - Call package_declaration template:
    - Pass packageName as def.packageName;
  - Write QueryJ-API import group;
  - Write ACM-SL Commons import group;
  - Write JetBrains import group;
  - Write checkthread.org import group;
  - Write JDK import group;
  - Call class template:
    - Pass def as def;
    - Pass C as C;
  - Define a rule class(def, C):
    - Add comment: Writing handler for {@link <def.name.capitalized>Template}s.;
    - Call class_common_javadoc template:
      - Pass template as "org/acmsl/queryj/templates/packaging/TemplateWritingHandler.stg";
      - Pass timestamp as C.timestamp;
    - Add @ThreadSafe annotation;
    - Define the class with <C.class_name> as name;
    - Make it extend Base<def.type.capitalized>TemplateWritingHandler, bound to <def.name.capitalized>Template, <def.name.capitalized>TemplateGenerator and <def.type.capitalized>TemplateContext;
    - Define the default constructor:
      - Add comment: Creates a new writing handler for {@link <def.name.capitalized>Template} templates.;
    - Implement retrieveTemplateGenerator(boolean, int) method:
      - Add comment: Retrieves the template generator.;
      - Add comment: @return such instance.;
      - Add @NotNull annotation;
      - Add @Override annotation;
      - Return new <def.name.capitalized>TemplateGenerator(caching, threadCount);
    - Implement retrieveTemplates(QueryJCommand) method:
      - Add comment: Retrieves the templates from given command.;
      - Add comment: @param parameters the parameters.;
      - Add comment: @return the list of {@link <def.name.capitalized>Template templates}.;
      - Add @NotNull annotation;
      - Add @Override annotation;
      - Copy method from DAOTemplateWritingHandler:
        - Replace <DAOTemplate> with \<<def.name.capitalized>Template>;
        - Replace DAOTemplate with <def.name.capitalized>;
    - Implement retrieveOutputDir(File, String, boolean, String, engineName, QueryJCommand, PackageUtils) method:
      - Add comment: {@inheritDoc};
      - Add @NotNull annotation;
      - Add @Override annotation;
      - Return "<def.packageName>";
    - Fix import groups;